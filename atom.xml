<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Shagun Jhaver</title>
    <link href="https://www.shagunjhaver.com/" rel="alternate" />
    <link href="https://www.shagunjhaver.com/atom.xml" rel="self" />
    <id>https://www.shagunjhaver.com/</id>
    <updated>2021-10-28T15:49:14-04:00</updated>
    <entry>
        <title type="html"><![CDATA[Do-calculus adventures! Exploring the three rules of do-calculus in plain language and deriving the backdoor adjustment formula by hand]]></title>
        <link href="https://www.shagunjhaver.com/blog/2021/09/07/do-calculus-backdoors/" rel="alternate" />
        <published>2021-09-07T00:00:00+00:00</published>
        <updated>2021-09-07T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2021/09/07/do-calculus-backdoors/</id>
        <summary type="html"><![CDATA[Use R to explore the three rules of *do*-calculus in plain language and derive the backdoor adjustment formula by hand]]></summary>
        <content type="html"><![CDATA[<h2 id="contents----omit-in-toc---">Contents <!-- omit in toc --></h2>
<ul>
<li><a href="#exploring-the-rules-of-do-calculus">Exploring the rules of <em>do</em>-calculus</a>
<ul>
<li><a href="#rule-1-ignoring-observations">Rule 1: Ignoring observations</a></li>
<li><a href="#rule-2-treating-interventions-as-observations">Rule 2: Treating interventions as observations</a></li>
<li><a href="#rule-3-ignoring-interventions">Rule 3: Ignoring interventions</a></li>
<li><a href="#summary">Summary</a></li>
</ul>
</li>
<li><a href="#deriving-the-backdoor-adjustment-formula-from-do-calculus-rules">Deriving the backdoor adjustment formula from <em>do</em>-calculus rules</a>
<ul>
<li><a href="#marginalizing-across-z">Marginalizing across <code>\(z\)</code></a></li>
<li><a href="#applying-rule-2">Applying Rule 2</a></li>
<li><a href="#applying-rule-3">Applying Rule 3</a></li>
<li><a href="#final-equation">Final equation</a></li>
</ul>
</li>
<li><a href="#references">References</a></li>
</ul>
<hr>
<p>I’ve been teaching <a href="https://evalf21.classes.andrewheiss.com/">a course on program evaluation</a> since Fall 2019, and while part of the class is focused on logic models and the more managerial aspects of evaluation, the bulk of the class is focused on causal inference. Ever since reading <a href="http://bayes.cs.ucla.edu/WHY/">Judea Pearl’s <em>The Book of Why</em></a> in 2019, I’ve thrown myself into the world of DAGs, econometrics, and general causal inference, and I’ve been both teaching it and using it in research ever since. I’ve even <a href="https://www.andrewheiss.com/research/chapters/heiss-causal-inference-2021/">published a book chapter on it</a>. Fun stuff.</p>
<p>This post assumes you have a general knowledge of DAGs and backdoor confounding. Read <a href="https://www.andrewheiss.com/blog/2020/02/25/closing-backdoors-dags/">this post</a> or <a href="https://www.andrewheiss.com/research/chapters/heiss-causal-inference-2021/">this chapter</a> if you haven’t heard about those things yet.</p>
<p>DAGs are a powerful tool for causal inference because they let you map out all your assumptions of the data generating process for some treatment and some outcome. Importantly, these causal graphs help you determine what statistical approaches you need to use to isolate or identify the causal arrow between treatment and outcome. One of the more common (and intuitive) methods for idenfifying causal effects with DAGs is to close back doors, or adjust for nodes in a DAG that open up unwanted causal associtions between treatment and control. By properly closing backdoors, you can estimate a causal quantity using observational data. There’s even a special formula called the backdoor adjustment formula that takes an equation with a <code>\(\operatorname{do}(\cdot)\)</code> operator (a <a href="https://stats.stackexchange.com/questions/211008/dox-operator-meaning">special mathematical function</a> representing a direct experimental intervention in a graph) and allows you to estimate the effect with <em>do</em>-free quantities:</p>
<p><code>$$P(y \mid \operatorname{do}(x)) = \sum_z P(y \mid x, z) \times P(z)$$</code></p>
<p>When I teach this stuff, I show that formula on a slide, tell students they don’t need to worry about it too much, and then show how actually do it using regression, inverse probability weighting, and matching (<a href="https://evalf21.classes.andrewheiss.com/example/matching-ipw/">with this guide</a>). For my MPA and MPP students, the math isn’t as important as the actual application of these principles, so that’s what I focus on.</p>
<p>However—confession time—that math is also a bit of a magic black box for me too. I’ve read it in books and assume that it’s correct, but I never really fully understood why.</p>
<p>Compounding my confusion is the fact that the foundation of Judea Pearl-style DAG-based causal inference is the idea of <em>do</em>-calculus (<a href="#ref-Pearl:2012">Pearl 2012</a>): a set of three mathematical rules that can be applied to a causal graph to identify causal relationships. Part of my confusion stems from the fact that most textbooks and courses (including mine!) explain that you can identify causal relationships in DAGs using backdoor adjustment, frontdoor adjustment, or the fancy application of <em>do</em>-calculus rules. When framed like this, it seems like backdoor and frontdoor adjustment are separate things from <em>do</em>-calculus, and that <em>do</em>-calculus is something you do when backdoor and frontdoor adjustments don’t work.</p>
<p>But that’s not the case! In 2020, <a href="https://twitter.com/@andrewheiss">I asked Twitter</a> if backdoor and frontdoor adjustment were connected to <em>do</em>-calculus, and surprisingly <a href="https://twitter.com/yudapearl/status/1252462516468240390">Judea Pearl himself answered</a> that they are!</p>
<p><img src="pearl-tweet.png" width="70%" style="display: block; margin: auto;" /></p>
<p>They’re both specific consequences of the application of the rules of <em>do</em>-calculus—they just have special names because they’re easy to see in a graph.</p>
<p>But how? How do people apply these strange rules of <em>do</em>-calculus to derive these magical backdoor and frontdoor adjustment formulas? The question has haunted me since April 2020.</p>
<p>But in the past couple days, I’ve stumbled across a couple excellent resources (<a href="https://www.bradyneal.com/causal-inference-course">this course</a> and <a href="https://www.youtube.com/playlist?list=PLoazKTcS0Rzb6bb9L508cyJ1z-U9iWkA0">these videos</a> + <a href="https://stephenmalina.com/post/2020-03-09-front-door-do-calc-derivation/">this blog post</a>) that explained <em>do</em>-calculus really well, so I figured I’d finally tackle this question and figure out how exactly <em>do</em>-calculus is used to derive the backdoor adjustment formula. I won’t show the derivation of the frontdoor formula—smarter people than me have done that (<a href="https://stephenmalina.com/post/2020-03-09-front-door-do-calc-derivation/">here</a> and <a href="https://www.bradyneal.com/Introduction_to_Causal_Inference-Dec17_2020-Neal.pdf">Section 6.2.1 here</a>, for instance), but I can do the backdoor one now!</p>
<p>First, I’ll explain and illustrate how each of the three rules of <em>do</em>-calculus as plain-language-y as possible, and then I’ll apply those rules to show how the backdoor adjustment formula is created.</p>
<p>I use the <strong>ggdag</strong> and <strong>dagitty</strong> packages in R for all this, so you can follow along too. Here we go!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">library</span>(tidyverse)  <span style="color:#75715e"># For ggplot2 and friends</span>
<span style="color:#a6e22e">library</span>(patchwork)  <span style="color:#75715e"># For combining plots</span>
<span style="color:#a6e22e">library</span>(ggdag)      <span style="color:#75715e"># For making DAGs with ggplot</span>
<span style="color:#a6e22e">library</span>(dagitty)    <span style="color:#75715e"># For dealing with DAG math</span>
<span style="color:#a6e22e">library</span>(latex2exp)  <span style="color:#75715e"># Easily convert LaTeX into arcane plotmath expressions</span>
<span style="color:#a6e22e">library</span>(ggtext)     <span style="color:#75715e"># Use markdown in ggplot labels</span>

<span style="color:#75715e"># Create a cleaner serifed theme to use throughout</span>
theme_do_calc <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">function</span>() {
  <span style="color:#a6e22e">theme_dag</span>(base_family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Linux Libertine O&#34;</span>) <span style="color:#f92672">+</span>
    <span style="color:#a6e22e">theme</span>(plot.title <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_text</span>(size <span style="color:#f92672">=</span> <span style="color:#a6e22e">rel</span>(<span style="color:#ae81ff">1.5</span>)),
        plot.subtitle <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_markdown</span>())
}

<span style="color:#75715e"># Make all geom_dag_text() layers use these settings automatically</span>
<span style="color:#a6e22e">update_geom_defaults</span>(ggdag<span style="color:#f92672">:::</span>GeomDagText, <span style="color:#a6e22e">list</span>(family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Linux Libertine O&#34;</span>, 
                                               fontface <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bold&#34;</span>,
                                               color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;black&#34;</span>))
</code></pre></div><h2 id="exploring-the-rules-of-do-calculus">Exploring the rules of <em>do</em>-calculus</h2>
<p>The three rules of <em>do</em>-calculus have always been confusing to me since they are typically written as pure math equations and not in plain understandable language. For instance, <a href="https://ftp.cs.ucla.edu/pub/stat_ser/r402.pdf">here’s Judea Pearl’s canonical primer on <em>do</em>-calculus</a>—a short PDF with lots of math and proofs (<a href="#ref-Pearl:2012">Pearl 2012</a>). In basically everything I’ve read about <em>do</em>-calculus, there’s inevitably a listing of these three very mathy rules, written for people much smarter than me:</p>
<p><img src="do-calculus-math.png" width="100%" style="display: block; margin: auto;" /></p>
<p>(<em>From left to right: <a href="#ref-LattimoreRohde:2019">Lattimore and Rohde</a> (<a href="#ref-LattimoreRohde:2019">2019</a>), <a href="https://plato.stanford.edu/entries/causal-models/do-calculus.html">The Stanford Encyclopedia of Philosophy</a>, <a href="#ref-Pearl:2012">Pearl</a> (<a href="#ref-Pearl:2012">2012</a>), <a href="#ref-Neal:2020">Neal</a> (<a href="#ref-Neal:2020">2020</a>)</em>)</p>
<p>However, beneath this scary math, each rule has specific intuition and purpose behind it—I just didn’t understand the plain-language reasons for each rule until reading <a href="https://stephenmalina.com/post/2020-03-09-front-door-do-calc-derivation/">this really neat blog post</a>. Here’s what each rule actually does:</p>
<ul>
<li><strong>Rule 1</strong>: Decide if we can ignore an observation</li>
<li><strong>Rule 2</strong>: Decide if we can treat an intervention as an observation</li>
<li><strong>Rule 3</strong>: Decide if we can ignore an intervention</li>
</ul>
<p>Whoa! That’s exceptionally logical. Each rule is designed to help simplify and reduce nodes in a DAG by either ignoring them (Rules 1 and 3) or making it so interventions like <code>\(\operatorname{do}(\cdot)\)</code> can be treated like observations instead (Rule 2).</p>
<p>Let’s explore each of these rules in detail. In all these situations, we’re assuming that there’s a DAG with 4 nodes: W, X, Y, and Z. Y is always the outcome; X is always the main treatment. In each rule, our goal is to get rid of Z by applying the rule. When talking about interventions in a graph, there’s a special notation with overlines and underlines:</p>
<ul>
<li>An overline like <code>\(G_{\overline{X}}\)</code> means that you delete all the arrows <em>going into</em> X</li>
<li>An underline like <code>\(G_{\underline{X}}\)</code> means that you delete all the arrows <em>coming out of</em> X</li>
</ul>
<p>I imagine this line like a wall:</p>
<ul>
<li>If the wall is on top of X like <code>\(\overline{X}\)</code>, you can’t draw any arrows going into it, so you delete anything going in</li>
<li>If the wall is on the bottom of X like <code>\(\underline{X}\)</code>, you can’t draw any arrows going out of it, so you delete anything going out</li>
</ul>
<h3 id="rule-1-ignoring-observations">Rule 1: Ignoring observations</h3>
<p>According to Rule 1, we can ignore any observational node if it doesn’t influence the outcome through any path, or if it is d-separated from the outcome. Here’s the formal definition:</p>
<p><code>$$P(y \mid z, \operatorname{do}(x), w) = P(y \mid \operatorname{do}(x), w) \qquad \text{ if } (Y \perp Z \mid W, X)_{G_{\overline{X}}}$$</code></p>
<p>There are a lot of moving parts here, but remember, the focus in this equation is <code>\(z\)</code>. Our goal here is to remove or ignore <code>\(z\)</code>. Notice how <code>\(z\)</code> exists on the left-hand side of the equation and how it is gone on the right-hand side. As long as we meet the cryptic conditions of <code>\((Y \perp Z \mid W, X)_{G_{\overline{X}}}\)</code>, we can get rid of it. But what the heck does that even mean?</p>
<p>Here, <code>\(G_{\overline{X}}\)</code> means “the original causal graph with all arrows into X removed,” while the <code>\(Y \perp Z \mid W, X\)</code> part means “Y is independent of Z, given W and X” in the new modified graph. If the Y and Z nodes are d-separated from each other after we account for both W and X, we can get rid of Z and ignore it.</p>
<p>Let’s look at this graphically to help make better sense of this. We’ll use the <code>dagify()</code> function from <strong>ggdag</strong> to build a couple DAGs: one complete one ($G$) and one with all the arrows into X deleted ($G_{\overline{X}}$). X causes both X and Y, while W confounds X, Y, and Z.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">rule1_g <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">dagify</span>(
  Y <span style="color:#f92672">~</span> X <span style="color:#f92672">+</span> W,
  X <span style="color:#f92672">~</span> W,
  Z <span style="color:#f92672">~</span> X <span style="color:#f92672">+</span> W,
  coords <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(x <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(X <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, Y <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, Z <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.25</span>, W <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.5</span>),
                y <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(X <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, Y <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, Z <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, W <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>))
)

rule1_g_x_over <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">dagify</span>(
  Y <span style="color:#f92672">~</span> X <span style="color:#f92672">+</span> W,
  Z <span style="color:#f92672">~</span> X <span style="color:#f92672">+</span> W,
  coords <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(x <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(X <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, Y <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, Z <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.25</span>, W <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.5</span>),
                y <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(X <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, Y <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, Z <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, W <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>))
) 
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">plot_rule1_g <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(rule1_g, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> y, 
                                    xend <span style="color:#f92672">=</span> xend, yend <span style="color:#f92672">=</span> yend)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_edges</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_point</span>(color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;grey80&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_text</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(title <span style="color:#f92672">=</span> <span style="color:#a6e22e">TeX</span>(<span style="color:#e6db74">&#34;$G$&#34;</span>),
       subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Original DAG&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_do_calc</span>()

plot_rule1_g_x_over <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(rule1_g_x_over, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> y, 
                                                  xend <span style="color:#f92672">=</span> xend, yend <span style="color:#f92672">=</span> yend)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_edges</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_point</span>(color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;grey80&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_text</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(title <span style="color:#f92672">=</span> <span style="color:#a6e22e">TeX</span>(<span style="color:#e6db74">&#34;$G_\\bar{x}$&#34;</span>),
       subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;DAG with arrows *into* X deleted&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_do_calc</span>()

plot_rule1_g <span style="color:#f92672">|</span> plot_rule1_g_x_over
</code></pre></div><p><img src="https://www.shagunjhaver.com/blog/2021/09/07/do-calculus-backdoors/index_files/figure-html/plot-rule1-1.png" width="100%" style="display: block; margin: auto;" /></p>
<p>If we want to calculate the causal effect of X on Y, do we need to worry about Z here, or can we ignore it? Let’s apply Rule 1. If we look at the modified <code>\(G_{\overline{X}}\)</code>, Y and Z are completely d-separated if we account for both W and X—there’s no direct arrow between them, and there’s no active path connecting them through W or X, since we’re accounting for (or condition on) those nodes. Y and Z are thus d-separated and <code>\(Y \perp Z \mid W, X\)</code>. We can confirm this with the <code>impliedConditionalIndependencies()</code> function from the <strong>dagitty</strong> package:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">impliedConditionalIndependencies</span>(rule1_g_x_over)
<span style="color:#75715e">## W _||_ X</span>
<span style="color:#75715e">## Y _||_ Z | W, X</span>
</code></pre></div><p>And there it is! The second independency there is <code>\(Y \perp Z \mid W, X\)</code>. That means that we can apply Rule 1 and ignore Z, meaning that</p>
<p><code>$$P(y \mid z, \operatorname{do}(x), w) = P(y \mid \operatorname{do}(x), w)$$</code></p>
<p>This makes sense but is a little too complicated for me, since we’re working with four different nodes. We can simplify this and pretend that <code>\(\operatorname{do}(x)\)</code> is nothing and that X doesn’t exist. That leaves us with just three nodes—W, Y, and Z—and this DAG:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">rule1_g_simple <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">dagify</span>(
  Y <span style="color:#f92672">~</span> W,
  Z <span style="color:#f92672">~</span> W,
  coords <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(x <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(Y <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, Z <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, W <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.5</span>),
                y <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(Y <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, Z <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, W <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>))
)

plot_rule1_g_simple <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(rule1_g_simple, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> y, 
                                                  xend <span style="color:#f92672">=</span> xend, yend <span style="color:#f92672">=</span> yend)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_edges</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_point</span>(color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;grey80&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_text</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(title <span style="color:#f92672">=</span> <span style="color:#a6e22e">TeX</span>(<span style="color:#e6db74">&#34;$G$&#34;</span>),
       subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Simplified DAG without X&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_do_calc</span>()
plot_rule1_g_simple
</code></pre></div><p><img src="https://www.shagunjhaver.com/blog/2021/09/07/do-calculus-backdoors/index_files/figure-html/plot-rule1-simple-1.png" width="50%" style="display: block; margin: auto;" /></p>
<p>The simplified X-free version of Rule 1 looks like this:</p>
<p><code>$$P(y \mid z, w) = P(y \mid w) \qquad \text{ if } (Y \perp Z \mid W)_{G}$$</code></p>
<p>In other words, we can ignore Z and remove it from the <code>\(P(y \mid z, w)\)</code> equation if Y and Z are d-separated (or independent of each other) after accounting for W. Once we account for W, there’s no possible connection between Y and Z, so they really are d-separated. We can again confirm this with code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">impliedConditionalIndependencies</span>(rule1_g_simple)
<span style="color:#75715e">## Y _||_ Z | W</span>
</code></pre></div><p>There we go. Because <code>\(Y \perp Z \mid W\)</code> we can safely ignore Z.</p>
<h3 id="rule-2-treating-interventions-as-observations">Rule 2: Treating interventions as observations</h3>
<p>Rule 1 is neat, but it has nothing to do with causal interventions or the <code>\(\operatorname{do}(\cdot)\)</code> operator. It feels more like a housekeeping rule—it’s a way of simplifying and removing unnecessary nodes that don’t have to do with the main treatment → outcome relationship.</p>
<p>With Rule 2, we start messing with interventions. In an experiment like a randomized controlled trial, a researcher has the ability to assign treatment and either <code>\(\operatorname{do}(x)\)</code> or not <code>\(\operatorname{do}(x)\)</code>. With observational data, though, it’s not possible to <code>\(\operatorname{do}(x)\)</code> directly. It would be fantastic if we could take an intervention like <code>\(\operatorname{do}(x)\)</code> and treat it like regular non-interventional observational data. Rule 2 lets us do this.</p>
<p>According to Rule 2, interventions (or <code>\(do(x)\)</code>) can be treated as observations (or <code>\(x\)</code>) when the causal effect of a variable on the outcome ($X \rightarrow Y$) only influences the outcome through directed paths. The official math for this is this complicated thing:</p>
<p><code>$$P(y \mid \operatorname{do}(z), \operatorname{do}(x), w) = P(y \mid z, \operatorname{do}(x), w) \qquad \text{ if } (Y \perp Z \mid W, X)_{G_{\overline{X}, \underline{Z}}}$$</code></p>
<p>For me, this is super confusing, since there are two different <code>\(\operatorname{do}(\cdot)\)</code> operators here and when I think of causal graphs, I think of single interventions. Like we did with Rule 1, we can simplify this and pretend that there’s no intervention <code>\(\operatorname{do}(x)\)</code> (we’ll do the full rule in a minute, don’t worry). Again, this is legal because each of these rules are focused on messing with the Z variable: ignoring it or treating it as an observation. That leaves us with this slightly simpler (though still cryptic) equation:</p>
<p><code>$$P(y \mid \operatorname{do}(z), w) = P(y \mid z, w) \qquad \text{ if } (Y \perp Z \mid W)_{G_{\underline{Z}}}$$</code></p>
<p>Notice how the left-hand side has the interventional <code>\(\operatorname{do}(z)\)</code>, while the right-hand side has the observed <code>\(z\)</code>. As long as we meet the condition <code>\((Y \perp Z \mid W)_{G_{\underline{Z}}}\)</code>, we can transform <code>\(\operatorname{do}(z)\)</code> into <code>\(z\)</code> and work only with observational data. Once again, though, what does this <code>\((Y \perp Z \mid W)_{G_{\underline{Z}}}\)</code> condition even mean?</p>
<p>Here, <code>\(G_{\underline{Z}}\)</code> means “the original causal graph with all arrows out of Z removed,” while the <code>\(Y \perp Z \mid W\)</code> part means “Y is independent of Z, given W” in the new modified graph. Similar to Rule 1, if the Y and Z nodes are d-separated from each other after we account for W, we can legally treat <code>\(\operatorname{do}(z)\)</code> like <code>\(z\)</code>.</p>
<p>As we did with Rule 1, we’ll build a couple basic DAGs: a complete one ($G$) and one with all the arrows <em>out of</em> Z deleted ($G_{\underline{Z}}$).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">rule2_g_simple <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">dagify</span>(
  Y <span style="color:#f92672">~</span> Z <span style="color:#f92672">+</span> W,
  Z <span style="color:#f92672">~</span> W,
  coords <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(x <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(Y <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, Z <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, W <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.5</span>),
                y <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(Y <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, Z <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, W <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>))
)

rule2_g_simple_z_under <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">dagify</span>(
  Y <span style="color:#f92672">~</span> W,
  Z <span style="color:#f92672">~</span> W,
  coords <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(x <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(Y <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, Z <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, W <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.5</span>),
                y <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(Y <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, Z <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, W <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>))
) 
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">plot_rule2_g_simple <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(rule2_g_simple, 
                              <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> y, 
                                  xend <span style="color:#f92672">=</span> xend, yend <span style="color:#f92672">=</span> yend)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_edges</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_point</span>(color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;grey80&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_text</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(title <span style="color:#f92672">=</span> <span style="color:#a6e22e">TeX</span>(<span style="color:#e6db74">&#34;$G$&#34;</span>),
       subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Original DAG&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_do_calc</span>()

plot_rule2_g_simple_z_under <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(rule2_g_simple_z_under, 
                                      <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> y, 
                                          xend <span style="color:#f92672">=</span> xend, yend <span style="color:#f92672">=</span> yend)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_edges</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_point</span>(color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;grey80&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_text</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(title <span style="color:#f92672">=</span> <span style="color:#a6e22e">TeX</span>(<span style="color:#e6db74">&#34;$G_\\underline{Z}$&#34;</span>),
       subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;DAG with arrows *out of* Z deleted&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_do_calc</span>()

plot_rule2_g_simple <span style="color:#f92672">|</span> plot_rule2_g_simple_z_under
</code></pre></div><p><img src="https://www.shagunjhaver.com/blog/2021/09/07/do-calculus-backdoors/index_files/figure-html/plot-rule2-simple-1.png" width="100%" style="display: block; margin: auto;" /></p>
<p>So, can we treat Z here like an observational node instead of a interventional <code>\(\operatorname{do}(\cdot)\)</code> node? Let’s apply Rule 2. If we look at the modified <code>\(G_{\underline{Z}}\)</code> graph, Z and Y are completely d-separated if we account for W—there’s no direct arrow between them, and there’s no active path connecting them through W since we’re conditioning on W. We can thus say that <code>\(Y \perp Z \mid W\)</code>. We can confirm this with code too:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">impliedConditionalIndependencies</span>(rule2_g_simple_z_under)
<span style="color:#75715e">## Y _||_ Z | W</span>
</code></pre></div><p>Woohoo! Because <code>\(Y \perp Z \mid W\)</code> in that modified <code>\(G_{\underline{Z}}\)</code> graph, we can legally convert the interventional <code>\(\operatorname{do}(z)\)</code> to just a regular old observational <code>\(z\)</code>:</p>
<p><code>$$P(y \mid \operatorname{do}(z), w) = P(y \mid z, w)$$</code></p>
<p>So far we’ve applied Rule 2 to a simplified DAG with three nodes, but what does it look like if we’re using the full four-node graph that is used in the formal definition of Rule 2?</p>
<p><code>$$P(y \mid \operatorname{do}(z), \operatorname{do}(x), w) = P(y \mid z, \operatorname{do}(x), w) \qquad \text{ if } (Y \perp Z \mid W, X)_{G_{\overline{X}, \underline{Z}}}$$</code></p>
<p>Here’s one graphical representation of a graph with the four nodes W, X, Y, and Z (but it’s definitely not the only possible graph! These <em>do</em>-calculus rules don’t assume any specific relationships between the nodes). Here, Y is caused by both X and Z, and we’ll pretend that they’re both interventions (so <code>\(\operatorname{do}(x)\)</code> and <code>\(\operatorname{do}(z)\)</code>). X is causally linked to Z, and W confounds all three: X, Y, and Z. Graph <code>\(G\)</code> shows the complete DAG; Graph <code>\(G_{\overline{X}, \underline{Z}}\)</code> shows a modified DAG with all arrows <em>into</em> X deleted ($\overline{X}$) and all arrows <em>out of</em> Z deleted ($\underline{Z}$).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">rule2_g <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">dagify</span>(
  Y <span style="color:#f92672">~</span> X <span style="color:#f92672">+</span> W <span style="color:#f92672">+</span> Z,
  X <span style="color:#f92672">~</span> W,
  Z <span style="color:#f92672">~</span> X <span style="color:#f92672">+</span> W,
  coords <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(x <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(X <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, Y <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, Z <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.25</span>, W <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.5</span>),
                y <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(X <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, Y <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, Z <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, W <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>))
)

rule2_g_modified <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">dagify</span>(
  Y <span style="color:#f92672">~</span> X <span style="color:#f92672">+</span> W,
  Z <span style="color:#f92672">~</span> X <span style="color:#f92672">+</span> W,
  coords <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(x <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(X <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, Y <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, Z <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.25</span>, W <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.5</span>),
                y <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(X <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, Y <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, Z <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, W <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>))
) 
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">plot_rule2_g <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(rule2_g, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> y, 
                                    xend <span style="color:#f92672">=</span> xend, yend <span style="color:#f92672">=</span> yend)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_edges</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_point</span>(color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;grey80&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_text</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(title <span style="color:#f92672">=</span> <span style="color:#a6e22e">TeX</span>(<span style="color:#e6db74">&#34;$G$&#34;</span>),
       subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Original DAG&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_do_calc</span>()

plot_rule2_modified <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(rule2_g_modified, 
                              <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> y, 
                                  xend <span style="color:#f92672">=</span> xend, yend <span style="color:#f92672">=</span> yend)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_edges</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_point</span>(color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;grey80&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_text</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(title <span style="color:#f92672">=</span> <span style="color:#a6e22e">TeX</span>(<span style="color:#e6db74">&#34;$G_{\\bar{X}, \\underline{Z}}$&#34;</span>),
       subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;DAG with arrows *into* X and *out of* Z deleted&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_do_calc</span>()

plot_rule2_g <span style="color:#f92672">|</span> plot_rule2_modified
</code></pre></div><p><img src="https://www.shagunjhaver.com/blog/2021/09/07/do-calculus-backdoors/index_files/figure-html/plot-rule2-1.png" width="100%" style="display: block; margin: auto;" /></p>
<p>Okay. Our goal here is to check if we can treat <code>\(\operatorname{do}(z)\)</code> like a regular observational <code>\(z\)</code>. We can legally do this if Y and Z are d-separated in that modified graph, after accounting for both W and X, or <code>\(Y \perp Z \mid W, X\)</code>. And that is indeed the case! There’s no direct arrow connecting Y and Z in the modified graph, and once we condition on (or account for) W and X, no pathways between Y and Z are active—Y and Z are independent and d-separated. We can confirm this with code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">impliedConditionalIndependencies</span>(rule2_g_modified)
<span style="color:#75715e">## W _||_ X</span>
<span style="color:#75715e">## Y _||_ Z | W, X</span>
</code></pre></div><p>The second independency there is that <code>\(Y \perp Z \mid W, X\)</code>, which is exactly what we want to see. We can thus legally transform <code>\(\operatorname{do}(z)\)</code> to <code>\(z\)</code>:</p>
<p><code>$$P(y \mid \operatorname{do}(z), \operatorname{do}(x), w) = P(y \mid z, \operatorname{do}(x), w)$$</code></p>
<p>What’s really neat is that Rule 2 is a generalized version of the backdoor criterion. More on that below after we explore Rule 3.</p>
<h3 id="rule-3-ignoring-interventions">Rule 3: Ignoring interventions</h3>
<p>Rule 3 is the trickiest of the three, conceptually. It tells us when we can completely remove a <code>\(\operatorname{do}(\cdot)\)</code> expression rather than converting it to an observed quantity. Here it is in all its mathy glory:</p>
<p><code>$$P(y \mid \operatorname{do}(z), \operatorname{do}(x), w) = P(y \mid \operatorname{do}(x), w) \qquad \text{ if } (Y \perp Z \mid W, X)_{G_{\overline{X}, \overline{Z(W)}}}$$</code></p>
<p>In simpler language, this means that we can ignore an intervention (or a <code>\(\operatorname{do}(\cdot)\)</code> expression) if it doesn’t influence the outcome through any uncontrolled path—we can remove <code>\(\operatorname{do}(z)\)</code> if there is no causal association (or no unblocked causal paths) flowing from Z to Y.</p>
<p>This rule is tricky, though, because it depends on where the Z node (i.e. the intervention we want to get rid of) appears in the graph. Note the notation for the modified graph here. With the other rules, we used things like <code>\(G_{\overline{X}}\)</code> or <code>\(G_{\underline{Z}}\)</code> to remove arrows into and out of specific nodes in the modified graph. Here, though, we have the strange <code>\(G_{\overline{Z(W)}}\)</code>. This Z(W) is weird! It means “any Z node that isn’t an ancestor of W.” We thus only delete arrows going into a Z node in the modified graph if that Z node doesn’t precede W.</p>
<p>Here’s one version of what that could look like graphically:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">rule3_g <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">dagify</span>(
  Y <span style="color:#f92672">~</span> X <span style="color:#f92672">+</span> W,
  W <span style="color:#f92672">~</span> Z,
  Z <span style="color:#f92672">~</span> X,
  coords <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(x <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(X <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, Y <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, Z <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.25</span>, W <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.5</span>),
                y <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(X <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, Y <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, Z <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, W <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.75</span>))
)
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">plot_rule3_g <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(rule3_g, 
                       <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> y, 
                           xend <span style="color:#f92672">=</span> xend, yend <span style="color:#f92672">=</span> yend)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_edges</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_point</span>(color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;grey80&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_text</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(title <span style="color:#f92672">=</span> <span style="color:#a6e22e">TeX</span>(<span style="color:#e6db74">&#34;$G$&#34;</span>),
       subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Original DAG&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_do_calc</span>()

plot_rule3_g_modified <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(rule3_g, 
                                <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> y, 
                                    xend <span style="color:#f92672">=</span> xend, yend <span style="color:#f92672">=</span> yend)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_edges</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_point</span>(color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;grey80&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_text</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(title <span style="color:#f92672">=</span> <span style="color:#a6e22e">TeX</span>(<span style="color:#e6db74">&#34;$G_{\\bar{X}, \\bar{Z(W)}}$&#34;</span>),
       subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;DAG with arrows *into* Z deleted as long as Z isn&#39;t an&lt;br&gt;ancestor of W + all arrows *into* X deleted&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_do_calc</span>()

plot_rule3_g <span style="color:#f92672">|</span> plot_rule3_g_modified
</code></pre></div><p><img src="https://www.shagunjhaver.com/blog/2021/09/07/do-calculus-backdoors/index_files/figure-html/plot-rule3-1.png" width="100%" style="display: block; margin: auto;" /></p>
<p>Notice how these two graphs are identical. Because we only delete arrows going into Z if Z is not an ancestor of W, in this case <code>\(G = G_{\overline{X}, \overline{Z(W)}}\)</code>.</p>
<p>Remember that our original goal is to get rid of <code>\(\operatorname{do}(z)\)</code>, which we can legally do if Y and Z are d-separated and independent in our modified graph, or if <code>\(Y \perp Z \mid W, X\)</code>. That is once again indeed the case here: there’s no direct arrow between Y and Z, and if we condition on W and X, there’s no way to pass association between Y and Z, meaning that Y and Z are d-separated. Let’s confirm it with code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">impliedConditionalIndependencies</span>(rule3_g)
<span style="color:#75715e">## W _||_ X | Z</span>
<span style="color:#75715e">## Y _||_ Z | W, X</span>
</code></pre></div><p>That second independency is our <code>\(Y \perp Z \mid W, X\)</code>, so we can safely eliminate <code>\(\operatorname{do}(z)\)</code> from the equation. We can ignore it because it doesn’t influence the outcome <code>\(Y\)</code> through any possible path. Goodbye <code>\(\operatorname{do}(z)\)</code>!:</p>
<p><code>$$P(y \mid \operatorname{do}(z), \operatorname{do}(x), w) = P(y \mid \operatorname{do}(x), w)$$</code></p>
<p>In this case, the alternative graph <code>\(G_{\overline{X}, \overline{Z(W)}}\)</code> was the same as the original graph because of the location of Z—Z was an ancestor of W, so we didn’t delete any arrows. If Z is <em>not</em> an ancestor, though, we get to actually modify the graph. For instance, consider this DAG:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">rule3_g_alt <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">dagify</span>(
  Y <span style="color:#f92672">~</span> X <span style="color:#f92672">+</span> W,
  Z <span style="color:#f92672">~</span> W,
  X <span style="color:#f92672">~</span> Z,
  coords <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(x <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(X <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, Y <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, Z <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.25</span>, W <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.5</span>),
                y <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(X <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, Y <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, Z <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, W <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.75</span>))
)

rule3_g_alt_modified <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">dagify</span>(
  Y <span style="color:#f92672">~</span> X <span style="color:#f92672">+</span> W,
  Z <span style="color:#f92672">~</span> <span style="color:#ae81ff">0</span>,
  X <span style="color:#f92672">~</span> <span style="color:#ae81ff">0</span>,
  coords <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(x <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(X <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, Y <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, Z <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.25</span>, W <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.5</span>),
                y <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(X <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, Y <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, Z <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, W <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.75</span>))
) 
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">plot_rule3_g_alt <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(rule3_g_alt, 
                           <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> y, 
                               xend <span style="color:#f92672">=</span> xend, yend <span style="color:#f92672">=</span> yend)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_edges</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_point</span>(color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;grey80&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_text</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(title <span style="color:#f92672">=</span> <span style="color:#a6e22e">TeX</span>(<span style="color:#e6db74">&#34;$G$&#34;</span>),
       subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Original DAG&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_do_calc</span>()

plot_rule3_g_alt_modified <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(rule3_g_alt_modified, 
                                    <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> y, 
                                        xend <span style="color:#f92672">=</span> xend, yend <span style="color:#f92672">=</span> yend)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_edges</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_point</span>(color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;grey80&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_text</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(title <span style="color:#f92672">=</span> <span style="color:#a6e22e">TeX</span>(<span style="color:#e6db74">&#34;$G_{\\bar{X}, \\bar{Z(W)}}$&#34;</span>),
       subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;DAG with arrows *into* Z deleted as long as Z isn&#39;t an&lt;br&gt;ancestor of W + all arrows *into* X deleted&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_do_calc</span>()

plot_rule3_g_alt <span style="color:#f92672">|</span> plot_rule3_g_alt_modified
<span style="color:#75715e">## Warning: Removed 1 rows containing missing values (geom_dag_point).</span>
<span style="color:#75715e">## Warning: Removed 1 rows containing missing values (geom_dag_text).</span>
</code></pre></div><p><img src="https://www.shagunjhaver.com/blog/2021/09/07/do-calculus-backdoors/index_files/figure-html/plot-rule3-alt-1.png" width="100%" style="display: block; margin: auto;" /></p>
<p>Phew. In this case, our DAG surgery for making the modified graph <code>\(G_{\overline{X}, \overline{Z(W)}}\)</code> actually ended up completely d-separating Z from all nodes. Because Z isn’t an ancestor of W (but is instead a descendant), we get to delete arrows going into it, and we get to delete arrows going into X as well. We can remove <code>\(\operatorname{do}(z)\)</code> from the equation as long as <code>\(Y \perp Z \mid W, X\)</code> in this modified graph. That is most definitely the case here. And once again, code confirms it (ignore the 0s here—they’re only there so that the DAG plots correctly):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">impliedConditionalIndependencies</span>(rule3_g_alt_modified)
<span style="color:#75715e">## 0 _||_ W</span>
<span style="color:#75715e">## 0 _||_ Y | X</span>
<span style="color:#75715e">## W _||_ X</span>
<span style="color:#75715e">## W _||_ Z</span>
<span style="color:#75715e">## X _||_ Z | 0</span>
<span style="color:#75715e">## Y _||_ Z | 0</span>
<span style="color:#75715e">## Y _||_ Z | X</span>
</code></pre></div><p>And once again, we can legally get rid of <code>\(\operatorname{do}(z)\)</code>:</p>
<p><code>$$P(y \mid \operatorname{do}(z), \operatorname{do}(x), w) = P(y \mid \operatorname{do}(x), w)$$</code></p>
<h3 id="summary">Summary</h3>
<p>Phew. Let’s look back at the three main rules and add their corresponding mathy versions, which should make more sense now:</p>
<ul>
<li>
<p><strong>Rule 1</strong>: Decide if we can ignore an observation</p>
<p><code>$$P(y \mid z, \operatorname{do}(x), w) = P(y \mid \operatorname{do}(x), w) \qquad \text{ if } (Y \perp Z \mid W, X)_{G_{\overline{X}}}$$</code></p>
</li>
<li>
<p><strong>Rule 2</strong>: Decide if we can treat an intervention as an observation</p>
<p><code>$$P(y \mid \operatorname{do}(z), \operatorname{do}(x), w) = P(y \mid z, \operatorname{do}(x), w) \qquad \text{ if } (Y \perp Z \mid W, X)_{G_{\overline{X}, \underline{Z}}}$$</code></p>
</li>
<li>
<p><strong>Rule 3</strong>: Decide if we can ignore an intervention</p>
<p><code>$$P(y \mid \operatorname{do}(z), \operatorname{do}(x), w) = P(y \mid \operatorname{do}(x), w) \qquad \text{ if } (Y \perp Z \mid W, X)_{G_{\overline{X}, \overline{Z(W)}}}$$</code></p>
</li>
</ul>
<h2 id="deriving-the-backdoor-adjustment-formula-from-do-calculus-rules">Deriving the backdoor adjustment formula from <em>do</em>-calculus rules</h2>
<p>That was a lot of math, but hopefully each of these <em>do</em>-calculus rules make sense in isolation now. Now that I finally understand what each of these are doing, we can apply these rules to see where the pre-derived / canned backdoor adjustment formula comes from. Somehow by applying these rules, we can transform the left-hand side of this formula into the <em>do</em>-free right-hand side:</p>
<p><code>$$P(y \mid \operatorname{do}(x)) = \sum_z P(y \mid x, z) \times P(z)$$</code></p>
<p>Let’s go through the derivation of the backdoor adjustment formula step-by-step to see how it works. We’ll use this super simple DAG that shows the causal effect of treatment X on outcome Y, confounded by Z:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">backdoor_g <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">dagify</span>(
  Y <span style="color:#f92672">~</span> X <span style="color:#f92672">+</span> Z,
  X <span style="color:#f92672">~</span> Z,
  coords <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(x <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(Y <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, X <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, Z <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.5</span>),
                y <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(Y <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, X <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, Z <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>))
)

plot_backdoor_g <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(backdoor_g, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> y, 
                                          xend <span style="color:#f92672">=</span> xend, yend <span style="color:#f92672">=</span> yend)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_edges</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_point</span>(color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;grey80&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_text</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(title <span style="color:#f92672">=</span> <span style="color:#a6e22e">TeX</span>(<span style="color:#e6db74">&#34;$G$&#34;</span>),
       subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Basic backdoor confounding&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_do_calc</span>()
plot_backdoor_g
</code></pre></div><p><img src="https://www.shagunjhaver.com/blog/2021/09/07/do-calculus-backdoors/index_files/figure-html/basic-backdoor-dag-1.png" width="50%" style="display: block; margin: auto;" /></p>
<h3 id="marginalizing-across-z">Marginalizing across <code>\(z\)</code></h3>
<p>We’re interested in the causal effect of X on Y, or <code>\(P(y \mid \operatorname{do}(x))\)</code>. If this were an experiment like a randomized controlled trial, we’d be able to delete all arrows going into X, which would remove all confounding from Z and allow us to measure the exact causal effect of X on Y. However, with observational data, we can’t delete arrows like that. But, we can condition the X → Y relationship on Z, given that it influences both X and Y.</p>
<p>We thus need to calculate the joint probability of <code>\(P(y \mid \operatorname{do}(x))\)</code> across all values of Z. Using the rules of <a href="https://en.wikipedia.org/wiki/Marginal_distribution">probability marginalization</a> and <a href="https://en.wikipedia.org/wiki/Chain_rule_(probability)">the chain rule for joint probabilities</a>, we can write this joint probability like so:</p>
<p><code>$$P(y \mid \operatorname{do}(x)) = \sum_z P(y \mid \operatorname{do}(x), z) \times P(z \mid \operatorname{do}(x))$$</code></p>
<p>The right-hand side of that equation is what we want to be able to estimate using only observational data, but right now it has two <code>\(\operatorname{do}(\cdot)\)</code> operators in it, marked in <span style="color:#FF4136;">red</span> and <span style="color:#B10DC9;">purple</span>:</p>
<p><code>$$\sum_z P(y \mid {\color{#FF4136} \operatorname{do}(x)}, z) \times P(z \mid {\color{#B10DC9} \operatorname{do}(x)})$$</code></p>
<p>We need to get rid of those.</p>
<h3 id="applying-rule-2">Applying Rule 2</h3>
<p>First let’s get rid of the <span style="color:#FF4136;">red</span> <code>\(\color{#FF4136} \operatorname{do}(x)\)</code> that’s in <code>\(P(y \mid {\color{#FF4136} \operatorname{do}(x)}, z)\)</code>. This chunk of the equation involves all three variables: treatment, outcome, and confounder. Accordingly, we don’t really want to ignore any of these variables by using something like Rule 1 or Rule 3. Instead, we can try to treat that <code>\(\color{#FF4136} \operatorname{do}(x)\)</code> as an observational <code>\(\color{#FF4136} x\)</code> using Rule 2.</p>
<p>According to Rule 2, we can treat an interventional <code>\(\operatorname{do}(\cdot)\)</code> operator as observational if we meet specific criteria in a modified graph where we remove all arrows out of X:</p>
<p><code>$$P(y \mid {\color{#FF4136} \operatorname{do}(x)}, z) = P(y \mid {\color{#FF4136} x}, z) \qquad \text{ if } (Y \perp X \mid Z)_{G_{\underline{X}}}$$</code></p>
<p>Here’s the modified <code>\(G_{\underline{X}}\)</code> graph:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">backdoor_g_underline_x <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">dagify</span>(
  Y <span style="color:#f92672">~</span> Z,
  X <span style="color:#f92672">~</span> Z,
  coords <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(x <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(Y <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, X <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, Z <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.5</span>),
                y <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(Y <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, X <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, Z <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>))
)

plot_backdoor_g_underline_x <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(backdoor_g_underline_x, 
                                      <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> y, 
                                          xend <span style="color:#f92672">=</span> xend, yend <span style="color:#f92672">=</span> yend)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_edges</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_point</span>(color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;grey80&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_text</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(title <span style="color:#f92672">=</span> <span style="color:#a6e22e">TeX</span>(<span style="color:#e6db74">&#34;$G_\\underline{X}$&#34;</span>),
       subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;DAG with arrows *out of* X deleted&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_do_calc</span>()

plot_backdoor_g <span style="color:#f92672">|</span> plot_backdoor_g_underline_x
</code></pre></div><p><img src="https://www.shagunjhaver.com/blog/2021/09/07/do-calculus-backdoors/index_files/figure-html/backdoor-rule2-1.png" width="100%" style="display: block; margin: auto;" /></p>
<p>Following Rule 2, we can treat <code>\(\color{#FF4136} \operatorname{do}(x)\)</code> like a regular observational <code>\(\color{#FF4136} x\)</code> as long as X and Y are d-separated in this modified <code>\(G_{\underline{X}}\)</code> graph when conditioning on Z. And that is indeed the case: there’s no direct arrow between X and Y, and by conditioning on Z, there’s no active pathway between X and Y through Z. Let’s see if code backs us up:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">impliedConditionalIndependencies</span>(backdoor_g_underline_x)
<span style="color:#75715e">## X _||_ Y | Z</span>
</code></pre></div><p>Perfect! Because <code>\(Y \perp X \mid Z\)</code>, we can treat <code>\(\color{#FF4136} \operatorname{do}(x)\)</code> like <code>\(\color{#FF4136} x\)</code>.</p>
<h3 id="applying-rule-3">Applying Rule 3</h3>
<p>After applying Rule 2 to the first chunk of the equation, we’re still left with the <span style="color:#B10DC9;">purple</span> <code>\(\color{#B10DC9} \operatorname{do}(x)\)</code> in the second chunk:</p>
<p><code>$$\sum_z P(y \mid {\color{#FF4136} x}, z) \times P(z \mid {\color{#B10DC9} \operatorname{do}(x)})$$</code></p>
<p>This second chunk doesn’t have the outcome <code>\(y\)</code> in it and instead refers only to the treatment and confounder. Since it’s not connected with the outcome, it would be neat if we could get rid of that <code>\(\color{#B10DC9} \operatorname{do}(x)\)</code> altogether. That’s what Rule 3 is for—ignoring interventions.</p>
<p>According to Rule 3, we can remove a <code>\(\operatorname{do}(\cdot)\)</code> operator as long as it doesn’t influence the outcome through any uncontrolled or unconditioned path in a modified graph. Because we’re dealing with a smaller number of variables here, the math for Rule 3 is a lot simpler:</p>
<p><code>$$P(z \mid {\color{#B10DC9} \operatorname{do}(x)}) = P(y \mid {\color{#B10DC9} \text{nothing!}}) \qquad \text{ if } (X \perp Z)_{G_{\overline{X}}}$$</code></p>
<p>Here’s the simplified <code>\(G_{\overline{X}}\)</code> graph:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">backdoor_g_overline_x <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">dagify</span>(
  Y <span style="color:#f92672">~</span> X <span style="color:#f92672">+</span> Z,
  coords <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(x <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(Y <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, X <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, Z <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.5</span>),
                y <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(Y <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, X <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, Z <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>))
)

plot_backdoor_g_overline_x <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(backdoor_g_overline_x, 
                                     <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> y, 
                                         xend <span style="color:#f92672">=</span> xend, yend <span style="color:#f92672">=</span> yend)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_edges</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_point</span>(color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;grey80&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_text</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(title <span style="color:#f92672">=</span> <span style="color:#a6e22e">TeX</span>(<span style="color:#e6db74">&#34;$G_\\bar{X}$&#34;</span>),
       subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;DAG with arrows *into* X deleted&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_do_calc</span>()

plot_backdoor_g <span style="color:#f92672">|</span> plot_backdoor_g_overline_x
</code></pre></div><p><img src="https://www.shagunjhaver.com/blog/2021/09/07/do-calculus-backdoors/index_files/figure-html/backdoor-rule3-1.png" width="100%" style="display: block; margin: auto;" /></p>
<p>As long as X and Z are d-separated and independent, we can remove that <code>\(\color{#B10DC9} \operatorname{do}(x)\)</code> completely. According to this graph, there’s no direct arrow connecting them, and there’s no active pathway through Y, since Y is a collider in this case and doesn’t pass on causal association. As always, let’s verify with code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">impliedConditionalIndependencies</span>(backdoor_g_overline_x)
<span style="color:#75715e">## X _||_ Z</span>
</code></pre></div><p>Huzzah! <code>\(X \perp Z\)</code>, which means we can nuke the <code>\(\color{#B10DC9} \operatorname{do}(x)\)</code>.</p>
<h3 id="final-equation">Final equation</h3>
<p>After marginalizing across <code>\(z\)</code>, applying Rule 2, and applying Rule 3, we’re left with the following formula for backdoor adjustment:</p>
<p><code>$$P(y \mid \operatorname{do}(x)) = \sum_z P(y \mid x, z) \times P(z)$$</code></p>
<p>That’s exactly the same formula as the general backdoor adjustment formula—we successfully derived it using <em>do</em>-calculus rules!</p>
<p>Most importantly, there are no <code>\(\operatorname{do}(\cdot)\)</code> operators anywhere in this equation, making this estimand completely <em>do</em>-free and estimable using non-interventional observational data! As long as we close the backdoor confounding by adjusting for Z (however you want, like through inverse probability weighting, matching, fancy machine learning stuff, or whatever else—see <a href="https://www.andrewheiss.com/research/chapters/heiss-causal-inference-2021/">this chapter</a>, or <a href="https://www.andrewheiss.com/blog/2020/02/25/closing-backdoors-dags/">this blog post</a>, or <a href="https://evalf21.classes.andrewheiss.com/example/matching-ipw/">this guide</a> for examples of how to do this), we can estimate the causal effect of X on Y (or <code>\(P(y \mid \operatorname{do}(x))\)</code>) with only observational data.</p>
<p>Here’s the derivation all at once:</p>
<p>$$
<code>\begin{aligned} &amp; [\text{Marginalization across } z + \text{chain rule for conditional probabilities}] \\ P(y \mid \operatorname{do}(x)) =&amp; \sum_z P(y \mid {\color{#FF4136} \operatorname{do}(x)}, z) \times P(z \mid {\color{#B10DC9} \operatorname{do}(x)}) \\ &amp; [\text{Use Rule 2 to treat } {\color{#FF4136} \operatorname{do}(x)} \text{ as } {\color{#FF4136} x}] \\ =&amp; \sum_z P(y \mid {\color{#FF4136} x}, z) \times P(z \mid {\color{#B10DC9} \operatorname{do}(x)}) \\ &amp; [\text{Use Rule 3 to nuke } {\color{#B10DC9} \operatorname{do}(x)}] \\ =&amp; \sum_z P(y \mid {\color{#FF4136} x}, z) \times P(z \mid {\color{#B10DC9} \text{nothing!}}) \\ &amp; [\text{Final backdoor adjustment formula!}] \\ =&amp; \sum_z P(y \mid x, z) \times P(z) \end{aligned}</code>
$$</p>
<p>That’s so so cool!</p>
<p>The frontdoor adjustment formula can be derived in a similar process—see <a href="https://stephenmalina.com/post/2020-03-09-front-door-do-calc-derivation/#fn:1">the end of this post for an example</a> (with that, you apply Rules 2 and 3 repeatedly until all the <code>\(\operatorname{do}(\cdot)\)</code> operators disappear)</p>
<p>And in cases where there’s no pre-derived backdoor or frontdoor adjustment formula, you can still apply these three <em>do</em>-calculus rules to attempt to identify the relationship between X and Y. Not all DAGs are fully estimable, but if they are estimable, the rules of <em>do</em>-calculus can be applied to derive the estimate. Fancier tools like <a href="https://causalfusion.net/">Causal Fusion</a> help with this and automate the process.</p>
<h2 id="references">References</h2>
<div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-LattimoreRohde:2019" class="csl-entry">
<p>Lattimore, Finnian, and David Rohde. 2019. “Replacing the Do-Calculus with Bayes Rule,” December. <a href="https://arxiv.org/abs/1906.07125">https://arxiv.org/abs/1906.07125</a>.</p>
</div>
<div id="ref-Neal:2020" class="csl-entry">
<p>Neal, Brady. 2020. <em>Introduction to Causal Inference from a Machine Learning Perspective</em>. <a href="https://www.bradyneal.com/causal-inference-course">https://www.bradyneal.com/causal-inference-course</a>.</p>
</div>
<div id="ref-Pearl:2012" class="csl-entry">
<p>Pearl, Judea. 2012. “The <em>Do</em>-Calculus Revisited.” In <em>Proceedings of the Twenty-Eighth Conference on Uncertainty in Artificial Intelligence</em>, 3–11. UAI’12. Arlington, Virginia: AUAI Press. <a href="https://dl.acm.org/doi/10.5555/3020652.3020654">https://dl.acm.org/doi/10.5555/3020652.3020654</a>.</p>
</div>
</div>
%!s(MISSING)]]></content>
        <category term="r" />
        <category term="tidyverse" />
        <category term="DAGs" />
        <category term="causal inference" />
        <category term="do calculus" />
    </entry>
    <entry>
        <title type="html"><![CDATA[How to automatically convert TikZ images to SVG (with fonts!) from knitr]]></title>
        <link href="https://www.shagunjhaver.com/blog/2021/08/27/tikz-knitr-html-svg-fun/" rel="alternate" />
        <published>2021-08-27T00:00:00+00:00</published>
        <updated>2021-08-27T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2021/08/27/tikz-knitr-html-svg-fun/</id>
        <summary type="html"><![CDATA[Make knitr and R Markdown convert TikZ graphics to font-embedded SVG files when knitting to HTML]]></summary>
        <content type="html"><![CDATA[<link rel="stylesheet" href="gist_stuff.css">
<div class="alert alert-success">An update to knitr has made it a ton easier to embed fonts in SVG files from R. <a href="#update-easier-font-embedding">Jump to the update</a> to see how.</div>
<div class="alert alert-success">Also, it's possible to change TikZ fonts and not use Computer Modern for everything! <a href="#another-update-changing-fonts">Jump to the second update</a> to see how.</div>
<hr>
<p><strong>Contents</strong>:</p>
<ul>
<li><a href="#knitting-tikz-chunks-to-pdf">Knitting TikZ chunks to PDF</a></li>
<li><a href="#knitting-tikz-chunks-to-html-as-pngs">Knitting TikZ chunks to HTML as PNGs</a></li>
<li><a href="#knitting-tikz-chunks-to-html-as-svgs">Knitting TikZ chunks to HTML as SVGs</a>
<ul>
<li><a href="#connecting-dvisvgm-to-ghostscript-on-macos">Connecting <code>dvisvgm</code> to Ghostscript on macOS</a></li>
<li><a href="#connecting-dvisvgm-to-ghostscript-within-r">Connecting <code>dvisvgm</code> to Ghostscript within R</a></li>
<li><a href="#choosing-the-tikz-output-format-based-on-the-knitted-output">Choosing the TikZ output format based on the knitted output</a></li>
<li><a href="#font-issues">Font issues</a></li>
<li><a href="#font-solutions">Font solutions</a></li>
</ul>
</li>
<li><a href="#tldr-final-working-version">tl;dr: Final working version</a></li>
<li><a href="#update-easier-font-embedding">UPDATE: Easier font embedding!</a></li>
<li><a href="#another-update-changing-fonts">ANOTHER UPDATE: Changing fonts!</a>
<ul>
<li><a href="#knitting-only-to-pdf">Knitting only to PDF</a></li>
<li><a href="#knitting-to-pdf-and-html">Knitting to PDF and HTML</a></li>
</ul>
</li>
</ul>
<hr>
<p><strong>knitr</strong> and R Markdown are essential parts of my academic writing workflow, and they make it really easy to write in one file format and then convert it to whatever output I need. When knitting to PDF, plots are all vector-based with selectable text, and math equations are all done in beautiful LaTeX. When knitting to HTML, plots are PNG files (since HTML struggles with cross-browser vector image support), and math equations are all done in beautiful MathJax. It&rsquo;s a wonderful system.</p>
<p>One place where the system struggles, though, is with more complex types of content like TikZ figures. TikZ lets you make all sorts of fancy diagrams and equations, but it&rsquo;s a tricky language and I barely understand it, lol. There are some helpful resources about it, though:</p>
<ul>
<li><a href="https://rmwu.github.io/">Rachel Menghua Wu</a>&rsquo;s crash course to TikZ (<a href="https://rmwu.github.io/tutorial/latex/2019/08/27/intro/">part 1</a> and <a href="https://rmwu.github.io/tutorial/latex/2019/11/21/positioning/">part 2</a>)</li>
<li><a href="https://www.overleaf.com/learn/latex/TikZ_package">Overleaf&rsquo;s guide</a></li>
<li><a href="https://www.overleaf.com/learn/latex/LaTeX_Graphics_using_TikZ:_A_Tutorial_for_Beginners_(Part_1)%E2%80%94Basic_Drawing">Overleaf&rsquo;s tutorial series</a></li>
<li><a href="https://www.mathcha.io/">Mathcha</a> can draw and export diagrams as TikZ, as can <a href="http://dagitty.net/">DAGitty</a></li>
</ul>
<p>Through the magic of <strong>knitr</strong> and R Markdown, it&rsquo;s actually possible to use TikZ chunks directly in an R Markdown document and have them knit to both PDF <em>and</em> vector-based SVG files in HTML. Magic!</p>
<h2 id="knitting-tikz-chunks-to-pdf">Knitting TikZ chunks to PDF</h2>
<p><strong>knitr</strong> has the ability to <a href="https://yihui.org/knitr/demo/engines/">use custom engines for rendering other languages</a>, including TikZ, by including a <code>tikz</code> chunk like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">```{tikz}
\begin{tikzpicture}
% TikZ code here
\end{tikzpicture}
```
</code></pre></div><p>To try this out, make a new blank .Rmd file and put this in it:</p>
<p><em>(Side note: Syntax highlighting R Markdown files is tricky because they involve so many different possible languages (YAML, Markdown, R, Python, tikz, etc.), but GitHub Gists can highlight them just fine. So all these code chunks here are actually embedded Gists. If you have JavaScript enabled, or if GitHub shuts down Gist some day, or if you otherwise can&rsquo;t see them, you can <a href="https://gist.github.com/andrewheiss/55f06b079cb7064f2de5b2c174546fae">see the original gists here</a>), or you can see them in <a href="https://github.com/andrewheiss/ath-hugo/tree/main/content/blog/2021-08-27_tikz-knitr-html-svg-fun">the GitHub repository for this website here</a>)</em></p>
<script src="https://gist.github.com/andrewheiss/55f06b079cb7064f2de5b2c174546fae.js?file=example-1.Rmd"></script>
<p>Knit that to PDF and you&rsquo;ll see a neat little diagram of a <a href="https://cran.r-project.org/web/packages/ggdag/vignettes/intro-to-dags.html">directed acyclic graph</a> (or DAG) (<a href="example-1.pdf">see full PDF here</a>):</p>
<p><img src="example-1.png" width="100%" style="display: block; margin: auto;" /></p>
<h2 id="knitting-tikz-chunks-to-html-as-pngs">Knitting TikZ chunks to HTML as PNGs</h2>
<p>If you knit that document to HTML, you&rsquo;ll also see the same diagram, but it will be a low resolution PNG and will look huge and pixelated. Behind the scenes, <strong>knitr</strong> converts the TikZ chunk to PDF and then converts that PDF to PNG and includes it in the HTML file (<a href="example-1.html">see full HTML file here</a>).</p>
<p><img src="example-1-pixelated.png" width="70%" style="display: block; margin: auto;" /></p>
<p>There&rsquo;s theoretically a way to change the DPI of this PNG file using the <code>engine.opts</code> chunk option and passing additional arguments to ImageMagick, which handles the conversion, but it only causes errors for me (<code>Error in magick_image_format(image, toupper(format), type, colorspace, : Invalid ImageType value: -density 300</code>) and I can&rsquo;t figure out why (see <a href="https://stackoverflow.com/questions/51735831/is-it-possible-to-increase-resolution-of-image-inserted-to-word-document-from-rm">this StackOverflow post too</a>) :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">```{tikz, engine.opts = list(convert.opts = &#39;-density 300&#39;), fig.ext=&#34;png&#34;}
% Stuff here
```
</code></pre></div><h2 id="knitting-tikz-chunks-to-html-as-svgs">Knitting TikZ chunks to HTML as SVGs</h2>
<p>But even if I could get it to work, PNG files aren&rsquo;t great for vector-like things like TikZ diagrams. It would be great if instead I could convert these diagrams to vector-based SVG files.</p>
<p>Fortunately <strong>knitr</strong> handles that too! Try this! (Note the <code>self_contained: no</code> in the YAML metadata—this will create a standalone DVI and SVG file in a folder named <code>&lt;NAME_OF_RMD&gt;_files/html-figures/</code>. You don&rsquo;t technically need this—without it, R will embed the images as base64-encoded text—but to make it easier to see the files R makes, we&rsquo;ll disable it)</p>
<script src="https://gist.github.com/andrewheiss/55f06b079cb7064f2de5b2c174546fae.js?file=example-2.Rmd"></script>
<p>You&rsquo;ll most likely get an error about Ghostscript:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Text" data-lang="Text">processing of PostScript specials is disabled (Ghostscript not found)
</code></pre></div><h3 id="connecting-dvisvgm-to-ghostscript-on-macos">Connecting <code>dvisvgm</code> to Ghostscript on macOS</h3>
<p>Unfortunately it takes a little bit of initial setup to get all the moving pieces working for it to happen. To go from TikZ to SVG, <strong>knitr</strong> first converts the <code>tikz</code> chunk to DVI and then uses the terminal program <code>dvisvgm</code> to convert the DVI to SVG. Getting <code>dvisvgm</code> working on macOS is tricky though (and presumably it&rsquo;s tricky on Windows too, but I don&rsquo;t have a Windows machine to test it on).</p>
<p>The most typical way of installing the LaTeX ecosystem on macOS is to install <a href="https://www.tug.org/mactex/">MacTeX</a>, which comes with all the dozens of special utilities TeX uses for typesetting. MacTeX comes with both <code>dvisvgm</code> and a special program called Ghostscript that handles text in DVI files. HOWEVER, by default it does not provide a way to have <code>dvisvgm</code> and Ghostscript talk to each other (there&rsquo;s <a href="https://tex.stackexchange.com/questions/559640/making-dvisvgm-and-ghostscript-from-mactex-talk-to-each-other">a whole post about it here</a>). Ghostscript really is installed, though—<code>dvisvgm</code> just can&rsquo;t see it.</p>
<p>To fix it, you actually need to reinstall MacTex and choose a custom installation option. When you get to the &ldquo;Installation Type&rdquo; section in the package installation dialog box, click on &ldquo;Customize&rdquo; and then make sure the box is checked for &ldquo;Ghostscript Dynamic Library&rdquo;. By default this is not checked, and I have no clue why, since this is the bridge that you need to get <code>dvisvgm</code> and Ghostscript to talk to each other.</p>
<p><img src="install-mactex.png" width="70%" style="display: block; margin: auto;" /></p>
<p>Install MacTeX with that option enabled and you&rsquo;ll have a special new file nested deep within your filesystem at <code>/usr/local/share/ghostscript/9.53.3/lib/libgs.dylib.9.53</code>. This <code>libgs.dylib.**</code> file is the dynamic library that <code>dvisvgm</code> needs to know about to work. MacTex 2021 installs Ghostscript 9.53.3, so later versions of MacTex will place <code>libgs.dylib</code> somewhere else.</p>
<p>To tell <code>dvisvgm</code> where this dynamic library is, you then need to set an environment variable. Open <code>~/.bash_profile</code> or <code>~/.zshrc</code> or whatever you use for setting your PATH and other terminal settings and add this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">export LIBGS<span style="color:#f92672">=</span>/usr/local/share/ghostscript/9.53.3/lib/libgs.dylib.9.53
</code></pre></div><p>Open a new terminal window and type <code>print $LIBGS</code> to verify that the environment variable was actually set. Now you should be able to run <code>dvisvgm -l</code> and see an entry for <code>ps</code> in it (see <a href="https://dvisvgm.de/FAQ/">this FAQ page</a> for lots of other details and help for troubleshooting this):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ dvisvgm -l
...
ps         dvips PostScript specials
...
</code></pre></div><p>That means everything&rsquo;s working and you should now be able to convert from DVI to SVG!</p>
<h3 id="connecting-dvisvgm-to-ghostscript-within-r">Connecting <code>dvisvgm</code> to Ghostscript within R</h3>
<p>However, RStudio doesn&rsquo;t pick up your shell&rsquo;s environment variables when knitting files, so if you knit the document with <code>fix.ext='svg'</code> enabled, you&rsquo;ll still get an error about Ghostscript not being found.</p>
<p>To get around this, you can actually set environment variables from within the R Markdown document itself. Add <code>Sys.setenv()</code> to an invisible chunk like this:</p>
<script src="https://gist.github.com/andrewheiss/55f06b079cb7064f2de5b2c174546fae.js?file=example-3.Rmd"></script>
<p>And now everything should work! You&rsquo;ll get an HTML file with a vector-based SVG version of the TikZ figure (<a href="example-2.html">see full HTML file here</a>):</p>
<p><img src="example-2.png" width="70%" style="display: block; margin: auto;" /></p>
<h3 id="choosing-the-tikz-output-format-based-on-the-knitted-output">Choosing the TikZ output format based on the knitted output</h3>
<p>We can now knit this TikZ chunk to PDF if we use <code>fig.ext=&quot;pdf&quot;</code> and to SVG if we use <code>fig.ext=&quot;svg&quot;</code> in the chunk options. Remembering to switch these extensions manually, though, is tedious. To make life a little easier, we can create some conditional output types using <strong>knitr</strong>&rsquo;s (newer?) <code>opts-template</code> ability, which lets you create chunk option templates that you can reuse throughout the document. Here, we&rsquo;ll use <code>fig.ext=&quot;pdf&quot;</code> when knitting to PDF, and <code>fig.ext=&quot;svg&quot;</code> otherwise. If I could get the TikZ → PNG conversion working nicely, I&rsquo;d make it use <code>fig.ext=&quot;png&quot;</code> when knitting to Word, too.</p>
<script src="https://gist.github.com/andrewheiss/55f06b079cb7064f2de5b2c174546fae.js?file=example-4.Rmd"></script>
<p>Now if you knit that file ↑ to PDF, it will create a PDF TikZ image; if you knit to HTML, it will create an SVG image through <code>dvisvgm</code>. Magic!</p>
<h3 id="font-issues">Font issues</h3>
<p>You&rsquo;ll notice that we&rsquo;ve only been using text-less TikZ figures as an example so far. TikZ handles text just fine—it processes it through LaTeX and lets you do everything regular LaTeX typesetting does, so you can add fancy equations and Greek letters, etc. to diagrams. Let&rsquo;s add some letters with subscripts:</p>
<script src="https://gist.github.com/andrewheiss/55f06b079cb7064f2de5b2c174546fae.js?file=example-5.Rmd"></script>
<p>When knitting to PDF, this diagram looks great, typeset in Computer Modern like any standard LaTeX document(<a href="example-5.pdf">see full PDF here</a>):</p>
<p><img src="example-5-pdf.png" width="100%" style="display: block; margin: auto;" /></p>
<p>When knitting to HTML, the SVG version of the diagram also works, except for the fonts, since <code>dvisvgm</code> doesn&rsquo;t embed the fonts by default (<a href="example-5.html">see full HTML file here</a>):</p>
<p><img src="example-5.png" width="70%" style="display: block; margin: auto;" /></p>
<p>If you open the SVG file that R generates (find it at <code>&lt;RMD_filename&gt;_files/figure-html/unnamed-chunk-1-1.svg</code>) in something like Illustrator, it will complain about font references that are missing, like <code>cmmi10</code> and <code>cmmi7</code>:</p>
<p><img src="illustrator.png" width="50%" style="display: block; margin: auto;" /></p>
<p>And if you open the SVG file in a text editor you&rsquo;ll notice references to font names, but those assume that you have fonts named &ldquo;cmmi7&rdquo; and &ldquo;cmmi10&rdquo; on your computer, which is doubtful:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml">...
<span style="color:#f92672">&lt;font</span> <span style="color:#a6e22e">id=</span><span style="color:#e6db74">&#39;cmmi7&#39;</span> <span style="color:#a6e22e">horiz-adv-x=</span><span style="color:#e6db74">&#39;0&#39;</span><span style="color:#f92672">&gt;</span>
<span style="color:#f92672">&lt;font-face</span> <span style="color:#a6e22e">font-family=</span><span style="color:#e6db74">&#39;cmmi7&#39;</span> <span style="color:#a6e22e">units-per-em=</span><span style="color:#e6db74">&#39;1000&#39;</span> <span style="color:#a6e22e">ascent=</span><span style="color:#e6db74">&#39;750&#39;</span> <span style="color:#a6e22e">descent=</span><span style="color:#e6db74">&#39;250&#39;</span><span style="color:#f92672">/&gt;</span>
...
</code></pre></div><h3 id="font-solutions">Font solutions</h3>
<p>Fortunately there&rsquo;s a solution! <code>dvisvgm</code> has an optional flag (<code>--font-format=woff</code>) that will embed the special LaTeX fonts using a base64-encoded web-optimized WOFF file, which means the SVG file should show the correct fonts in any modern browser or editor.</p>
<p>However, there&rsquo;s currently not a direct way to use that flag with <strong>knitr</strong>. The command for <code>dvisvgm</code> is hardcoded into <strong>knitr</strong>&rsquo;s code and you can&rsquo;t add any extra arguments (though <a href="https://github.com/yihui/knitr/issues/2038">I&rsquo;ve opened an issue at GitHub</a> about this).</p>
<p>But never fear! There&rsquo;s a neat roundabout way around this!</p>
<p>You can use <a href="https://bookdown.org/yihui/rmarkdown-cookbook/chunk-hooks.html">special chunk hooks</a> in <strong>knitr</strong> to run functions before or after chunks are rendered. We can create a function that runs after a TikZ chunk is rendered that takes the temporary DVI file that <strong>knitr</strong> creates and then runs <code>dvisvgm --font-format=woff</code> on it, thus overwriting the non-embedded SVG file that <strong>knitr</strong> makes with its hardcoded <code>dvisvgm</code> command. Here&rsquo;s one way to do it (which I adapted from <a href="https://github.com/yihui/knitr/blob/3237add034368a3018ff26fa9f4d0ca89a4afd78/R/hooks-extra.R#L74">the built-in <code>hook_png()</code> function</a>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">embed_svg_fonts <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">function</span>(before, options, envir) {
  <span style="color:#75715e"># !before means after the chunk is run</span>
  <span style="color:#a6e22e">if </span>(<span style="color:#f92672">!</span>before) {
    <span style="color:#75715e"># Get a list of all the plot files this chunk makes</span>
    paths <span style="color:#f92672">&lt;-</span> knitr<span style="color:#f92672">:::</span><span style="color:#a6e22e">get_plot_files</span>()

    <span style="color:#75715e"># Loop through all the plot files. When dealing with SVG, knitr actually</span>
    <span style="color:#75715e"># creates two different files: an initial DVI and the converted SVG. We&#39;ll</span>
    <span style="color:#75715e"># use the original DVI and pass it through dvisvgm again, this time with</span>
    <span style="color:#75715e"># --font-format=woff enabled. This will overwrite the SVG that knitr makes</span>
    knitr<span style="color:#f92672">:::</span><span style="color:#a6e22e">in_base_dir</span>(
      <span style="color:#a6e22e">lapply</span>(paths, <span style="color:#a6e22e">function</span>(x) {
        <span style="color:#a6e22e">message</span>(<span style="color:#e6db74">&#34;Embedding fonts in &#34;</span>, x)
        path_svg <span style="color:#f92672">&lt;-</span> xfun<span style="color:#f92672">::</span><span style="color:#a6e22e">with_ext</span>(x, <span style="color:#e6db74">&#34;svg&#34;</span>)
        path_dvi <span style="color:#f92672">&lt;-</span> xfun<span style="color:#f92672">::</span><span style="color:#a6e22e">with_ext</span>(x, <span style="color:#e6db74">&#34;dvi&#34;</span>)
        
        <span style="color:#a6e22e">if </span>(<span style="color:#a6e22e">system2</span>(<span style="color:#e6db74">&#39;dvisvgm&#39;</span>, <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#39;--font-format=woff&#39;</span>, <span style="color:#e6db74">&#39;-o&#39;</span>, <span style="color:#a6e22e">shQuote</span>(path_svg), <span style="color:#a6e22e">shQuote</span>(path_dvi))) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>)
          <span style="color:#a6e22e">stop</span>(<span style="color:#e6db74">&#39;Failed to convert &#39;</span>, path_dvi, <span style="color:#e6db74">&#39; to &#39;</span>, path_svg)
      })
    )
  }
}

<span style="color:#75715e"># Register the function as a possible hook</span>
<span style="color:#75715e"># Use this in a chunk by setting embed_svg_fonts=TRUE in the chunk options</span>
knitr<span style="color:#f92672">::</span>knit_hooks<span style="color:#f92672">$</span><span style="color:#a6e22e">set</span>(embed_svg_fonts <span style="color:#f92672">=</span> embed_svg_fonts)
</code></pre></div><p>Stick that ↑ in an invisible chunk (probably in the same one with <code>Sys.setenv(LIBGS = &quot;blah&quot;)</code>), and then add <code>embed_svg_fonts=TRUE</code> to the chunk options of the TikZ chunk, and it should work. When you knit, you&rsquo;ll see two messages about converting DVI to SVG. We don&rsquo;t care about the first—that&rsquo;s <strong>knitr</strong>&rsquo;s basic version without embedded fonts. The second message corresponds to the command we created with the hook, which includes <code>--font-format=woff</code>.</p>
<p>Here&rsquo;s what the SVG file looks like now with the fonts embedded in it (<a href="dag-text-1.svg">see full SVG file here</a>):</p>
<p><img src="dag-text-1.svg" width="40%" style="display: block; margin: auto;" /></p>
<h2 id="tldr-final-working-version">tl;dr: Final working version</h2>
<p>Here&rsquo;s what your final R Markdown file should look like:</p>
<script src="https://gist.github.com/andrewheiss/55f06b079cb7064f2de5b2c174546fae.js?file=example-final.Rmd"></script>
<p>When knitting to PDF, the TikZ figure will show up as a regular PDF image, as excepted. When knitting to HTML, though, <strong>knitr</strong> will create a DVI version of the image and then convert that to SVG (but without font embedding enabled in <code>dvisvgm</code>). Then finally, because of the post-rendering hook, <strong>knitr</strong> will run the <code>embed_svg_fonts()</code> function on the DVI and create a new SVG with fonts embedded that will overwrite the original SVG file.</p>
<p>Look at that! So great! (<a href="example-final.html">see full HTML file here</a>):</p>
<p><img src="example-final.png" width="70%" style="display: block; margin: auto;" /></p>
<h2 id="update-easier-font-embedding">UPDATE: Easier font embedding!</h2>
<p>I submitted <a href="https://github.com/yihui/knitr/pull/2039">a pull request to <strong>knitr</strong></a> that would allow users to specify additional arguments to <code>dvisvgm</code> from a chunk, and it was just merged in, so with the development version of <strong>knitr</strong> (and someday with the CRAN version, once a new version is eventually submitted), you can use the <code>dvisvgm.opts</code> option in the <code>engine.opts</code> chunk options like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">```{tikz, fig.ext=&#34;svg&#34;, engine.opts=list(dvisvgm.opts = &#34;--font-format=woff&#34;)}
% Stuff here
```
</code></pre></div><p>So now there&rsquo;s no need for the <code>embed_svg_fonts()</code> hook function! This should work now for the complete DAG example:</p>
<script src="https://gist.github.com/andrewheiss/55f06b079cb7064f2de5b2c174546fae.js?file=example-final-new.Rmd"></script>
<h2 id="another-update-changing-fonts">ANOTHER UPDATE: Changing fonts!</h2>
<p>You&rsquo;re not limited to the default (and kinda ugly) Computer Modern font with TikZ chunks, but changing the font is a little tricky becuase each TikZ chunk in <strong>knitr</strong> is treated as a standalone LaTeX document, so you need to adjust the fonts in each chunk.</p>
<h3 id="knitting-only-to-pdf">Knitting only to PDF</h3>
<p>If you&rsquo;re <em>only</em> interested in knitting to PDF, you can use XeTeX to embed any font you want in the diagram. When using XeTeX, you&rsquo;d typically add something like this to the preamble of your document to change the document font:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-latex" data-lang="latex"><span style="color:#66d9ef">\usepackage</span>{fontspec}
<span style="color:#66d9ef">\setmainfont</span>{Comic Sans MS}  <span style="color:#75715e">% ew
</span></code></pre></div><p>Each standalone TikZ knitr chunk gets passed to <a href="https://github.com/yihui/knitr/blob/master/inst/misc/tikz2pdf.tex">a special <code>tikz2pdf.tex</code> template</a>. The content of the chunk is inserted in the <code>%% TIKZ_CODE %%</code> area, and there&rsquo;s a space in the template for preamble things at <code>%% EXTRA_TIKZ_PREAMBLE_CODE %%</code>. To get content inserted there, you can use the <code>extra.preamble</code> option in <code>engine.opts</code> like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">```{tikz, engine.opts=list(extra.preamble=c(&#34;\\usepackage{fontspec}&#34;, &#34;\\setmainfont{Comic Sans MS}&#34;))}
% Stuff here
```
</code></pre></div><p>That won&rsquo;t work right away though. When you knit, <strong>knitr</strong> uses the default <code>pdflatex</code> LaTeX engine to render each TikZ chunk, and you&rsquo;ll get an error because <code>fontspec</code> only works with XeTeX. You can tell <strong>knitr</strong> to use <code>xelatex</code> to render those chunks if you set the <code>tinytex.engine</code> option:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">options</span>(tinytex.engine <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;xelatex&#34;</span>)
</code></pre></div><p>Once you set <code>xelatex</code> as the default LaTeX engine for the document, all TikZ chunks will render correctly. Here&rsquo;s a complete example (note that I moved the <code>extra.preamble</code> stuff to a separate variable so that it&rsquo;s easier to reuse) (<a href="example-xelatex.pdf">see full PDF here</a>):</p>
<script src="https://gist.github.com/andrewheiss/55f06b079cb7064f2de5b2c174546fae.js?file=example-xelatex.Rmd"></script>
<p><img src="example-xelatex.png" width="70%" style="display: block; margin: auto;" /></p>
<h3 id="knitting-to-pdf-and-html">Knitting to PDF and HTML</h3>
<p>This is a little trickier if you want to convert these TikZ chunks to SVG when knitting to HTML. <strong>knitr</strong> ignores the <code>tinytex.engine</code> option when you knit to HTML, so there&rsquo;s no way to tell TikZ chunks to get processed through <code>xelatex</code>. Additionally, <code>xelatex</code> does not produce .dvi files, which <code>dvisvgm</code> uses to convert to SVG. <code>xelatex</code> instead creates its own special .xdv files. In theory, newer versions of <code>dvisvgm</code> should work with XDV files, but <strong>knitr</strong> is hard-coded to pass DVI files to <code>dvisvgm</code>, not XDV files. So even if we could force TikZ chunks to go through <code>xelatex</code>, they wouldn&rsquo;t be converted to SVG. Alas.</p>
<p>But all is not lost! It&rsquo;s possible to change fonts in non-XeTeX documents. Because you&rsquo;re limited to whatever <code>pdflatex</code> can support, you can only use specific font packages instead of whatever font you want. For instance, to use <a href="https://ctan.org/pkg/tex-gyre-pagella">TEX Gyre Pagella</a>, include <code>\usepackage{tgpagella}</code> in your preamble. <a href="https://www.overleaf.com/learn/latex/Font_typefaces">See this</a> for a basic list of possible font packages, or <a href="https://tug.org/FontCatalogue/">this for a pretty complete catalogue</a>.</p>
<p>For instance, here&rsquo;s how to use <a href="https://tug.org/FontCatalogue/linuxlibertine/">Linux Libertine</a> for text and <a href="https://github.com/alerque/libertinus">Libertinus Math</a> for math <em>with</em> embedded SVG fonts when knitting to HTML (<a href="example-svg-libertine.html">see full HTML file here</a>):</p>
<script src="https://gist.github.com/andrewheiss/55f06b079cb7064f2de5b2c174546fae.js?file=example-svg-libertine.Rmd"></script>
<p><img src="example-svg-libertine.png" width="70%" style="display: block; margin: auto;" /></p>
<p>Or with <a href="https://tug.org/FontCatalogue/gfsartemisiaeulermath/">GFS Artemisia with Euler for math</a> (<a href="example-svg-artemisia.html">see full HTML file here</a>):</p>
<script src="https://gist.github.com/andrewheiss/55f06b079cb7064f2de5b2c174546fae.js?file=example-svg-artemisia.Rmd"></script>
<p><img src="example-svg-artemisia.png" width="70%" style="display: block; margin: auto;" /></p>
%!s(MISSING)]]></content>
        <category term="r" />
        <category term="tidyverse" />
        <category term="R Markdown" />
        <category term="tikz" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Exploring Pamela Jakiela's simple TWFE diagnostics with R]]></title>
        <link href="https://www.shagunjhaver.com/blog/2021/08/25/twfe-diagnostics/" rel="alternate" />
        <published>2021-08-25T00:00:00+00:00</published>
        <updated>2021-08-25T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2021/08/25/twfe-diagnostics/</id>
        <summary type="html"><![CDATA[Use R to explore possible biases that come from differential treatment timing in two-way fixed effects (TWFE) regression models]]></summary>
        <content type="html"><![CDATA[<script src="https://www.shagunjhaver.com/blog/2021/08/25/twfe-diagnostics/index_files/kePrint/kePrint.js"></script>
<link href="https://www.shagunjhaver.com/blog/2021/08/25/twfe-diagnostics/index_files/lightable/lightable.css" rel="stylesheet" />
<script src="https://www.shagunjhaver.com/blog/2021/08/25/twfe-diagnostics/index_files/kePrint/kePrint.js"></script>
<link href="https://www.shagunjhaver.com/blog/2021/08/25/twfe-diagnostics/index_files/lightable/lightable.css" rel="stylesheet" />
<h2 id="contents----omit-in-toc---">Contents <!-- omit in toc --></h2>
<ul>
<li><a href="#a-different-way-of-thinking-about-ols-coefficients">A different way of thinking about OLS coefficients</a></li>
<li><a href="#residualized-weights-with-twfe-models">Residualized weights with TWFE models</a>
<ul>
<li><a href="#load-and-clean-data">Load and clean data</a></li>
<li><a href="#model-specification">Model specification</a></li>
<li><a href="#twfe-models-with-r">TWFE models with R</a></li>
<li><a href="#twfe-estimate-with-residualized-treatment-weights">TWFE estimate with residualized treatment weights</a></li>
</ul>
</li>
<li><a href="#jakielas-diagnostics">Jakiela’s diagnostics</a>
<ul>
<li><a href="#31-do-treated-observations-receive-negative-weights">3.1: Do treated observations receive negative weights?</a></li>
<li><a href="#32-testing-the-homogeneity-assumption-directly">3.2: Testing the homogeneity assumption directly</a></li>
</ul>
</li>
<li><a href="#jakielas-robustness-checks">Jakiela’s robustness checks</a>
<ul>
<li><a href="#exclude-later-years">Exclude later years</a></li>
<li><a href="#change-how-many-post-treatment-years-are-kept">Change how many post-treatment years are kept</a></li>
<li><a href="#exclude-individual-countries">Exclude individual countries</a></li>
</ul>
</li>
<li><a href="#tldr-conclusion">tl;dr: Conclusion</a></li>
<li><a href="#references">References</a></li>
</ul>
<hr>
<p>The world of econometrics has been roiled over the past couple years with a bunch of new papers showing how two-way fixed effects (TWFE; situations with nested levels of observations, like country-year, state-month, etc.) estimates of causal effects from difference-in-differences-based natural experiments can be biased when treatment is applied at different times. There are a ton of these papers, like <a href="#ref-de-ChaisemartindHaultfoeuille:2020">de Chaisemartin and d’Haultfoeuille</a> (<a href="#ref-de-ChaisemartindHaultfoeuille:2020">2020</a>), <a href="#ref-Goodman-Bacon:2021">Goodman-Bacon</a> (<a href="#ref-Goodman-Bacon:2021">2021</a>), <a href="#ref-SunAbraham:2020">Sun and Abraham</a> (<a href="#ref-SunAbraham:2020">2020</a>), <a href="#ref-CallawaySantAnna:2020">Callaway and Sant’Anna</a> (<a href="#ref-CallawaySantAnna:2020">2020</a>), and <a href="#ref-BakerLarckerWang:2021">Baker, Larcker, and Wang</a> (<a href="#ref-BakerLarckerWang:2021">2021</a>). And they’re all really technical and scary.</p>
<p>I’ve been peripherally following these discussions on Twitter, since I teach a class on causal inference and include <a href="https://evalf21.classes.andrewheiss.com/example/diff-in-diff/">a couple sessions and assignments on difference-in-differences approaches</a>, and since I do lots of <a href="https://www.andrewheiss.com/research/articles/chaudhry-heiss-ngos-aid/">research with country-year panel data</a> (see <a href="https://www.andrewheiss.com/blog/tags/inverse-probability-weighting/">all my posts on marginal structural models</a> for more on that), but I’ve admittedly been lost in the mathy details of all these papers and I’ve been slightly terrified of trying to work through these papers and figuring out what this differential timing bias actually looks like in real life. I’m not a real economist or econometrician (I just teach microeconomics and econometrics lolz), so this world is still pretty intimidating for me.</p>
<p>But <a href="https://pjakiela.github.io/">Pamela Jakiela</a> recently posted <a href="https://arxiv.org/abs/2103.13229">a working paper called “Simple Diagnostics for Two-Way Fixed Effects”</a> (<a href="#ref-Jakiela:2021">Jakiela 2021</a>) where she presents an easy-to-follow example of all this newfangled TWFE work, so I figured I’d finally officially plunge into this new TWFE world and try to figure out what it all means. Her paper is fantastic—you should read it if you want a quick introduction to the issues of differential timing and TWFE and if you want some easy ways to see how bad these situations might bias causal estimates.</p>
<p>In the spirit of <a href="http://arelbundock.com/">Vincent Arel-Bundock</a>, who publicly codes through more technical papers to understand them better (see <a href="http://arelbundock.com/posts/frontdoor/">this</a> or <a href="http://arelbundock.com/posts/robustness_values/">this</a> or <a href="http://arelbundock.com/posts/marginal_structural_models/">this</a>), this post is my attempt at translating Jakiela’s paper from conceptual math and Stata code into R. Here we go!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">library</span>(tidyverse)     <span style="color:#75715e"># For ggplot2, dplyr, and friends</span>
<span style="color:#a6e22e">library</span>(haven)         <span style="color:#75715e"># For reading Stata files</span>
<span style="color:#a6e22e">library</span>(fixest)        <span style="color:#75715e"># One way of doing fixed effects regression</span>
<span style="color:#a6e22e">library</span>(estimatr)      <span style="color:#75715e"># Another way of doing fixed effects regression</span>
<span style="color:#a6e22e">library</span>(broom)         <span style="color:#75715e"># For converting model objects to data frames</span>
<span style="color:#a6e22e">library</span>(kableExtra)    <span style="color:#75715e"># For pretty tables</span>
<span style="color:#a6e22e">library</span>(modelsummary)  <span style="color:#75715e"># For pretty regression tables</span>
<span style="color:#a6e22e">library</span>(patchwork)     <span style="color:#75715e"># For combining plots</span>
<span style="color:#a6e22e">library</span>(scales)        <span style="color:#75715e"># For nice formatting functions</span>

<span style="color:#75715e"># Custom ggplot theme to make pretty plots</span>
<span style="color:#75715e"># Get the font at https://fonts.google.com/specimen/Barlow+Semi+Condensed</span>
theme_clean <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">function</span>() {
  <span style="color:#a6e22e">theme_minimal</span>(base_family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Barlow Semi Condensed&#34;</span>) <span style="color:#f92672">+</span>
    <span style="color:#a6e22e">theme</span>(panel.grid.minor <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>(),
          plot.title <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_text</span>(face <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bold&#34;</span>),
          axis.title <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_text</span>(family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Barlow Semi Condensed Medium&#34;</span>),
          strip.text <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_text</span>(family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Barlow Semi Condensed&#34;</span>,
                                    face <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bold&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#a6e22e">rel</span>(<span style="color:#ae81ff">1</span>), hjust <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>),
          strip.background <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_rect</span>(fill <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;grey80&#34;</span>, color <span style="color:#f92672">=</span> <span style="color:#66d9ef">NA</span>),
          plot.caption <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_text</span>(hjust <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>))
}
</code></pre></div><h2 id="a-different-way-of-thinking-about-ols-coefficients">A different way of thinking about OLS coefficients</h2>
<p>Before diving into the issues that come with TWFE estimation (and Jakiela’s proposed diagnostics), we first have to think about regression coefficients in a slightly different way (that was completely new to me!)</p>
<p>To do this, let’s make some simulated data to play with. We have two variables: (1) an outcome that ranges from ≈400–2000, and (2) a continuous treatment that ranges from ≈2–70. For the sake of simplicity, we’ll pretend that the outcome represents weekly income, and the treatment is some sort of social policy (test scores from some job training program? idk—imagine something neat here). We’ll also pretend that this treatment is experimental so we can talk about causation here.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">set.seed</span>(<span style="color:#ae81ff">1234</span>)  <span style="color:#75715e"># For reproducibility</span>

n_rows <span style="color:#f92672">&lt;-</span> <span style="color:#ae81ff">500</span>
fake_data <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">tibble</span>(treatment <span style="color:#f92672">=</span> <span style="color:#a6e22e">rbeta</span>(n_rows, shape1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>, shape2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">7</span>)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(treatment <span style="color:#f92672">=</span> <span style="color:#a6e22e">round</span>(treatment <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#75715e"># Build the outcome based on some baseline level of outcome + a boost in</span>
  <span style="color:#75715e"># outcome that happens because of the treatment + some noise</span>
  <span style="color:#a6e22e">mutate</span>(outcome_baseline <span style="color:#f92672">=</span> <span style="color:#a6e22e">rnorm</span>(n_rows, mean <span style="color:#f92672">=</span> <span style="color:#ae81ff">800</span>, sd <span style="color:#f92672">=</span> <span style="color:#ae81ff">200</span>),
         treatment_boost <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">*</span> treatment,
         outcome <span style="color:#f92672">=</span> outcome_baseline <span style="color:#f92672">+</span> treatment_boost <span style="color:#f92672">+</span> <span style="color:#a6e22e">rnorm</span>(n_rows, <span style="color:#ae81ff">200</span>, <span style="color:#ae81ff">100</span>)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">select</span>(outcome, treatment)

<span style="color:#a6e22e">head</span>(fake_data)
<span style="color:#75715e">## # A tibble: 6 × 2</span>
<span style="color:#75715e">##   outcome treatment</span>
<span style="color:#75715e">##     &lt;dbl&gt;     &lt;dbl&gt;</span>
<span style="color:#75715e">## 1    514.        13</span>
<span style="color:#75715e">## 2   1550.        35</span>
<span style="color:#75715e">## 3   1562.        52</span>
<span style="color:#75715e">## 4   1037.         4</span>
<span style="color:#75715e">## 5   1137.        38</span>
<span style="color:#75715e">## 6   1277.        39</span>
</code></pre></div><p>For reference, here’s what the distributions of these variables look like, along with the relationship between treatment and outcome:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">hist_out <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(fake_data, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> outcome)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_histogram</span>(binwidth <span style="color:#f92672">=</span> <span style="color:#ae81ff">100</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;white&#34;</span>,
                 boundary <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, fill <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#FFA615&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_x_continuous</span>(labels <span style="color:#f92672">=</span> <span style="color:#a6e22e">dollar_format</span>()) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Distribution of outcome&#34;</span>,
       x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Outcome&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Count&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">coord_cartesian</span>(ylim <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">80</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_clean</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(panel.grid.major.x <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>())

hist_trt <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(fake_data, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> treatment)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_histogram</span>(binwidth <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;white&#34;</span>,
                 boundary <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, fill <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#A4BD0A&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Distribution of treatment&#34;</span>,
       x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Treatment&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Count&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">coord_cartesian</span>(ylim <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">80</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_clean</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(panel.grid.major.x <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>())

plot_trt_out <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(fake_data, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> treatment, y <span style="color:#f92672">=</span> outcome)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_point</span>(size <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.75</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_smooth</span>(method <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;lm&#34;</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#0599B0&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_y_continuous</span>(labels <span style="color:#f92672">=</span> <span style="color:#a6e22e">dollar_format</span>()) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Effect of treatment on outcome&#34;</span>,
       x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Treatment&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Outcome&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_clean</span>()

(hist_out <span style="color:#f92672">+</span> hist_trt) <span style="color:#f92672">/</span> <span style="color:#a6e22e">plot_spacer</span>() <span style="color:#f92672">/</span> plot_trt_out <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">plot_layout</span>(heights <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0.28</span>, <span style="color:#ae81ff">0.02</span>, <span style="color:#ae81ff">0.7</span>))
</code></pre></div><p><img src="https://www.shagunjhaver.com/blog/2021/08/25/twfe-diagnostics/index_files/figure-html/show-fake-data-1.png" width="75%" style="display: block; margin: auto;" /></p>
<p>We can find the average treatment effect (ATE) of this imaginary program on the outcome using a simple univariate regression model:</p>
<p><code>$$\color{gray}{\overbrace{\color{#FFA615}{Y}}^{\text{Outcome}}_{\underbrace{\color{#FFA615}{i}}_{\text{An individual}}}} \color{black}{=} \color{gray}{\overbrace{\color{black}{\alpha}}^{\text{Intercept}}} \color{black}{+} \color{gray}{\underbrace{\color{#0599B0}{\beta}}_{\text{ATE}}} \color{gray}{\overbrace{\color{#A4BD0A}{D_i}}^{\text{Treatment}}} \color{black}{+} \color{gray}{\overbrace{\color{black}{\epsilon_i}}^{\text{Error}}}$$</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">model_effect <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lm</span>(outcome <span style="color:#f92672">~</span> treatment, data <span style="color:#f92672">=</span> fake_data)
<span style="color:#a6e22e">tidy</span>(model_effect)
<span style="color:#75715e">## # A tibble: 2 × 5</span>
<span style="color:#75715e">##   term        estimate std.error statistic   p.value</span>
<span style="color:#75715e">##   &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 (Intercept)  1001.      22.5        44.6 5.70e-176</span>
<span style="color:#75715e">## 2 treatment       9.69     0.672      14.4 1.26e- 39</span>
</code></pre></div><p>This is just regular old OLS regression. Based on this model, a 1-unit increase in treatment causes a $9.69 increase in the outcome. Lovely.</p>
<p><a href="#ref-Jakiela:2021">Jakiela</a> (<a href="#ref-Jakiela:2021">2021, 4</a>) shows an alternate way of calculating <code>\(\beta\)</code>, though, based on the <a href="https://en.wikipedia.org/wiki/Frisch%E2%80%93Waugh%E2%80%93Lovell_theorem">Frisch-Waugh-Lovell theorem</a>, which is an econometrics idea that I’ve never heard of (since I’m defs not an economist). According to this theorem, we can rewrite the OLS estimate of <code>\(\beta\)</code> based on the residuals ($\tilde{D}_i$) of a model that predicts treatment:</p>
<p><code>$$\color{#0599B0}{\beta}\ \color{black}{=}\ \sum_i \color{#FFA615}{Y_i} \color{black}\left( \frac{\color{#353D03}{\tilde{D}_i}}{\sum_i \color{#353D03}{\tilde{D}_i}^2} \right)$$</code></p>
<p>Since this is a univariate model, the residuals here are really just the deviations from the average value of the treatment, or <code>\(D_i - \bar{D}\)</code>. We can confirm this by running an intercept-only model and comparing it to <code>\(D_i - \bar{D}\)</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">trt_resid <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lm</span>(treatment <span style="color:#f92672">~</span> <span style="color:#ae81ff">1</span>, data <span style="color:#f92672">=</span> fake_data)

fake_data_resid <span style="color:#f92672">&lt;-</span> fake_data <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(treatment_resid <span style="color:#f92672">=</span> <span style="color:#a6e22e">residuals</span>(trt_resid)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(mean_treat <span style="color:#f92672">=</span> <span style="color:#a6e22e">mean</span>(treatment),
         diff <span style="color:#f92672">=</span> treatment <span style="color:#f92672">-</span> mean_treat)

<span style="color:#a6e22e">head</span>(fake_data_resid)
<span style="color:#75715e">## # A tibble: 6 × 5</span>
<span style="color:#75715e">##   outcome treatment treatment_resid mean_treat   diff</span>
<span style="color:#75715e">##     &lt;dbl&gt;     &lt;dbl&gt;           &lt;dbl&gt;      &lt;dbl&gt;  &lt;dbl&gt;</span>
<span style="color:#75715e">## 1    514.        13          -17.2        30.2 -17.2 </span>
<span style="color:#75715e">## 2   1550.        35            4.82       30.2   4.82</span>
<span style="color:#75715e">## 3   1562.        52           21.8        30.2  21.8 </span>
<span style="color:#75715e">## 4   1037.         4          -26.2        30.2 -26.2 </span>
<span style="color:#75715e">## 5   1137.        38            7.82       30.2   7.82</span>
<span style="color:#75715e">## 6   1277.        39            8.82       30.2   8.82</span>
</code></pre></div><p>The <code>treatment_resid</code> and <code>diff</code> columns here are identical. Now that we have <code>\(\tilde{D}_i\)</code>, we can use that fancy rewritten formula and calculate <code>\(\beta\)</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">fake_data_resid <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">summarize</span>(beta <span style="color:#f92672">=</span> <span style="color:#a6e22e">sum</span>(outcome <span style="color:#f92672">*</span> (treatment_resid <span style="color:#f92672">/</span> <span style="color:#a6e22e">sum</span>(treatment_resid^2))))
<span style="color:#75715e">## # A tibble: 1 × 1</span>
<span style="color:#75715e">##    beta</span>
<span style="color:#75715e">##   &lt;dbl&gt;</span>
<span style="color:#75715e">## 1  9.69</span>
</code></pre></div><p>WHAAAAAT it’s the same ATE that we get from running a regular OLS model! That’s magical!</p>
<p>The reason Jakiela reparameterizes <code>\(\beta\)</code> this way is because looking at residuals like this creates inherent weights for each observation. Essentially, <code>\(\beta\)</code> is a <strong>weighted sum of the outcome variable</strong>, with the weights calculated with <code>\(\frac{\tilde{D}_{it}}{\sum_{it} \tilde{D}_{it}^2}\)</code>, or <code>(treatment_resid / sum(treatment_resid^2))</code>. We can calculate the weights for each observation:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">fake_data_with_weights <span style="color:#f92672">&lt;-</span> fake_data_resid <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(treatment_weight <span style="color:#f92672">=</span> treatment_resid <span style="color:#f92672">/</span> <span style="color:#a6e22e">sum</span>(treatment_resid^2))
<span style="color:#a6e22e">head</span>(fake_data_with_weights)
<span style="color:#75715e">## # A tibble: 6 × 6</span>
<span style="color:#75715e">##   outcome treatment treatment_resid mean_treat   diff treatment_weight</span>
<span style="color:#75715e">##     &lt;dbl&gt;     &lt;dbl&gt;           &lt;dbl&gt;      &lt;dbl&gt;  &lt;dbl&gt;            &lt;dbl&gt;</span>
<span style="color:#75715e">## 1    514.        13          -17.2        30.2 -17.2        -0.000168 </span>
<span style="color:#75715e">## 2   1550.        35            4.82       30.2   4.82        0.0000471</span>
<span style="color:#75715e">## 3   1562.        52           21.8        30.2  21.8         0.000213 </span>
<span style="color:#75715e">## 4   1037.         4          -26.2        30.2 -26.2        -0.000255 </span>
<span style="color:#75715e">## 5   1137.        38            7.82       30.2   7.82        0.0000764</span>
<span style="color:#75715e">## 6   1277.        39            8.82       30.2   8.82        0.0000861</span>
</code></pre></div><p>In this case, given that this is overly perfect simulated data, the weights are really small. In theory, the weights should sum up to 0. Let’s check that really quick:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">fake_data_with_weights <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">summarize</span>(total_weights <span style="color:#f92672">=</span> <span style="color:#a6e22e">sum</span>(treatment_weight))
<span style="color:#75715e">## # A tibble: 1 × 1</span>
<span style="color:#75715e">##   total_weights</span>
<span style="color:#75715e">##           &lt;dbl&gt;</span>
<span style="color:#75715e">## 1     -1.28e-18</span>
</code></pre></div><p>We can visualize the distribution of weights too:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">ggplot</span>(fake_data_with_weights, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> treatment_weight)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_histogram</span>(binwidth <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.00005</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;white&#34;</span>,
                 boundary <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, fill <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#F6C848&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_vline</span>(xintercept <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#FF2E00&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Residualized treatment weight&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Count&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_x_continuous</span>(labels <span style="color:#f92672">=</span> <span style="color:#a6e22e">comma_format</span>()) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_clean</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(panel.grid.major.x <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>())
</code></pre></div><p><img src="https://www.shagunjhaver.com/blog/2021/08/25/twfe-diagnostics/index_files/figure-html/show-weights-fake-data-1.png" width="75%" style="display: block; margin: auto;" /></p>
<p>There’s a pattern to which observations get positive or negative weights. According to <a href="#ref-Jakiela:2021">Jakiela</a> (<a href="#ref-Jakiela:2021">2021, 4</a>),</p>
<blockquote>
<p>As in any univariate OLS regression of an outcome on a continuous measure of treatment intensity, observations with below mean treatment intensity receive negative weight, and may be thought of as part of the comparison group.</p>
</blockquote>
<p>Since treatment here is continuous, there’s no clear division between treatment and control groups, so mathematically, that threshold becomes the average value of treatment: observations where the treatment value is less than the average (or <code>\(D_i &lt; \bar{D}\)</code>) receive negative weight and can conceptually be considered part of the control/comparison group, while observations where <code>\(D_i &gt; \bar{D}\)</code> are in the treatment group. That’s apparent in the data too. Look at the first few rows of <code>fake_data_with_weights</code> above—observations where <code>treatment_resid</code> is negative have negative weights.</p>
<h2 id="residualized-weights-with-twfe-models">Residualized weights with TWFE models</h2>
<p>This idea of weighting the outcome variable by treatment status (with treated units getting positive weight and untreated units getting negative weight) is central to the rest of Jakiela’s argument and diagnostics (as well as all the other neat new diff-in-diff papers). Fundamentally, the main reason TWFE estimates get weird and biased with differently-timed treatments is because of issues with weights—in TWFE settings, treated observations often get negative weights and vice versa. This isn’t always bad, and Jakiela explains why and when it’s okay. That’s essentially the whole point of her paper—she provides diagnostics to help determine if there are serious issues with these residualized treatment weights.</p>
<h3 id="load-and-clean-data">Load and clean data</h3>
<p>To demonstrate issues with TWFE models, weights, and differential timing, Jakiela looks at the effect of eliminating primary school fees on school enrollment in 15 African countries, based on data from the World Bank. You can get <a href="https://pjakiela.github.io/TWFE/">her data and Stata code at GitHub</a>. First let’s load the data and clean it up a little.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">fpe_raw <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">read_dta</span>(<span style="color:#e6db74">&#34;WDI-FPE-data.dta&#34;</span>)

<span style="color:#75715e"># Remove rows where primary school enrollment is missing</span>
fpe_primary <span style="color:#f92672">&lt;-</span> fpe_raw <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">filter</span>(<span style="color:#f92672">!</span><span style="color:#a6e22e">is.na</span>(primary))

<span style="color:#75715e"># Remove rows where secondary school enrollment is missing</span>
fpe_secondary <span style="color:#f92672">&lt;-</span> fpe_raw <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">filter</span>(<span style="color:#f92672">!</span><span style="color:#a6e22e">is.na</span>(secondary))

<span style="color:#a6e22e">head</span>(fpe_primary)
<span style="color:#75715e">## # A tibble: 6 × 8</span>
<span style="color:#75715e">##    year country ccode primary    id secondary fpe_year treatment</span>
<span style="color:#75715e">##   &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;</span>
<span style="color:#75715e">## 1  1981 Benin   BEN      60.3     2      15.5     2006         0</span>
<span style="color:#75715e">## 2  1982 Benin   BEN      64.7     2      18.5     2006         0</span>
<span style="color:#75715e">## 3  1983 Benin   BEN      66.2     2      21.2     2006         0</span>
<span style="color:#75715e">## 4  1984 Benin   BEN      64.2     2      20.1     2006         0</span>
<span style="color:#75715e">## 5  1985 Benin   BEN      64.3     2      19.0     2006         0</span>
<span style="color:#75715e">## 6  1986 Benin   BEN      62.4     2      16.3     2006         0</span>
</code></pre></div><p>We have 8 columns to work with:</p>
<ul>
<li><code>year</code>: The year of the observation</li>
<li><code>country</code> &amp; <code>ccode</code> &amp; <code>id</code>: The country name, ISO3 country code, and id number for each country (Stata apparently struggles with string-based variables, so <code>id</code> works better as a country identifier there)</li>
<li><code>primary</code>: Gross enrollment in primary schools</li>
<li><code>secondary</code>: Gross enrollment in secondary schools</li>
<li><code>fpe_year</code>: Year the country eliminated fees for primary schools</li>
<li><code>treatment</code>: Indicator variable that is <code>1</code> when <code>year &gt; fpe_year</code> and <code>0</code> otherwise</li>
</ul>
<h3 id="model-specification">Model specification</h3>
<p>We can estimate the causal effect of eliminating primary school fees (<code>treatment</code>) on primary and secondary school enrollment (<code>primary</code> and <code>secondary</code>) treatment with a TWFE diff-in-diff model:</p>
<p><code>$$\color{gray}{\overbrace{\color{#FFA615}{Y}}^{\text{Outcome}}_{\underbrace{\color{#FFA615}{it}}_{\substack{i: \text{ country} \\ t: \text{ year}}}}} \color{black} = \color{gray}{\overbrace{\color{black}{\alpha}}^{\text{Intercept}}} + \color{gray}{\overbrace{\color{black}{\lambda_i}}^{\substack{\text{Country} \\ \text{fixed} \\ \text{effects}}}} + \color{gray}{\overbrace{\color{black}{\gamma_t}}^{\substack{\text{Year} \\ \text{fixed} \\ \text{effects}}}} + \color{gray}{\underbrace{\color{#0599B0}{\beta}}_{\text{ATE}}} \color{gray}{\overbrace{\color{#A4BD0A}{D_{it}}}^{\text{Treatment}}} + \color{gray}{\overbrace{\color{black}{\epsilon_{it}}}^{\text{Error}}}$$</code></p>
<p>Or without all the annotations:</p>
<p><code>$$\color{#FFA615}{Y_{it}} \color{black}{\ = \alpha + \lambda_i + \gamma_t +} \color{#0599B0}{\beta} \color{#A4BD0A}{D_{it}} \color{black}{\ + \epsilon_{it}}$$</code></p>
<h3 id="twfe-models-with-r">TWFE models with R</h3>
<p>There are a few different ways to do fixed effects regression with clustered robust standard errors in R. In Stata you do this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">reg primary treatment i.year i.id, cluster(id)
</code></pre></div><p>In R, you can use the standard <code>lm()</code> function, but it treats country and year as regular explanatory variables, so it includes them in the results from <code>summary()</code> or <code>tidy()</code>. If you don’t want overly long and detailed results tables, you have to filter those results out.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">model_lm <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lm</span>(primary <span style="color:#f92672">~</span> treatment <span style="color:#f92672">+</span> country <span style="color:#f92672">+</span> <span style="color:#a6e22e">factor</span>(year),
               data <span style="color:#f92672">=</span> fpe_primary)

<span style="color:#a6e22e">tidy</span>(model_lm) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">filter</span>(<span style="color:#f92672">!</span><span style="color:#a6e22e">str_detect</span>(term, <span style="color:#e6db74">&#34;country&#34;</span>), <span style="color:#f92672">!</span><span style="color:#a6e22e">str_detect</span>(term, <span style="color:#e6db74">&#34;year&#34;</span>))
<span style="color:#75715e">## # A tibble: 2 × 5</span>
<span style="color:#75715e">##   term        estimate std.error statistic  p.value</span>
<span style="color:#75715e">##   &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 (Intercept)     72.4      4.63     15.6  4.23e-44</span>
<span style="color:#75715e">## 2 treatment       20.4      2.75      7.43 5.82e-13</span>
<span style="color:#a6e22e">glance</span>(model_lm)
<span style="color:#75715e">## # A tibble: 1 × 12</span>
<span style="color:#75715e">##   r.squared adj.r.squared sigma statistic   p.value    df logLik   AIC   BIC deviance</span>
<span style="color:#75715e">##       &lt;dbl&gt;         &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;</span>
<span style="color:#75715e">## 1     0.768         0.742  14.7      29.8 1.30e-110    49 -1985. 4073. 4287.   94828.</span>
<span style="color:#75715e">## # … with 2 more variables: df.residual &lt;int&gt;, nobs &lt;int&gt;</span>
</code></pre></div><p>These observations are clustered by country, so we should probably <a href="https://theeffectbook.net/ch-StatisticalAdjustment.html#your-standard-errors-are-probably-wrong">cluster our standard errors to capture within-country errors</a>. Using <code>lm()</code> doesn’t let you automatically create robust or clustered standard errors. You can use <code>lmtest::coeftest()</code> to do that after the fact, though. We can copy Stata’s standard errors precisely if we (1) specify the variance-covariance matrix using the <code>vcovCl()</code> function from the <strong>sandwich</strong> library, and (2) specify the degrees of freedom to use, based on the number of countries in the data, minus 1.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">df_primary <span style="color:#f92672">&lt;-</span> fpe_primary <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">distinct</span>(country) <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">nrow</span>()

model_lm_clustered <span style="color:#f92672">&lt;-</span> lmtest<span style="color:#f92672">::</span><span style="color:#a6e22e">coeftest</span>(model_lm,
                                       vcov <span style="color:#f92672">=</span> sandwich<span style="color:#f92672">::</span>vcovCL,
                                       cluster <span style="color:#f92672">=</span> <span style="color:#f92672">~</span>country,
                                       df <span style="color:#f92672">=</span> df_primary <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>,
                                       <span style="color:#75715e"># Keep original model so modelsummary shows R2</span>
                                       save <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>)

<span style="color:#a6e22e">tidy</span>(model_lm_clustered) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">filter</span>(<span style="color:#f92672">!</span><span style="color:#a6e22e">str_detect</span>(term, <span style="color:#e6db74">&#34;country&#34;</span>), <span style="color:#f92672">!</span><span style="color:#a6e22e">str_detect</span>(term, <span style="color:#e6db74">&#34;year&#34;</span>))
<span style="color:#75715e">## # A tibble: 2 × 5</span>
<span style="color:#75715e">##   term        estimate std.error statistic       p.value</span>
<span style="color:#75715e">##   &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;         &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 (Intercept)     72.4      5.83     12.4  0.00000000601</span>
<span style="color:#75715e">## 2 treatment       20.4      9.12      2.24 0.0418</span>
</code></pre></div><p>You can also use fancier regression functions that can handle fixed effects more systematically. The <code>lm_robust()</code> function from <a href="https://declaredesign.org/r/estimatr/">the <strong>estimatr</strong> package</a> works really well for defining special fixed effects that are automatically omitted from results tables <em>and</em> returning robust and optionally clustered standard errors:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">model_lm_robust <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lm_robust</span>(primary <span style="color:#f92672">~</span> treatment,
                             fixed_effects <span style="color:#f92672">=</span> <span style="color:#f92672">~</span> country <span style="color:#f92672">+</span> year,
                             data <span style="color:#f92672">=</span> fpe_primary,
                             clusters <span style="color:#f92672">=</span> country, se_type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;stata&#34;</span>)

<span style="color:#a6e22e">tidy</span>(model_lm_robust)
<span style="color:#75715e">##        term estimate std.error statistic p.value conf.low conf.high df outcome</span>
<span style="color:#75715e">## 1 treatment     20.4      9.12      2.24  0.0418    0.867        40 14 primary</span>
<span style="color:#a6e22e">glance</span>(model_lm_robust)
<span style="color:#75715e">##   r.squared adj.r.squared statistic p.value df.residual nobs se_type</span>
<span style="color:#75715e">## 1     0.768         0.742        NA      NA          14  490   stata</span>
</code></pre></div><p>The <code>feols()</code> function from <a href="https://lrberge.github.io/fixest/">the <strong>fixest</strong> package</a> also works well, though you need to change one of the default settings to get the same SEs as Stata when you have a small sample with nested fixed effects like we have here. By default, <code>feols()</code> will nest the fixed effect errors (which is also what <a href="http://scorreia.com/software/reghdfe/">Stata’s <code>reghdfe</code> package</a> does), but you can tell it to use the full set of country and year fixed effect errors with the <code>dof</code> argument (thanks to <a href="https://grantmcdermott.com/">Grant McDermott</a> for pointing this out!):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">model_feols <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">feols</span>(primary <span style="color:#f92672">~</span> treatment <span style="color:#f92672">|</span> country <span style="color:#f92672">+</span> year,
                     data <span style="color:#f92672">=</span> fpe_primary,
                     cluster <span style="color:#f92672">=</span> <span style="color:#f92672">~</span> country,
                     dof <span style="color:#f92672">=</span> <span style="color:#a6e22e">dof</span>(fixef.K <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;full&#34;</span>))
<span style="color:#a6e22e">tidy</span>(model_feols)
<span style="color:#75715e">## # A tibble: 1 × 5</span>
<span style="color:#75715e">##   term      estimate std.error statistic p.value</span>
<span style="color:#75715e">##   &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 treatment     20.4      9.12      2.24  0.0418</span>
<span style="color:#a6e22e">glance</span>(model_feols)
<span style="color:#75715e">## # A tibble: 1 × 9</span>
<span style="color:#75715e">##   r.squared adj.r.squared within.r.squared pseudo.r.squared sigma  nobs   AIC   BIC logLik</span>
<span style="color:#75715e">##       &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;            &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;</span>
<span style="color:#75715e">## 1     0.768         0.742            0.111               NA  14.7   490 4071. 4280. -1985.</span>
</code></pre></div><p>We can show these all in a side-by-side table using <a href="https://vincentarelbundock.github.io/modelsummary/">the <strong>modelsummary</strong> package</a>. Conveniently, <code>modelsummary()</code> also lets you <a href="https://grantmcdermott.com/better-way-adjust-SEs/">adjust standard errors on the fly</a> with the <code>vcov</code> argument, so we could theoretically handle all the clustering here instead of inside <code>lmtest::coeftest()</code>, <code>lm_robust()</code>, or <code>feols()</code>. But since we already specified the clusters above, we’ll just use those.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Look at secondary schools too</span>
model_lm_sec <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lm</span>(secondary <span style="color:#f92672">~</span> treatment <span style="color:#f92672">+</span> country <span style="color:#f92672">+</span> <span style="color:#a6e22e">factor</span>(year),
                   data <span style="color:#f92672">=</span> fpe_secondary)

df_secondary <span style="color:#f92672">&lt;-</span> fpe_secondary <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">distinct</span>(country) <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">nrow</span>()

model_lm_clustered_sec <span style="color:#f92672">&lt;-</span> lmtest<span style="color:#f92672">::</span><span style="color:#a6e22e">coeftest</span>(model_lm_sec,
                                           vcov <span style="color:#f92672">=</span> sandwich<span style="color:#f92672">::</span>vcovCL,
                                           cluster <span style="color:#f92672">=</span> <span style="color:#f92672">~</span>country,
                                           df <span style="color:#f92672">=</span> df_secondary <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>,
                                           save <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>)

model_lm_robust_sec <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lm_robust</span>(secondary <span style="color:#f92672">~</span> treatment,
                                 fixed_effects <span style="color:#f92672">=</span> <span style="color:#f92672">~</span> country <span style="color:#f92672">+</span> year,
                                 data <span style="color:#f92672">=</span> fpe_secondary,
                                 clusters <span style="color:#f92672">=</span> country, se_type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;stata&#34;</span>)

model_feols_sec <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">feols</span>(secondary <span style="color:#f92672">~</span> treatment <span style="color:#f92672">|</span> country <span style="color:#f92672">+</span> year,
                         data <span style="color:#f92672">=</span> fpe_secondary,
                         cluster <span style="color:#f92672">=</span> <span style="color:#f92672">~</span> country,
                         dof <span style="color:#f92672">=</span> <span style="color:#a6e22e">dof</span>(fixef.K <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;full&#34;</span>))

<span style="color:#75715e"># Define the goodness-of-fit stats to include</span>
gof_stuff <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">tribble</span>(
  <span style="color:#f92672">~</span>raw, <span style="color:#f92672">~</span>clean, <span style="color:#f92672">~</span>fmt,
  <span style="color:#e6db74">&#34;nobs&#34;</span>, <span style="color:#e6db74">&#34;N&#34;</span>, <span style="color:#ae81ff">0</span>,
  <span style="color:#e6db74">&#34;r.squared&#34;</span>, <span style="color:#e6db74">&#34;R²&#34;</span>, <span style="color:#ae81ff">3</span>
)

<span style="color:#75715e"># Define extra rows at the end of the table</span>
extra_rows <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">tribble</span>(
  <span style="color:#f92672">~</span>term, <span style="color:#f92672">~</span>a, <span style="color:#f92672">~</span>b, <span style="color:#f92672">~</span>c, <span style="color:#f92672">~</span>d, <span style="color:#f92672">~</span>e, <span style="color:#f92672">~</span>f,
  <span style="color:#e6db74">&#34;Country fixed effects&#34;</span>, <span style="color:#e6db74">&#34;•&#34;</span>, <span style="color:#e6db74">&#34;•&#34;</span>, <span style="color:#e6db74">&#34;•&#34;</span>, <span style="color:#e6db74">&#34;•&#34;</span>, <span style="color:#e6db74">&#34;•&#34;</span>, <span style="color:#e6db74">&#34;•&#34;</span>,
  <span style="color:#e6db74">&#34;Year fixed effects&#34;</span>, <span style="color:#e6db74">&#34;•&#34;</span>, <span style="color:#e6db74">&#34;•&#34;</span>, <span style="color:#e6db74">&#34;•&#34;</span>, <span style="color:#e6db74">&#34;•&#34;</span>, <span style="color:#e6db74">&#34;•&#34;</span>, <span style="color:#e6db74">&#34;•&#34;</span>
)

<span style="color:#a6e22e">modelsummary</span>(<span style="color:#a6e22e">list</span>(<span style="color:#e6db74">&#34;&lt;code&gt;lm()&lt;/code&gt;&#34;</span> <span style="color:#f92672">=</span> model_lm_clustered,
                  <span style="color:#e6db74">&#34;&lt;code&gt;lm_robust()&lt;/code&gt;&#34;</span> <span style="color:#f92672">=</span> model_lm_robust,
                  <span style="color:#e6db74">&#34;&lt;code&gt;feols()&lt;/code&gt;&#34;</span> <span style="color:#f92672">=</span> model_feols,
                  <span style="color:#e6db74">&#34;&lt;code&gt;lm()&lt;/code&gt;&#34;</span> <span style="color:#f92672">=</span> model_lm_clustered_sec,
                  <span style="color:#e6db74">&#34;&lt;code&gt;lm_robust()&lt;/code&gt;&#34;</span> <span style="color:#f92672">=</span> model_lm_robust_sec,
                  <span style="color:#e6db74">&#34;&lt;code&gt;feols()&lt;/code&gt;&#34;</span> <span style="color:#f92672">=</span> model_feols_sec),
             coef_rename <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;treatment&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Treatment&#34;</span>),
             estimate <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;{estimate}&#34;</span>,
             statistic <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;s.e. = {std.error}&#34;</span>, <span style="color:#e6db74">&#34;p = {p.value}&#34;</span>),
             coef_omit <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;^country|^factor|Intercept&#34;</span>,
             gof_map <span style="color:#f92672">=</span> gof_stuff,
             add_rows <span style="color:#f92672">=</span> extra_rows,
             table.attr <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;style=&#39;font-size:80%;&#39;&#34;</span>, escape <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>, output <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;kableExtra&#34;</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">add_header_above</span>(<span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34; &#34;</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;Primary enrollment&#34;</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>, <span style="color:#e6db74">&#34;Secondary enrollment&#34;</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">kable_styling</span>(htmltable_class <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;pure-table&#34;</span>)
</code></pre></div><table style="font-size:80%; width: auto !important; margin-left: auto; margin-right: auto; margin-left: auto; margin-right: auto;" class="table pure-table">
<thead>
<tr>
<th style="empty-cells: hide;border-bottom:hidden;" colspan="1">
</th>
<th style="border-bottom:hidden;padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; " colspan="3">
<div style="border-bottom: 1px solid #ddd; padding-bottom: 5px; ">
<p>Primary enrollment</p>
</div>
</th>
<th style="border-bottom:hidden;padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; " colspan="3">
<div style="border-bottom: 1px solid #ddd; padding-bottom: 5px; ">
<p>Secondary enrollment</p>
</div>
</th>
</tr>
<tr>
<th style="text-align:left;">
</th>
<th style="text-align:center;">
<code>lm()</code>
</th>
<th style="text-align:center;">
<code>lm\_robust()</code>
</th>
<th style="text-align:center;">
<code>feols()</code>
</th>
<th style="text-align:center;">
<code>lm()</code>
</th>
<th style="text-align:center;">
<code>lm\_robust()</code>
</th>
<th style="text-align:center;">
<code>feols()</code>
</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">
Treatment
</td>
<td style="text-align:center;">
20.428
</td>
<td style="text-align:center;">
20.428
</td>
<td style="text-align:center;">
20.428
</td>
<td style="text-align:center;">
−0.468
</td>
<td style="text-align:center;">
−0.468
</td>
<td style="text-align:center;">
−0.468
</td>
</tr>
<tr>
<td style="text-align:left;">
</td>
<td style="text-align:center;">
s.e. = 9.120
</td>
<td style="text-align:center;">
s.e. = 9.120
</td>
<td style="text-align:center;">
s.e. = 9.120
</td>
<td style="text-align:center;">
s.e. = 3.081
</td>
<td style="text-align:center;">
s.e. = 3.081
</td>
<td style="text-align:center;">
s.e. = 3.081
</td>
</tr>
<tr>
<td style="text-align:left;box-shadow: 0px 1px">
</td>
<td style="text-align:center;box-shadow: 0px 1px">
p = 0.042
</td>
<td style="text-align:center;box-shadow: 0px 1px">
p = 0.042
</td>
<td style="text-align:center;box-shadow: 0px 1px">
p = 0.042
</td>
<td style="text-align:center;box-shadow: 0px 1px">
p = 0.881
</td>
<td style="text-align:center;box-shadow: 0px 1px">
p = 0.881
</td>
<td style="text-align:center;box-shadow: 0px 1px">
p = 0.881
</td>
</tr>
<tr>
<td style="text-align:left;">
N
</td>
<td style="text-align:center;">
490
</td>
<td style="text-align:center;">
490
</td>
<td style="text-align:center;">
490
</td>
<td style="text-align:center;">
369
</td>
<td style="text-align:center;">
369
</td>
<td style="text-align:center;">
369
</td>
</tr>
<tr>
<td style="text-align:left;">
R²
</td>
<td style="text-align:center;">
0.768
</td>
<td style="text-align:center;">
0.768
</td>
<td style="text-align:center;">
0.768
</td>
<td style="text-align:center;">
0.942
</td>
<td style="text-align:center;">
0.942
</td>
<td style="text-align:center;">
0.942
</td>
</tr>
<tr>
<td style="text-align:left;">
Country fixed effects
</td>
<td style="text-align:center;">
•
</td>
<td style="text-align:center;">
•
</td>
<td style="text-align:center;">
•
</td>
<td style="text-align:center;">
•
</td>
<td style="text-align:center;">
•
</td>
<td style="text-align:center;">
•
</td>
</tr>
<tr>
<td style="text-align:left;">
Year fixed effects
</td>
<td style="text-align:center;">
•
</td>
<td style="text-align:center;">
•
</td>
<td style="text-align:center;">
•
</td>
<td style="text-align:center;">
•
</td>
<td style="text-align:center;">
•
</td>
<td style="text-align:center;">
•
</td>
</tr>
</tbody>
</table>
<p>All these models show the same result: <strong>eliminating primary school fees caused primary school enrollment to increase by 20.4 percentage points.</strong> That’s astounding! Removing these fees doesn’t have any effect on secondary enrollment though.</p>
<h3 id="twfe-estimate-with-residualized-treatment-weights">TWFE estimate with residualized treatment weights</h3>
<p>These regressions are simple enough to run with <code>lm()</code> or <code>lm_robust()</code>, but there’s an issue with differential timing here. These 15 countries each passed laws eliminating fees in different years:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">plot_fpe_start <span style="color:#f92672">&lt;-</span> fpe_raw <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">filter</span>(year <span style="color:#f92672">==</span> fpe_year) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">arrange</span>(fpe_year, country) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(country <span style="color:#f92672">=</span> <span style="color:#a6e22e">fct_inorder</span>(country))

<span style="color:#a6e22e">ggplot</span>(plot_fpe_start, <span style="color:#a6e22e">aes</span>(y <span style="color:#f92672">=</span> <span style="color:#a6e22e">fct_rev</span>(country))) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_segment</span>(<span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> fpe_year, xend <span style="color:#f92672">=</span> <span style="color:#ae81ff">2015</span>, yend <span style="color:#f92672">=</span> country),
               size <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#D6EB52&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_text</span>(<span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> fpe_year <span style="color:#f92672">+</span> <span style="color:#ae81ff">0.2</span>), label <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;▶&#34;</span>, family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Arial Unicode MS&#34;</span>,
            size <span style="color:#f92672">=</span> <span style="color:#ae81ff">8</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#A4BD0A&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Year free primary education implemented&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_clean</span>()
</code></pre></div><p><img src="https://www.shagunjhaver.com/blog/2021/08/25/twfe-diagnostics/index_files/figure-html/show-fpe-start-1.png" width="75%" style="display: block; margin: auto;" /></p>
<p>This timing could cause problems. To see these issues, let’s calculate the ATE ($\beta$) with that fancy schmancy Frisch-Waugh-Lovell theorem with residualized treatment weights. There’s one key difference here when calculating the residuals though. With the simple model earlier, the treatment residuals were just <code>\(D_i - \bar{D}\)</code>, or the residuals from <code>lm(treatment ~ 1)</code>. In TWFE situations, though, treatment residuals need to account for both country and year fixed effects, or <code>lm(treatment ~ country + year)</code>:</p>
<p><code>$$\color{#0599B0}{\beta^{\text{TWFE}}} \color{black}{= \sum_{it}} \color{#FFA615}{Y_{it}} \color{black} \left( \frac{\color{#353D03}{\tilde{D}_{it}}}{\sum_{it} \color{#353D03}{\tilde{D}_{it}}^2} \right)$$</code></p>
<p>Or, with code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">trt_resid_primary <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lm</span>(treatment <span style="color:#f92672">~</span> country <span style="color:#f92672">+</span> <span style="color:#a6e22e">factor</span>(year), data <span style="color:#f92672">=</span> fpe_primary)
trt_resid_secondary <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lm</span>(treatment <span style="color:#f92672">~</span> country <span style="color:#f92672">+</span> <span style="color:#a6e22e">factor</span>(year), data <span style="color:#f92672">=</span> fpe_secondary)

fpe_primary_weights <span style="color:#f92672">&lt;-</span> fpe_primary <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(treatment_resid <span style="color:#f92672">=</span> <span style="color:#a6e22e">residuals</span>(trt_resid_primary)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(treatment_weight <span style="color:#f92672">=</span> treatment_resid <span style="color:#f92672">/</span> <span style="color:#a6e22e">sum</span>(treatment_resid^2))

fpe_secondary_weights <span style="color:#f92672">&lt;-</span> fpe_secondary <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(treatment_resid <span style="color:#f92672">=</span> <span style="color:#a6e22e">residuals</span>(trt_resid_secondary)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(treatment_weight <span style="color:#f92672">=</span> treatment_resid <span style="color:#f92672">/</span> <span style="color:#a6e22e">sum</span>(treatment_resid^2))

fpe_primary_weights <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">summarize</span>(twfe_beta_primary <span style="color:#f92672">=</span> <span style="color:#a6e22e">sum</span>(primary <span style="color:#f92672">*</span> treatment_weight))
<span style="color:#75715e">## # A tibble: 1 × 1</span>
<span style="color:#75715e">##   twfe_beta_primary</span>
<span style="color:#75715e">##               &lt;dbl&gt;</span>
<span style="color:#75715e">## 1              20.4</span>

fpe_secondary_weights <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">summarize</span>(twfe_beta_secondary <span style="color:#f92672">=</span> <span style="color:#a6e22e">sum</span>(secondary <span style="color:#f92672">*</span> treatment_weight))
<span style="color:#75715e">## # A tibble: 1 × 1</span>
<span style="color:#75715e">##   twfe_beta_secondary</span>
<span style="color:#75715e">##                 &lt;dbl&gt;</span>
<span style="color:#75715e">## 1              -0.468</span>
</code></pre></div><p>Whoa! It still works this way. This still blows my mind every time.</p>
<h2 id="jakielas-diagnostics">Jakiela’s diagnostics</h2>
<p>However, because of the differential treatment timing, there are some issues with weighting. Remember from the simple example with fake data that observations in the treatment group typically have positive treatment weights, while those in the comparison/control group have negative weights. With TWFE, some observations’ weights switch directions. There are systematic reasons for this. According to <a href="#ref-Jakiela:2021">Jakiela</a> (<a href="#ref-Jakiela:2021">2021, 5</a>), negative weights in treated observations are more likely in (1) early adopter countries, since the country-level treatment mean is high, and (2) later years, since the year-level treatment mean is higher.</p>
<p>Having negative weights on treated observations isn’t necessarily bad! It’s often just a mathematical artefact, and if you have (1) enough never-treated observations and (2) enough pre-treatment data, and if (3) the treatment effects are homogenous across all countries, it won’t be a problem. But if you don’t have enough data, your results will be biased and distorted for later years and for early adopters.</p>
<p>Starting in section 3 of her paper, Jakiela presents a set of diagnostics to see how bad these distortions might be. We need to answer two questions:</p>
<ol>
<li>Do any treated units get negative weight when calculating <code>\(\beta^{\text{TWFE}}\)</code>? Check this by looking at the weights</li>
<li>Can we reject the hypothesis that the treatment effects are homogenous? Check this by looking at the relationship between <code>\(\tilde{Y}_{it}\)</code> and <code>\(\tilde{D}_{it}\)</code>. The slope shouldn’t be different.</li>
</ol>
<h3 id="31-do-treated-observations-receive-negative-weights">3.1: Do treated observations receive negative weights?</h3>
<p>For this first diagnostic, we need to investigate patterns in the residualized weights. Some of the treated country-year observations have negative weight:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Total treated in primary data</span>
n_treated_primary <span style="color:#f92672">&lt;-</span> fpe_primary_weights <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">filter</span>(treatment <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">nrow</span>()

<span style="color:#75715e"># Total treated in secondary data</span>
n_treated_secondary <span style="color:#f92672">&lt;-</span> fpe_secondary_weights <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">filter</span>(treatment <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">nrow</span>()

<span style="color:#75715e"># Negatively weighted treated observations in the primary data</span>
n_treated_negative_primary <span style="color:#f92672">&lt;-</span> fpe_primary_weights <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">filter</span>(treatment_weight <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;</span> treatment <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">nrow</span>()

n_treated_negative_primary
<span style="color:#75715e">## [1] 50</span>
n_treated_negative_primary <span style="color:#f92672">/</span> n_treated_primary
<span style="color:#75715e">## [1] 0.259</span>

<span style="color:#75715e"># Negatively weighted treated observations in the secondary data</span>
n_treated_negative_secondary <span style="color:#f92672">&lt;-</span> fpe_secondary_weights <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">filter</span>(treatment_weight <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;</span> treatment <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">nrow</span>()

n_treated_negative_secondary
<span style="color:#75715e">## [1] 36</span>
n_treated_negative_secondary <span style="color:#f92672">/</span> n_treated_secondary
<span style="color:#75715e">## [1] 0.261</span>
</code></pre></div><p>Roughly a quarter of the treated observations in both the primary and secondary enrollment data are negatively weighted. That might be bad.</p>
<p>We can look at the distribution of these weights too:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">plot_weights_primary <span style="color:#f92672">&lt;-</span> fpe_primary_weights <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(treatment_fct <span style="color:#f92672">=</span> <span style="color:#a6e22e">factor</span>(treatment, labels <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;Untreated&#34;</span>, <span style="color:#e6db74">&#34;Treated&#34;</span>), ordered <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(oh_no <span style="color:#f92672">=</span> (treatment <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;</span> treatment_weight <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>) <span style="color:#f92672">|</span> (treatment <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;</span> treatment_weight <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>))

plot_weights_secondary <span style="color:#f92672">&lt;-</span> fpe_secondary_weights <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(treatment_fct <span style="color:#f92672">=</span> <span style="color:#a6e22e">factor</span>(treatment, labels <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;Untreated&#34;</span>, <span style="color:#e6db74">&#34;Treated&#34;</span>), ordered <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(oh_no <span style="color:#f92672">=</span> (treatment <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;</span> treatment_weight <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>) <span style="color:#f92672">|</span> (treatment <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;</span> treatment_weight <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>))

hist_primary <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(plot_weights_primary,
                       <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> treatment_weight, fill <span style="color:#f92672">=</span> treatment_fct, alpha <span style="color:#f92672">=</span> oh_no)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_histogram</span>(binwidth <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.002</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;white&#34;</span>, boundary <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
                 position <span style="color:#f92672">=</span> <span style="color:#a6e22e">position_identity</span>()) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_vline</span>(xintercept <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#FF4136&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.5</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_alpha_manual</span>(values <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0.6</span>, <span style="color:#ae81ff">1</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_fill_viridis_d</span>(option <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;rocket&#34;</span>, begin <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.2</span>, end <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.8</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Residualized treatment&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Count&#34;</span>,
       title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Primary school enrollment&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">guides</span>(fill <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;none&#34;</span>, alpha <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;none&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">facet_wrap</span>(<span style="color:#a6e22e">vars</span>(treatment_fct), ncol <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_clean</span>()

hist_secondary <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(plot_weights_secondary,
                         <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> treatment_weight, fill <span style="color:#f92672">=</span> treatment_fct, alpha <span style="color:#f92672">=</span> oh_no)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_histogram</span>(binwidth <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.002</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;white&#34;</span>, boundary <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
                 position <span style="color:#f92672">=</span> <span style="color:#a6e22e">position_identity</span>()) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_vline</span>(xintercept <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#FF4136&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.5</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_alpha_manual</span>(values <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0.6</span>, <span style="color:#ae81ff">1</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_fill_viridis_d</span>(option <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;rocket&#34;</span>, begin <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.2</span>, end <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.8</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Residualized treatment&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Count&#34;</span>,
       title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Secondary school enrollment&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">guides</span>(fill <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;none&#34;</span>, alpha <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;none&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">facet_wrap</span>(<span style="color:#a6e22e">vars</span>(treatment_fct), ncol <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_clean</span>()

hist_primary <span style="color:#f92672">+</span> hist_secondary
</code></pre></div><p><img src="https://www.shagunjhaver.com/blog/2021/08/25/twfe-diagnostics/index_files/figure-html/show-weights-hist-1.png" width="100%" style="display: block; margin: auto;" /></p>
<p>These histograms confirm the proportions we found earlier—about 25% of the treated observations have negative weights.</p>
<p>Which treated country-years are getting these negative weights, though? According to Jakiela, early adopters and later years are more likely to have this switch happen. Let’s make another plot:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">plot_waffle_primary <span style="color:#f92672">&lt;-</span> fpe_primary_weights <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(weight_fill <span style="color:#f92672">=</span> <span style="color:#a6e22e">case_when</span>(
    treatment_resid <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;</span> treatment <span style="color:#f92672">~</span> <span style="color:#e6db74">&#34;Treatment observations, negative weight&#34;</span>,
    treatment_resid <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;</span> treatment <span style="color:#f92672">~</span> <span style="color:#e6db74">&#34;Treatment observations, positive weight&#34;</span>,
    <span style="color:#f92672">!</span>treatment <span style="color:#f92672">~</span> <span style="color:#e6db74">&#34;Comparison observations&#34;</span>
  )) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">arrange</span>(<span style="color:#a6e22e">desc</span>(fpe_year), <span style="color:#a6e22e">desc</span>(country)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(country <span style="color:#f92672">=</span> <span style="color:#a6e22e">fct_inorder</span>(country)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(weight_fill <span style="color:#f92672">=</span> <span style="color:#a6e22e">fct_inorder</span>(weight_fill))

plot_waffle_secondary <span style="color:#f92672">&lt;-</span> fpe_secondary_weights <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(weight_fill <span style="color:#f92672">=</span> <span style="color:#a6e22e">case_when</span>(
    treatment_resid <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;</span> treatment <span style="color:#f92672">~</span> <span style="color:#e6db74">&#34;Treatment observations, negative weight&#34;</span>,
    treatment_resid <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;</span> treatment <span style="color:#f92672">~</span> <span style="color:#e6db74">&#34;Treatment observations, positive weight&#34;</span>,
    <span style="color:#f92672">!</span>treatment <span style="color:#f92672">~</span> <span style="color:#e6db74">&#34;Comparison observations&#34;</span>
  )) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">arrange</span>(<span style="color:#a6e22e">desc</span>(fpe_year), <span style="color:#a6e22e">desc</span>(country)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(country <span style="color:#f92672">=</span> <span style="color:#a6e22e">fct_inorder</span>(country)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(weight_fill <span style="color:#f92672">=</span> <span style="color:#a6e22e">fct_inorder</span>(weight_fill))

waffle_primary <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(plot_waffle_primary,
                         <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> year, y <span style="color:#f92672">=</span> country, fill <span style="color:#f92672">=</span> weight_fill)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_tile</span>(color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;white&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.5</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_fill_manual</span>(values <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;grey50&#34;</span>, <span style="color:#e6db74">&#34;#0074D9&#34;</span>, <span style="color:#e6db74">&#34;#FF4136&#34;</span>),
                    guide <span style="color:#f92672">=</span> <span style="color:#a6e22e">guide_legend</span>(reverse <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>),
                    name <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_x_continuous</span>(expand <span style="color:#f92672">=</span> <span style="color:#a6e22e">expansion</span>(add <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.5</span>),
                     breaks <span style="color:#f92672">=</span> <span style="color:#a6e22e">seq</span>(<span style="color:#ae81ff">1980</span>, <span style="color:#ae81ff">2015</span>, <span style="color:#ae81ff">5</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>, y <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>, title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Primary school enrollment&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">coord_equal</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_clean</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(legend.position <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bottom&#34;</span>,
        panel.grid <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>(),
        legend.key.size <span style="color:#f92672">=</span> <span style="color:#a6e22e">unit</span>(<span style="color:#ae81ff">0.8</span>, <span style="color:#e6db74">&#34;lines&#34;</span>))

waffle_secondary <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(plot_waffle_secondary,
                         <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> year, y <span style="color:#f92672">=</span> country, fill <span style="color:#f92672">=</span> weight_fill)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_tile</span>(color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;white&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.5</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_fill_manual</span>(values <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;grey50&#34;</span>, <span style="color:#e6db74">&#34;#0074D9&#34;</span>, <span style="color:#e6db74">&#34;#FF4136&#34;</span>),
                    guide <span style="color:#f92672">=</span> <span style="color:#a6e22e">guide_legend</span>(reverse <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>),
                    name <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_x_continuous</span>(expand <span style="color:#f92672">=</span> <span style="color:#a6e22e">expansion</span>(add <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.5</span>),
                     breaks <span style="color:#f92672">=</span> <span style="color:#a6e22e">seq</span>(<span style="color:#ae81ff">1980</span>, <span style="color:#ae81ff">2015</span>, <span style="color:#ae81ff">5</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>, y <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>, title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Secondary school enrollment&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">coord_equal</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_clean</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(legend.position <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bottom&#34;</span>,
        panel.grid <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>(),
        legend.key.size <span style="color:#f92672">=</span> <span style="color:#a6e22e">unit</span>(<span style="color:#ae81ff">0.8</span>, <span style="color:#e6db74">&#34;lines&#34;</span>))

waffle_primary <span style="color:#f92672">/</span> waffle_secondary
</code></pre></div><p><img src="https://www.shagunjhaver.com/blog/2021/08/25/twfe-diagnostics/index_files/figure-html/show-weight-waffle-1.png" width="100%" style="display: block; margin: auto;" /></p>
<p>And that is indeed the case! Malawi, Ethiopia, Ghana, Uganda, and Cameroon all eliminated fees before 2000, and they start getting negative weights after 2005.</p>
<h3 id="32-testing-the-homogeneity-assumption-directly">3.2: Testing the homogeneity assumption directly</h3>
<p>We thus have issues with negative weighting here for early adopting countries and later country-years. However, as long as the treatment effects are homogenous—or that the elimination of school fees has the same effect across time and country—this negative weighting isn’t an issue. If treatment effects are heterogenous—especially if the effects change over time within treated countries—the TWFE estimate will be severely biased.</p>
<p>Jakiela’s second diagnostic tests this assumption of homogeneity based on the mathematical relationship between the residuals of the outcome variable (<code>$\tilde{Y}_{it}$</code>) and the residuals of the treatment variable (<code>$\tilde{D}_{it}$</code>). Essentially, if there’s no difference in slopes across treated and untreated observations in a regression of <code>$\tilde{Y}_{it} = \tilde{D}_{it}$</code>, there’s no evidence for heterogeneity and all is well.</p>
<p>This wasn’t intuitive for me since I’m not a real econometrician, so I had to dig into the math to try to wrap my head around it, and I’m still only like 80% sure I’ve got it :)</p>
<p>We can think of the outcome <code>\(Y_{it}\)</code> as a combination of three different moving parts: (1) an initial baseline value for each country, or <code>\(\mu_{i}\)</code>, (2) a constant change in each additional year in the absence of treatment (i.e. what would naturally happen over time regardless of an intervention), or <code>\(\eta_t\)</code>, and (3) a homogenous treatment effect, or <code>\(\delta\)</code> (doesn’t have subscripts for <code>\(i\)</code> or <code>\(t\)</code>—it’s the same across year and country):</p>
<p><code>$$\color{gray}{\overbrace{\color{#FFA615}{Y_{it}}}^{\text{Outcome}}} = \color{gray}{\overbrace{\color{black}{\mu_i}}^{\substack{\text{Baseline} \\ \text{outcome} \\ \text{at } t = 1}}} + \color{black} \sum_{\tau = 1}^t  \color{gray}{\overbrace{\color{black}{\eta_t}}^{\substack{\text{Global} \\ \text{time} \\ \text{trend}}}} + \color{gray}{\overbrace{\color{black}{\delta}}^{\substack{\text{Homogenous} \\ \text{treatment} \\ \text{effect}}}} \color{#A4BD0A}{D_{it}}$$</code></p>
<p>This all makes perfect sense is is nice and intuitive. It’s how I typically generate fake data too (see the <code>outcome_baseline</code> up at the beginning of this post, for instance) and it’s a neat way of thinking about the separate components of a data generating process.</p>
<p>According to Jakiela, if the treatment effect <code>\(\delta\)</code> is truly homogenous over time and country, the residuals of the outcome (i.e. the residuals from a model like <code>lm(outcome ~ country + year)</code>, or <code>\(\tilde{Y}_{it}\)</code>) should have a linear relationship to the residualized treatment (i.e. the residuals from a model like <code>lm(treatment ~ country + year)</code>, or <code>\(\delta\tilde{D}_{it}\)</code>).</p>
<p>Again, due to my non-econometricianness, this idea that <code>\(\tilde{Y}_{it}\)</code> should be related to <code>\(\delta\tilde{D}_{it}\)</code> didn’t click for me until I thought about this formula in more regression-y terms. Consider this pseudo-regression equation:</p>
<p><code>$$\overbrace{Y_{it}}^{\text{Outcome}} = \overbrace{\alpha_i}^{\text{Intercept}} + \overbrace{\beta_t}^{\text{Slope / trend}} + \overbrace{\epsilon_{it}}^{\text{Residuals}}$$</code></p>
<p>Here, if we run a regression like <code>lm(outcome ~ country + year)</code>, the intercept <code>\(\alpha_i\)</code> is analogous to <code>\(\mu_i\)</code>, the slope <code>\(\beta_t\)</code> is like <code>\(\eta_t\)</code>, and whatever’s leftover (i.e. <code>\(\epsilon_{it}\)</code>, or the residualized outcome <code>\(\tilde{Y}_{it}\)</code>) is similar to <code>\(\delta D_{it}\)</code>. <code>\(\delta D_{it}\)</code> isn’t the same as <code>\(\delta \tilde{D}_{it}\)</code>, but we can calculate the residualized treatment the same way by removing country and year effects (like <code>lm(treatment ~ country + year)</code>). Basically, by residualizing both the treatment and outcome, and thus removing country and time effects (or the baseline country effect <code>\(\mu_i\)</code> and the time trend <code>\(\eta_t\)</code>) from each, the residuals that remain are related to <code>\(\delta\)</code>.</p>
<p>As long as <code>\(\delta\)</code> is constant across time and country—or as long as the effect is homogenous—it should show up equally in the residuals for both the outcome and treatment for both treated and untreated observations. (I THINK! I’M NOT SURE ABOUT THIS)</p>
<p>We already calculated the treatment residuals (or <code>\(\tilde{D}_{it}\)</code>) when we looked at treatment weights earlier, so now we just need to calculate the outcome residuals ($\tilde{Y}_{it}$). We can then see if the relationship between <code>\(\tilde{D}_{it}\)</code> and <code>\(\tilde{D}_{it}\)</code> looks the same for treated and untreated observations—the slopes in the two groups should be statistically indistinguishable from each other.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Build models for the residualized outcomes</span>
out_resid_primary <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lm</span>(primary <span style="color:#f92672">~</span> country <span style="color:#f92672">+</span> <span style="color:#a6e22e">factor</span>(year), data <span style="color:#f92672">=</span> fpe_primary)
out_resid_secondary <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lm</span>(secondary <span style="color:#f92672">~</span> country <span style="color:#f92672">+</span> <span style="color:#a6e22e">factor</span>(year), data <span style="color:#f92672">=</span> fpe_secondary)

<span style="color:#75715e"># Add residuals to data with weights</span>
fpe_primary_weights <span style="color:#f92672">&lt;-</span> fpe_primary_weights <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(out_resid <span style="color:#f92672">=</span> <span style="color:#a6e22e">residuals</span>(out_resid_primary))

fpe_secondary_weights <span style="color:#f92672">&lt;-</span> fpe_secondary_weights <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(out_resid <span style="color:#f92672">=</span> <span style="color:#a6e22e">residuals</span>(out_resid_secondary))
</code></pre></div><p>We can check the similarity of these slopes a couple different ways. First, let’s plot the residuals:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">plot_out_trt_primary <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(fpe_primary_weights,
                               <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> treatment_resid, y <span style="color:#f92672">=</span> out_resid, color <span style="color:#f92672">=</span> <span style="color:#a6e22e">factor</span>(treatment))) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_point</span>(size <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.75</span>, alpha <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.5</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_smooth</span>(<span style="color:#a6e22e">aes</span>(linetype <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Loess&#34;</span>), method <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;loess&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, se <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>, alpha <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.5</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_smooth</span>(<span style="color:#a6e22e">aes</span>(linetype <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;OLS&#34;</span>), method <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;lm&#34;</span>, se <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_color_viridis_d</span>(option <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;rocket&#34;</span>, begin <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.2</span>, end <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.8</span>,
                        labels <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;Untreated&#34;</span>, <span style="color:#e6db74">&#34;Treated&#34;</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_linetype_manual</span>(values <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;OLS&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;solid&#34;</span>, <span style="color:#e6db74">&#34;Loess&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;21&#34;</span>),
                        guide <span style="color:#f92672">=</span> <span style="color:#a6e22e">guide_legend</span>(override.aes <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;grey30&#34;</span>))) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Residualized treatment&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Residualized outcome&#34;</span>,
       title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Primary school enrollment&#34;</span>, color <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>, linetype <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_clean</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(legend.position <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bottom&#34;</span>)

plot_out_trt_secondary <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(fpe_secondary_weights,
                                 <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> treatment_resid, y <span style="color:#f92672">=</span> out_resid, color <span style="color:#f92672">=</span> <span style="color:#a6e22e">factor</span>(treatment))) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_point</span>(size <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.75</span>, alpha <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.5</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_smooth</span>(<span style="color:#a6e22e">aes</span>(linetype <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Loess&#34;</span>), method <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;loess&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, se <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>, alpha <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.5</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_smooth</span>(<span style="color:#a6e22e">aes</span>(linetype <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;OLS&#34;</span>), method <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;lm&#34;</span>, se <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_color_viridis_d</span>(option <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;rocket&#34;</span>, begin <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.2</span>, end <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.8</span>,
                        labels <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;Untreated&#34;</span>, <span style="color:#e6db74">&#34;Treated&#34;</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_linetype_manual</span>(values <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;OLS&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;solid&#34;</span>, <span style="color:#e6db74">&#34;Loess&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;21&#34;</span>),
                        guide <span style="color:#f92672">=</span> <span style="color:#a6e22e">guide_legend</span>(override.aes <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;grey30&#34;</span>))) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Residualized treatment&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Residualized outcome&#34;</span>,
       title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Secondary school enrollment&#34;</span>, color <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>, linetype <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_clean</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(legend.position <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bottom&#34;</span>)

plot_out_trt_primary <span style="color:#f92672">|</span> plot_out_trt_secondary
</code></pre></div><p><img src="https://www.shagunjhaver.com/blog/2021/08/25/twfe-diagnostics/index_files/figure-html/show-outcome-trt-resid-1.png" width="100%" style="display: block; margin: auto;" /></p>
<p>For primary enrollment, the lines for treated and untreated observations look like they have similar slopes. When using Loess lines, the two groups don’t align perfectly, and the relationship between residualized treatment and residualized outcome doesn’t look perfectly linear. When secondary enrollment is the outcome, the lines for the treated and untreated groups seem to switch directions—the slope is negative for untreated observations but positive for treated. This is a bad sign for the homogeneity assumption.</p>
<p>We can statistically test if the slopes in two groups are the same or not by using an interaction term in a regression model:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">check_slopes_primary <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lm</span>(out_resid <span style="color:#f92672">~</span> treatment_resid <span style="color:#f92672">*</span> <span style="color:#a6e22e">factor</span>(treatment),
                           data <span style="color:#f92672">=</span> fpe_primary_weights)

check_slopes_secondary <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lm</span>(out_resid <span style="color:#f92672">~</span> treatment_resid <span style="color:#f92672">*</span> <span style="color:#a6e22e">factor</span>(treatment),
                           data <span style="color:#f92672">=</span> fpe_secondary_weights)

<span style="color:#a6e22e">modelsummary</span>(<span style="color:#a6e22e">list</span>(<span style="color:#e6db74">&#34;Primary enrollment&#34;</span> <span style="color:#f92672">=</span> check_slopes_primary,
                  <span style="color:#e6db74">&#34;Secondary enrollment&#34;</span> <span style="color:#f92672">=</span> check_slopes_secondary),
             coef_rename <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;treatment_resid&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Residualized treatment&#34;</span>,
                             <span style="color:#e6db74">&#34;factor(treatment)1&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Treatment group&#34;</span>,
                             <span style="color:#e6db74">&#34;treatment_resid:factor(treatment)1&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Treatment group × residualized treatment&#34;</span>,
                             <span style="color:#e6db74">&#34;(Intercept)&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Intercept&#34;</span>),
             estimate <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;{estimate}&#34;</span>,
             statistic <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;s.e. = {std.error}&#34;</span>, <span style="color:#e6db74">&#34;p = {p.value}&#34;</span>),
             gof_map <span style="color:#f92672">=</span> <span style="color:#a6e22e">tribble</span>(
               <span style="color:#f92672">~</span>raw, <span style="color:#f92672">~</span>clean, <span style="color:#f92672">~</span>fmt,
               <span style="color:#e6db74">&#34;nobs&#34;</span>, <span style="color:#e6db74">&#34;N&#34;</span>, <span style="color:#ae81ff">0</span>,
               <span style="color:#e6db74">&#34;r.squared&#34;</span>, <span style="color:#e6db74">&#34;R²&#34;</span>, <span style="color:#ae81ff">3</span>
             ),
             table.attr <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;style=&#39;font-size:80%;&#39;&#34;</span>, escape <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>, output <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;kableExtra&#34;</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">kable_styling</span>(htmltable_class <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;pure-table&#34;</span>)
</code></pre></div><table style="font-size:80%; width: auto !important; margin-left: auto; margin-right: auto; margin-left: auto; margin-right: auto;" class="table pure-table">
<thead>
<tr>
<th style="text-align:left;">
</th>
<th style="text-align:center;">
Primary enrollment
</th>
<th style="text-align:center;">
Secondary enrollment
</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">
Intercept
</td>
<td style="text-align:center;">
0.320
</td>
<td style="text-align:center;">
−0.202
</td>
</tr>
<tr>
<td style="text-align:left;">
</td>
<td style="text-align:center;">
s.e. = 0.894
</td>
<td style="text-align:center;">
s.e. = 0.276
</td>
</tr>
<tr>
<td style="text-align:left;">
</td>
<td style="text-align:center;">
p = 0.721
</td>
<td style="text-align:center;">
p = 0.466
</td>
</tr>
<tr>
<td style="text-align:left;">
Residualized treatment
</td>
<td style="text-align:center;">
23.761
</td>
<td style="text-align:center;">
−2.902
</td>
</tr>
<tr>
<td style="text-align:left;">
</td>
<td style="text-align:center;">
s.e. = 3.968
</td>
<td style="text-align:center;">
s.e. = 1.357
</td>
</tr>
<tr>
<td style="text-align:left;">
</td>
<td style="text-align:center;">
p = 0.000
</td>
<td style="text-align:center;">
p = 0.033
</td>
</tr>
<tr>
<td style="text-align:left;">
Treatment group
</td>
<td style="text-align:center;">
0.341
</td>
<td style="text-align:center;">
−0.189
</td>
</tr>
<tr>
<td style="text-align:left;">
</td>
<td style="text-align:center;">
s.e. = 1.506
</td>
<td style="text-align:center;">
s.e. = 0.473
</td>
</tr>
<tr>
<td style="text-align:left;">
</td>
<td style="text-align:center;">
p = 0.821
</td>
<td style="text-align:center;">
p = 0.690
</td>
</tr>
<tr>
<td style="text-align:left;">
Treatment group × residualized treatment
</td>
<td style="text-align:center;">
−7.806
</td>
<td style="text-align:center;">
5.248
</td>
</tr>
<tr>
<td style="text-align:left;">
</td>
<td style="text-align:center;">
s.e. = 6.073
</td>
<td style="text-align:center;">
s.e. = 1.993
</td>
</tr>
<tr>
<td style="text-align:left;box-shadow: 0px 1px">
</td>
<td style="text-align:center;box-shadow: 0px 1px">
p = 0.199
</td>
<td style="text-align:center;box-shadow: 0px 1px">
p = 0.009
</td>
</tr>
<tr>
<td style="text-align:left;">
N
</td>
<td style="text-align:center;">
490
</td>
<td style="text-align:center;">
369
</td>
</tr>
<tr>
<td style="text-align:left;">
R²
</td>
<td style="text-align:center;">
0.114
</td>
<td style="text-align:center;">
0.019
</td>
</tr>
</tbody>
</table>
<p>The coefficient for “Treatment group × residualized treatment” shows the change in slope between the two groups. For primary enrollment, being in the treatment group reduces the slope by 7.8 (so from 23.761 to 15.961), but the standard errors around that change are huge and the p-value is not significant (p = 0.199). For secondary enrollment, though, being in the treatment group increases the slope by 5.3 (from -2.9 to positive 2.4), and that change is statistically significant (p = 0.009).</p>
<p>So for primary enrollment, there’s not enough evidence to reject the hypothesis that the slopes are the same (or the hypothesis that the effect is homogenous), so we’ll treat the effect as homogenous. Yay! That means we don’t need to worry so much about the negatively-weighted treated country-years. For secondary enrollment, though, there’s pretty strong evidence that the slopes aren’t the same, which means the treatment effect is likely heterogenous, which also means that the treated country-years with negative weights are biasing the results substantially and we should thus be worried.</p>
<p>When there are heterogenous treatment effects, we don’t need to give up! This is what <a href="#ref-CallawaySantAnna:2020">Callaway and Sant’Anna</a> (<a href="#ref-CallawaySantAnna:2020">2020</a>) and <a href="#ref-SunAbraham:2020">Sun and Abraham</a> (<a href="#ref-SunAbraham:2020">2020</a>) show how to do in their papers (and see <a href="#ref-BakerLarckerWang:2021">Baker, Larcker, and Wang</a> (<a href="#ref-BakerLarckerWang:2021">2021</a>) for a general overview of those approaches). If treatment effects are indeed homogenous, there’s no need to turn to these fancier TWFE estimators—but if they are heterogenous, there are new tools that help.</p>
<h2 id="jakielas-robustness-checks">Jakiela’s robustness checks</h2>
<p>Now that we’ve run those two diagnostics (checked for negative weights in treated units and checked for treatment effect homogeneity), we can do some neat robustness checks to see how badly these negative weight issues bias the TWFE estimate.</p>
<p>As long as we assume that treatment effects are homogenous (remember that <code>\(\delta\)</code> in the equation above doesn’t have subscripts for country or year), we can safely drop some observations from the data and still find the same result. We can also strategically drop observations to check if negative treatment weights influence the results. Jakiela presents three different robustness checks that all involve dropping different categories of observations:</p>
<ul>
<li>Exclude later years</li>
<li>Limit how many post-treatment years are kept</li>
<li>Exclude individual countries</li>
</ul>
<h3 id="exclude-later-years">Exclude later years</h3>
<p>Since negative treatment weights for treated country-years are more likely to appear in later years in the data, we can drop those later years and see how the treatment effect changes.</p>
<p>For primary schools, if we cut the data off at 2000, the treatment effect is 31.8 instead of the 20.4 we’ve been seeing with the full data. That estimate is higher, but it also has wider errors. Both the coefficient and the errors shrink as we add more years to the data, and the estimate eventually settles on ≈20 by 2005, which is also when negatively weighted treated rows start appearing.</p>
<p>For secondary schools, the treatment effect hovers around 0 is never statistically significant regardless of the cutoff year.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">different_max_years_primary <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">tibble</span>(end_year <span style="color:#f92672">=</span> <span style="color:#ae81ff">2000</span><span style="color:#f92672">:</span><span style="color:#ae81ff">2015</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#75715e"># Nest a filtered dataset in a cell for each year</span>
  <span style="color:#a6e22e">mutate</span>(data <span style="color:#f92672">=</span> <span style="color:#a6e22e">map</span>(end_year, <span style="color:#f92672">~</span><span style="color:#a6e22e">filter</span>(fpe_primary, year <span style="color:#f92672">&lt;=</span> .))) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#75715e"># Calculate the TWFE estimate for each dataset</span>
  <span style="color:#a6e22e">mutate</span>(model <span style="color:#f92672">=</span> <span style="color:#a6e22e">map</span>(data, <span style="color:#f92672">~</span><span style="color:#a6e22e">lm_robust</span>(primary <span style="color:#f92672">~</span> treatment,
                                      fixed_effects <span style="color:#f92672">=</span> <span style="color:#f92672">~</span> country <span style="color:#f92672">+</span> year,
                                      data <span style="color:#f92672">=</span> .,
                                      clusters <span style="color:#f92672">=</span> country, se_type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;stata&#34;</span>))) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#75715e"># Extract a data frame of the results</span>
  <span style="color:#a6e22e">mutate</span>(tidied <span style="color:#f92672">=</span> <span style="color:#a6e22e">map</span>(model, <span style="color:#f92672">~</span><span style="color:#a6e22e">tidy</span>(., conf.int <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>))) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#75715e"># Calculate residuals and treatment weights</span>
  <span style="color:#a6e22e">mutate</span>(model_resid <span style="color:#f92672">=</span> <span style="color:#a6e22e">map</span>(data, <span style="color:#f92672">~</span><span style="color:#a6e22e">lm</span>(treatment <span style="color:#f92672">~</span> country <span style="color:#f92672">+</span> <span style="color:#a6e22e">factor</span>(year), data <span style="color:#f92672">=</span> .)),
         treatment_resid <span style="color:#f92672">=</span> <span style="color:#a6e22e">map</span>(model_resid, <span style="color:#f92672">~</span><span style="color:#a6e22e">residuals</span>(.)),
         treatment_weight <span style="color:#f92672">=</span> <span style="color:#a6e22e">map</span>(treatment_resid, <span style="color:#f92672">~</span> . <span style="color:#f92672">/</span> <span style="color:#a6e22e">sum</span>(.^2)))

<span style="color:#75715e"># Calculate how many treated observations have negative weights</span>
prop_negative_primary <span style="color:#f92672">&lt;-</span> different_max_years_primary <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">unnest</span>(<span style="color:#a6e22e">c</span>(data, treatment_resid, treatment_weight)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">group_by</span>(end_year) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">summarize</span>(n_treated_negative_weight <span style="color:#f92672">=</span> <span style="color:#a6e22e">sum</span>(treatment_weight <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;</span> treatment <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>),
            n_treated <span style="color:#f92672">=</span> <span style="color:#a6e22e">sum</span>(treatment <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>),
            prop_treated_negative_weight <span style="color:#f92672">=</span> n_treated_negative_weight <span style="color:#f92672">/</span> n_treated) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(prop_nice <span style="color:#f92672">=</span> <span style="color:#a6e22e">percent</span>(prop_treated_negative_weight, accuracy <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>))

<span style="color:#75715e"># Extract tidied results for plotting</span>
coefs_to_plot_primary <span style="color:#f92672">&lt;-</span> different_max_years_primary <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">unnest</span>(tidied)

different_max_years_secondary <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">tibble</span>(end_year <span style="color:#f92672">=</span> <span style="color:#ae81ff">2000</span><span style="color:#f92672">:</span><span style="color:#ae81ff">2015</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(data <span style="color:#f92672">=</span> <span style="color:#a6e22e">map</span>(end_year, <span style="color:#f92672">~</span><span style="color:#a6e22e">filter</span>(fpe_secondary, year <span style="color:#f92672">&lt;=</span> .))) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(model <span style="color:#f92672">=</span> <span style="color:#a6e22e">map</span>(data, <span style="color:#f92672">~</span><span style="color:#a6e22e">lm_robust</span>(secondary <span style="color:#f92672">~</span> treatment,
                                      fixed_effects <span style="color:#f92672">=</span> <span style="color:#f92672">~</span> country <span style="color:#f92672">+</span> year,
                                      data <span style="color:#f92672">=</span> .,
                                      clusters <span style="color:#f92672">=</span> country, se_type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;stata&#34;</span>))) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(tidied <span style="color:#f92672">=</span> <span style="color:#a6e22e">map</span>(model, <span style="color:#f92672">~</span><span style="color:#a6e22e">tidy</span>(., conf.int <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>))) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(model_resid <span style="color:#f92672">=</span> <span style="color:#a6e22e">map</span>(data, <span style="color:#f92672">~</span><span style="color:#a6e22e">lm</span>(treatment <span style="color:#f92672">~</span> country <span style="color:#f92672">+</span> <span style="color:#a6e22e">factor</span>(year), data <span style="color:#f92672">=</span> .)),
         treatment_resid <span style="color:#f92672">=</span> <span style="color:#a6e22e">map</span>(model_resid, <span style="color:#f92672">~</span><span style="color:#a6e22e">residuals</span>(.)),
         treatment_weight <span style="color:#f92672">=</span> <span style="color:#a6e22e">map</span>(treatment_resid, <span style="color:#f92672">~</span> . <span style="color:#f92672">/</span> <span style="color:#a6e22e">sum</span>(.^2)))

prop_negative_secondary <span style="color:#f92672">&lt;-</span> different_max_years_secondary <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">unnest</span>(<span style="color:#a6e22e">c</span>(data, treatment_resid, treatment_weight)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">group_by</span>(end_year) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">summarize</span>(n_treated_negative_weight <span style="color:#f92672">=</span> <span style="color:#a6e22e">sum</span>(treatment_weight <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;</span> treatment <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>),
            n_treated <span style="color:#f92672">=</span> <span style="color:#a6e22e">sum</span>(treatment <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>),
            prop_treated_negative_weight <span style="color:#f92672">=</span> n_treated_negative_weight <span style="color:#f92672">/</span> n_treated) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(prop_nice <span style="color:#f92672">=</span> <span style="color:#a6e22e">percent</span>(prop_treated_negative_weight, accuracy <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>))

coefs_to_plot_secondary <span style="color:#f92672">&lt;-</span> different_max_years_secondary <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">unnest</span>(tidied)

<span style="color:#75715e"># Coefficient plot</span>
ate_primary <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(coefs_to_plot_primary, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> end_year, y <span style="color:#f92672">=</span> estimate)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_hline</span>(yintercept <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#FF2E00&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_pointrange</span>(<span style="color:#a6e22e">aes</span>(ymin <span style="color:#f92672">=</span> conf.low, ymax <span style="color:#f92672">=</span> conf.high),
                  color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#0599B0&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, fatten <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;TWFE-based treatment effect&#34;</span>,
       title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Primary school enrollment&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_clean</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(axis.title.x <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>(),
        axis.text.x <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>())

ate_secondary <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(coefs_to_plot_secondary, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> end_year, y <span style="color:#f92672">=</span> estimate)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_hline</span>(yintercept <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#FF2E00&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_pointrange</span>(<span style="color:#a6e22e">aes</span>(ymin <span style="color:#f92672">=</span> conf.low, ymax <span style="color:#f92672">=</span> conf.high),
                  color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#0599B0&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, fatten <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;TWFE-based treatment effect&#34;</span>,
       title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Secondary school enrollment&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_clean</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(axis.title.x <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>(),
        axis.text.x <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>())

<span style="color:#75715e"># Bar plot</span>
prop_neg_primary <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(<span style="color:#a6e22e">filter</span>(prop_negative_primary,
                                  prop_treated_negative_weight <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>),
                           <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> end_year, y <span style="color:#f92672">=</span> prop_treated_negative_weight)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_col</span>(fill <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#FF4136&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_text</span>(<span style="color:#a6e22e">aes</span>(label <span style="color:#f92672">=</span> prop_nice),
            nudge_y <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.02</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">2.5</span>,
            family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Barlow Semi Condensed Bold&#34;</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#FF4136&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">coord_cartesian</span>(xlim <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">2000</span>, <span style="color:#ae81ff">2015</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Last year included in data&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>,
       subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;% of treated observations with negative weight&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_clean</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(panel.grid.major.y <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>(),
        axis.text.y <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>())

prop_neg_secondary <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(<span style="color:#a6e22e">filter</span>(prop_negative_secondary,
                                    prop_treated_negative_weight <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>),
                             <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> end_year, y <span style="color:#f92672">=</span> prop_treated_negative_weight)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_col</span>(fill <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#FF4136&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_text</span>(<span style="color:#a6e22e">aes</span>(label <span style="color:#f92672">=</span> prop_nice),
            nudge_y <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.02</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">2.5</span>,
            family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Barlow Semi Condensed Bold&#34;</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#FF4136&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">coord_cartesian</span>(xlim <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">2000</span>, <span style="color:#ae81ff">2015</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Last year included in data&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>,
       subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;% of treated observations with negative weight&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_clean</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(panel.grid.major.y <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>(),
        axis.text.y <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>())

((ate_primary <span style="color:#f92672">/</span> prop_neg_primary) <span style="color:#f92672">+</span> <span style="color:#a6e22e">plot_layout</span>(heights <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0.8</span>, <span style="color:#ae81ff">0.2</span>))) <span style="color:#f92672">|</span>
  ((ate_secondary <span style="color:#f92672">/</span> prop_neg_secondary) <span style="color:#f92672">+</span> <span style="color:#a6e22e">plot_layout</span>(heights <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0.8</span>, <span style="color:#ae81ff">0.2</span>)))
</code></pre></div><p><img src="https://www.shagunjhaver.com/blog/2021/08/25/twfe-diagnostics/index_files/figure-html/robust-exclude-later-years-1.png" width="100%" style="display: block; margin: auto;" /></p>
<h3 id="change-how-many-post-treatment-years-are-kept">Change how many post-treatment years are kept</h3>
<p>Dropping rows based on end years like this is neat, but it doesn’t take into account the differential treatment timing. Countries like Mozambique, which eliminated its fees in 2005, don’t even show up in the first few models of exclude-later-years robustness check, since those models end in 2000–2004. As an alternative, we can keep specific numbers of years post-treatment for each country. For instance, we can look at Mozambique 2, 3, 4, or 5 (and so on) years after treatment. Doing this centers all countries at <code>\(t = 0\)</code>, rather than <code>\(t = \text{start year}\)</code>.</p>
<p>For primary schools in this situation, the effect is smaller and not significant when only a few post-treatment years are kept, but it stabilizes at around 20 after only 5 post-treatment years, which suggests that <code>\(\delta\)</code> is indeed homogenous—we don’t need a ton of post-treatment data to find it. For secondary schools, though, the effect remains negative and insigificant throughout every specification.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">fpe_primary_years_since <span style="color:#f92672">&lt;-</span> fpe_primary <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(years_after <span style="color:#f92672">=</span> year <span style="color:#f92672">-</span> fpe_year)

fpe_secondary_years_since <span style="color:#f92672">&lt;-</span> fpe_secondary <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(years_after <span style="color:#f92672">=</span> year <span style="color:#f92672">-</span> fpe_year)

different_years_after_primary <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">tibble</span>(post_trt_years <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">:</span><span style="color:#ae81ff">22</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#75715e"># Nest a filtered dataset in a cell for each year</span>
  <span style="color:#a6e22e">mutate</span>(data <span style="color:#f92672">=</span> <span style="color:#a6e22e">map</span>(post_trt_years, <span style="color:#f92672">~</span><span style="color:#a6e22e">filter</span>(fpe_primary_years_since, years_after <span style="color:#f92672">&lt;=</span> .))) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#75715e"># Calculate the TWFE estimate for each dataset</span>
  <span style="color:#a6e22e">mutate</span>(model <span style="color:#f92672">=</span> <span style="color:#a6e22e">map</span>(data, <span style="color:#f92672">~</span><span style="color:#a6e22e">lm_robust</span>(primary <span style="color:#f92672">~</span> treatment,
                                      fixed_effects <span style="color:#f92672">=</span> <span style="color:#f92672">~</span> country <span style="color:#f92672">+</span> year,
                                      data <span style="color:#f92672">=</span> .,
                                      clusters <span style="color:#f92672">=</span> country, se_type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;stata&#34;</span>))) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#75715e"># Extract a data frame of the results</span>
  <span style="color:#a6e22e">mutate</span>(tidied <span style="color:#f92672">=</span> <span style="color:#a6e22e">map</span>(model, <span style="color:#f92672">~</span><span style="color:#a6e22e">tidy</span>(., conf.int <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>))) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#75715e"># Calculate residuals and treatment weights</span>
  <span style="color:#a6e22e">mutate</span>(model_resid <span style="color:#f92672">=</span> <span style="color:#a6e22e">map</span>(data, <span style="color:#f92672">~</span><span style="color:#a6e22e">lm</span>(treatment <span style="color:#f92672">~</span> country <span style="color:#f92672">+</span> <span style="color:#a6e22e">factor</span>(year), data <span style="color:#f92672">=</span> .)),
         treatment_resid <span style="color:#f92672">=</span> <span style="color:#a6e22e">map</span>(model_resid, <span style="color:#f92672">~</span><span style="color:#a6e22e">residuals</span>(.)),
         treatment_weight <span style="color:#f92672">=</span> <span style="color:#a6e22e">map</span>(treatment_resid, <span style="color:#f92672">~</span> . <span style="color:#f92672">/</span> <span style="color:#a6e22e">sum</span>(.^2)))

<span style="color:#75715e"># Calculate how many treated observations have negative weights</span>
prop_negative_primary <span style="color:#f92672">&lt;-</span> different_years_after_primary <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">unnest</span>(<span style="color:#a6e22e">c</span>(data, treatment_resid, treatment_weight)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">group_by</span>(post_trt_years) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">summarize</span>(n_treated_negative_weight <span style="color:#f92672">=</span> <span style="color:#a6e22e">sum</span>(treatment_weight <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;</span> treatment <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>),
            n_treated <span style="color:#f92672">=</span> <span style="color:#a6e22e">sum</span>(treatment <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>),
            prop_treated_negative_weight <span style="color:#f92672">=</span> n_treated_negative_weight <span style="color:#f92672">/</span> n_treated) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(prop_nice <span style="color:#f92672">=</span> <span style="color:#a6e22e">percent</span>(prop_treated_negative_weight, accuracy <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>))

<span style="color:#75715e"># Extract tidied results for plotting</span>
coefs_to_plot_primary <span style="color:#f92672">&lt;-</span> different_years_after_primary <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">unnest</span>(tidied)

different_years_after_secondary <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">tibble</span>(post_trt_years <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">:</span><span style="color:#ae81ff">22</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(data <span style="color:#f92672">=</span> <span style="color:#a6e22e">map</span>(post_trt_years, <span style="color:#f92672">~</span><span style="color:#a6e22e">filter</span>(fpe_secondary_years_since, years_after <span style="color:#f92672">&lt;=</span> .))) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(model <span style="color:#f92672">=</span> <span style="color:#a6e22e">map</span>(data, <span style="color:#f92672">~</span><span style="color:#a6e22e">lm_robust</span>(secondary <span style="color:#f92672">~</span> treatment,
                                      fixed_effects <span style="color:#f92672">=</span> <span style="color:#f92672">~</span> country <span style="color:#f92672">+</span> year,
                                      data <span style="color:#f92672">=</span> .,
                                      clusters <span style="color:#f92672">=</span> country, se_type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;stata&#34;</span>))) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(tidied <span style="color:#f92672">=</span> <span style="color:#a6e22e">map</span>(model, <span style="color:#f92672">~</span><span style="color:#a6e22e">tidy</span>(., conf.int <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>))) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(model_resid <span style="color:#f92672">=</span> <span style="color:#a6e22e">map</span>(data, <span style="color:#f92672">~</span><span style="color:#a6e22e">lm</span>(treatment <span style="color:#f92672">~</span> country <span style="color:#f92672">+</span> <span style="color:#a6e22e">factor</span>(year), data <span style="color:#f92672">=</span> .)),
         treatment_resid <span style="color:#f92672">=</span> <span style="color:#a6e22e">map</span>(model_resid, <span style="color:#f92672">~</span><span style="color:#a6e22e">residuals</span>(.)),
         treatment_weight <span style="color:#f92672">=</span> <span style="color:#a6e22e">map</span>(treatment_resid, <span style="color:#f92672">~</span> . <span style="color:#f92672">/</span> <span style="color:#a6e22e">sum</span>(.^2)))

prop_negative_secondary <span style="color:#f92672">&lt;-</span> different_years_after_secondary <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">unnest</span>(<span style="color:#a6e22e">c</span>(data, treatment_resid, treatment_weight)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">group_by</span>(post_trt_years) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">summarize</span>(n_treated_negative_weight <span style="color:#f92672">=</span> <span style="color:#a6e22e">sum</span>(treatment_weight <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;</span> treatment <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>),
            n_treated <span style="color:#f92672">=</span> <span style="color:#a6e22e">sum</span>(treatment <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>),
            prop_treated_negative_weight <span style="color:#f92672">=</span> n_treated_negative_weight <span style="color:#f92672">/</span> n_treated) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(prop_nice <span style="color:#f92672">=</span> <span style="color:#a6e22e">percent</span>(prop_treated_negative_weight, accuracy <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>))

coefs_to_plot_secondary <span style="color:#f92672">&lt;-</span> different_years_after_secondary <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">unnest</span>(tidied)

<span style="color:#75715e"># Coefficient plot</span>
ate_primary <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(coefs_to_plot_primary, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> post_trt_years, y <span style="color:#f92672">=</span> estimate)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_hline</span>(yintercept <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#FF2E00&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_pointrange</span>(<span style="color:#a6e22e">aes</span>(ymin <span style="color:#f92672">=</span> conf.low, ymax <span style="color:#f92672">=</span> conf.high),
                  color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#0599B0&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, fatten <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;TWFE-based treatment effect&#34;</span>,
       title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Primary school enrollment&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_clean</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(axis.title.x <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>(),
        axis.text.x <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>())

ate_secondary <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(coefs_to_plot_secondary, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> post_trt_years, y <span style="color:#f92672">=</span> estimate)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_hline</span>(yintercept <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#FF2E00&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_pointrange</span>(<span style="color:#a6e22e">aes</span>(ymin <span style="color:#f92672">=</span> conf.low, ymax <span style="color:#f92672">=</span> conf.high),
                  color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#0599B0&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, fatten <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;TWFE-based treatment effect&#34;</span>,
       title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Secondary school enrollment&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_clean</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(axis.title.x <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>(),
        axis.text.x <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>())

<span style="color:#75715e"># Bar plot</span>
prop_neg_primary <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(<span style="color:#a6e22e">filter</span>(prop_negative_primary,
                                  prop_treated_negative_weight <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>),
                           <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> post_trt_years, y <span style="color:#f92672">=</span> prop_treated_negative_weight)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_col</span>(fill <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#FF4136&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_text</span>(<span style="color:#a6e22e">aes</span>(label <span style="color:#f92672">=</span> prop_nice),
            nudge_y <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.02</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">2.5</span>,
            family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Barlow Semi Condensed Bold&#34;</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#FF4136&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">coord_cartesian</span>(xlim <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">22</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Post-treatment years included&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>,
       subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;% of treated observations with negative weight&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_clean</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(panel.grid.major.y <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>(),
        axis.text.y <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>())

prop_neg_secondary <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(<span style="color:#a6e22e">filter</span>(prop_negative_secondary,
                                    prop_treated_negative_weight <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>),
                             <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> post_trt_years, y <span style="color:#f92672">=</span> prop_treated_negative_weight)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_col</span>(fill <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#FF4136&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_text</span>(<span style="color:#a6e22e">aes</span>(label <span style="color:#f92672">=</span> prop_nice),
            nudge_y <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.02</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">2.5</span>,
            family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Barlow Semi Condensed Bold&#34;</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#FF4136&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">coord_cartesian</span>(xlim <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">22</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Last year included in data&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>,
       subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;% of treated observations with negative weight&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_clean</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(panel.grid.major.y <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>(),
        axis.text.y <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>())

((ate_primary <span style="color:#f92672">/</span> prop_neg_primary) <span style="color:#f92672">+</span> <span style="color:#a6e22e">plot_layout</span>(heights <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0.8</span>, <span style="color:#ae81ff">0.2</span>))) <span style="color:#f92672">|</span>
  ((ate_secondary <span style="color:#f92672">/</span> prop_neg_secondary) <span style="color:#f92672">+</span> <span style="color:#a6e22e">plot_layout</span>(heights <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0.8</span>, <span style="color:#ae81ff">0.2</span>)))
</code></pre></div><p><img src="https://www.shagunjhaver.com/blog/2021/08/25/twfe-diagnostics/index_files/figure-html/robust-post-treatment-years-1.png" width="100%" style="display: block; margin: auto;" /></p>
<h3 id="exclude-individual-countries">Exclude individual countries</h3>
<p>Finally, since early adopter countries are more likely to have negative treatment weights, we can remove individual countries from the panel to see what their omission does to the overall TWFE estimate. For primary school enrollment, the ATE remains positive and significant across most specifications, except when Malawi, Uganda, or Namibia are excluded. But Malawi and Uganda were early adopters and thus have negatively weighted treatment observations in later years, as we saw earlier, which give them strange leverage in the the overall TWFE ATE calculation. For secondary schools, the effect remains basically zero and insignificant across all specifications except when Malawi is omitted, but that’s again because Malawi was an early adopter.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">fpe_omit_countries_primary <span style="color:#f92672">&lt;-</span> fpe_primary <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">arrange</span>(fpe_year, country) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(country_start <span style="color:#f92672">=</span> <span style="color:#a6e22e">paste0</span>(country, <span style="color:#e6db74">&#34; (&#34;</span>, fpe_year, <span style="color:#e6db74">&#34;)&#34;</span>),
         country_start <span style="color:#f92672">=</span> <span style="color:#a6e22e">fct_inorder</span>(country_start)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">distinct</span>(country, country_start) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(data <span style="color:#f92672">=</span> <span style="color:#a6e22e">map</span>(country, <span style="color:#f92672">~</span><span style="color:#a6e22e">filter</span>(fpe_primary, country <span style="color:#f92672">!=</span> .))) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(model <span style="color:#f92672">=</span> <span style="color:#a6e22e">map</span>(data, <span style="color:#f92672">~</span><span style="color:#a6e22e">lm_robust</span>(primary <span style="color:#f92672">~</span> treatment,
                                      fixed_effects <span style="color:#f92672">=</span> <span style="color:#f92672">~</span> country <span style="color:#f92672">+</span> year,
                                      data <span style="color:#f92672">=</span> .,
                                      clusters <span style="color:#f92672">=</span> country, se_type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;stata&#34;</span>))) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(tidied <span style="color:#f92672">=</span> <span style="color:#a6e22e">map</span>(model, <span style="color:#f92672">~</span><span style="color:#a6e22e">tidy</span>(., conf.int <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>)))

coefs_to_plot_primary <span style="color:#f92672">&lt;-</span> fpe_omit_countries_primary <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">unnest</span>(tidied)

fpe_omit_countries_secondary <span style="color:#f92672">&lt;-</span> fpe_secondary <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">arrange</span>(fpe_year, country) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(country_start <span style="color:#f92672">=</span> <span style="color:#a6e22e">paste0</span>(country, <span style="color:#e6db74">&#34; (&#34;</span>, fpe_year, <span style="color:#e6db74">&#34;)&#34;</span>),
         country_start <span style="color:#f92672">=</span> <span style="color:#a6e22e">fct_inorder</span>(country_start)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">distinct</span>(country, country_start)  <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(data <span style="color:#f92672">=</span> <span style="color:#a6e22e">map</span>(country, <span style="color:#f92672">~</span><span style="color:#a6e22e">filter</span>(fpe_secondary, country <span style="color:#f92672">!=</span> .))) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(model <span style="color:#f92672">=</span> <span style="color:#a6e22e">map</span>(data, <span style="color:#f92672">~</span><span style="color:#a6e22e">lm_robust</span>(secondary <span style="color:#f92672">~</span> treatment,
                                      fixed_effects <span style="color:#f92672">=</span> <span style="color:#f92672">~</span> country <span style="color:#f92672">+</span> year,
                                      data <span style="color:#f92672">=</span> .,
                                      clusters <span style="color:#f92672">=</span> country, se_type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;stata&#34;</span>))) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(tidied <span style="color:#f92672">=</span> <span style="color:#a6e22e">map</span>(model, <span style="color:#f92672">~</span><span style="color:#a6e22e">tidy</span>(., conf.int <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>)))

coefs_to_plot_secondary <span style="color:#f92672">&lt;-</span> fpe_omit_countries_secondary <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">unnest</span>(tidied)

ate_primary <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(coefs_to_plot_primary, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> estimate, y <span style="color:#f92672">=</span> <span style="color:#a6e22e">fct_rev</span>(country_start))) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_vline</span>(xintercept <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#FF2E00&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_pointrange</span>(<span style="color:#a6e22e">aes</span>(xmin <span style="color:#f92672">=</span> conf.low, xmax <span style="color:#f92672">=</span> conf.high),
                  color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#0599B0&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, fatten <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;TWFE-based treatment effect&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>,
       title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Primary school enrollment&#34;</span>,
       subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Each point represents the ATE when omitting the specified country&#34;</span>,
       caption <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Year that fees were eliminated is shown in parentheses&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">coord_cartesian</span>(xlim <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">-10</span>, <span style="color:#ae81ff">50</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_clean</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(panel.grid.major.y <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>())

ate_secondary <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(coefs_to_plot_secondary, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> estimate, y <span style="color:#f92672">=</span> <span style="color:#a6e22e">fct_rev</span>(country_start))) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_vline</span>(xintercept <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#FF2E00&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_pointrange</span>(<span style="color:#a6e22e">aes</span>(xmin <span style="color:#f92672">=</span> conf.low, xmax <span style="color:#f92672">=</span> conf.high),
                  color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#0599B0&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, fatten <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;TWFE-based treatment effect&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>,
       title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Secondary school enrollment&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">coord_cartesian</span>(xlim <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">-10</span>, <span style="color:#ae81ff">50</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_clean</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(panel.grid.major.y <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>())

ate_primary <span style="color:#f92672">|</span> ate_secondary
</code></pre></div><p><img src="https://www.shagunjhaver.com/blog/2021/08/25/twfe-diagnostics/index_files/figure-html/robust-drop-countries-1.png" width="100%" style="display: block; margin: auto;" /></p>
<h2 id="tldr-conclusion">tl;dr: Conclusion</h2>
<p><em><strong>Phew.</strong></em> That was a ton of code, but coding my way through this paper and translating Jakiela’s diagnostics and robustness checks from math into R was incredibly helpful for me to start understanding all this new TWFE stuff.</p>
<p>Here are the main tl;dr takeaways from her paper:</p>
<ul>
<li>We can think of OLS as a weighted sum of outcome values - these weights are typically negative for untreated observations and positive for treated observations</li>
<li>In TWFE situations, these weights take country and year into account</li>
<li>Because of mathy reasons, treated observations can actually get negative weights—especially countries that are early adopters, and country-year observations in later years</li>
<li>We can see if these negative weights on treated observations are an issue by using a couple simple diagnostics: see how many and which treated observations have negative weights, and see if the treatment effect is homogenous across treated countries</li>
<li>We can look at which treated observations have negative weights by making some plots and exploring the data</li>
<li>We can check for the homogeniety of the treatment effect by running a regression that uses the residualized treatment and treatment status to
explain the residualized outcome. If the slopes for treated and comparison observations are indistinguishable, we can safely assume treatment homogeneity.</li>
<li>Finally, we can check how robust the TWFE estimate is to negative treatment weights and the assumption of homogeneity by dropping specific types of observations and checking the ATE across these modified datasets</li>
</ul>
<h2 id="references">References</h2>
<div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-BakerLarckerWang:2021" class="csl-entry">
<p>Baker, Andrew, David F. Larcker, and Charles C. Y. Wang. 2021. “How Much Should We Trust Staggered Difference-in-Differences Estimates?” Working paper 246. Rock Center for Corporate Governance at Stanford University. <a href="https://doi.org/10.2139/ssrn.3794018">https://doi.org/10.2139/ssrn.3794018</a>.</p>
</div>
<div id="ref-CallawaySantAnna:2020" class="csl-entry">
<p>Callaway, Brantly, and Pedro H. C. Sant’Anna. 2020. “Difference-in-Differences with Multiple Time Periods.” <em>Journal of Econometrics</em>, December. <a href="https://doi.org/10.1016/j.jeconom.2020.12.001">https://doi.org/10.1016/j.jeconom.2020.12.001</a>.</p>
</div>
<div id="ref-de-ChaisemartindHaultfoeuille:2020" class="csl-entry">
<p>de Chaisemartin, Clément, and Xavier d’Haultfoeuille. 2020. “Two-Way Fixed Effects Estimators with Heterogeneous Treatment Effects.” <em>American Economic Review</em> 110 (9): 2964–96. <a href="https://doi.org/10.1257/aer.20181169">https://doi.org/10.1257/aer.20181169</a>.</p>
</div>
<div id="ref-Goodman-Bacon:2021" class="csl-entry">
<p>Goodman-Bacon, Andrew. 2021. “Difference-in-Differences with Variation in Treatment Timing.” <em>Journal of Econometrics</em>, June. <a href="https://doi.org/10.1016/j.jeconom.2021.03.014">https://doi.org/10.1016/j.jeconom.2021.03.014</a>.</p>
</div>
<div id="ref-Jakiela:2021" class="csl-entry">
<p>Jakiela, Pamela. 2021. “Simple Diagnostics for Two-Way Fixed Effects,” March. <a href="https://arxiv.org/abs/2103.13229">https://arxiv.org/abs/2103.13229</a>.</p>
</div>
<div id="ref-SunAbraham:2020" class="csl-entry">
<p>Sun, Liyang, and Sarah Abraham. 2020. “Estimating Dynamic Treatment Effects in Event Studies with Heterogeneous Treatment Effects.” <em>Journal of Econometrics</em>, December. <a href="https://doi.org/10.1016/j.jeconom.2020.09.006">https://doi.org/10.1016/j.jeconom.2020.09.006</a>.</p>
</div>
</div>
%!s(MISSING)]]></content>
        <category term="r" />
        <category term="tidyverse" />
        <category term="regression" />
        <category term="statistics" />
        <category term="data visualization" />
        <category term="econometrics" />
        <category term="panel data" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Exploring R² and regression variance with Euler/Venn diagrams]]></title>
        <link href="https://www.shagunjhaver.com/blog/2021/08/21/r2-euler/" rel="alternate" />
        <published>2021-08-21T00:00:00+00:00</published>
        <updated>2021-08-21T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2021/08/21/r2-euler/</id>
        <summary type="html"><![CDATA[Use R to correctly close backdoor confounding in panel data with marginal structural models and inverse probability weights with both GEE and multilevel models]]></summary>
        <content type="html"><![CDATA[<h2 id="contents----omit-in-toc---">Contents <!-- omit in toc --></h2>
<ul>
<li><a href="#regression-as-overlapping-circles">Regression as overlapping circles</a>
<ul>
<li><a href="#relationship-between-two-variables">Relationship between two variables</a></li>
<li><a href="#relationship-between-three-variables">Relationship between three variables</a></li>
<li><a href="#nicer-plot">Nicer plot</a></li>
<li><a href="#multicollinearity">Multicollinearity</a></li>
</ul>
</li>
<li><a href="#why-this-matters">Why this matters</a></li>
<li><a href="#caveats">Caveats</a></li>
<li><a href="#references">References</a></li>
</ul>
<hr>
<p>Regression is the core of my <a href="https://statsf18.classes.andrewheiss.com/">statistics</a> and <a href="https://evalf21.classes.andrewheiss.com/">program evaluation/causal inference</a> courses. As I’ve taught different stats classes, I’ve found that one of the regression diagnostic statistics that students really glom onto is <code>\(R^2\)</code>. Unlike lots of regression diagnostics like AIC, BIC, and the joint F-statistic, <code>\(R^2\)</code> has a really intuitive interpretation—it’s the percent of variation in the outcome variable explained by all the explanatory variables. For instance, let’s explain global life expectancy using GDP per capita, based on data from <a href="https://www.gapminder.org/">the Gapminder project</a>. Here’s the basic model:</p>
<p>$$
\widehat{\text{Life expectancy}} = \beta_0 + \beta_1 \text{GDP per capita} + \epsilon
$$</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">library</span>(tidyverse)     <span style="color:#75715e"># For ggplot, dplyr, and friends</span>
<span style="color:#a6e22e">library</span>(broom)         <span style="color:#75715e"># For converting models into data frames</span>
<span style="color:#a6e22e">library</span>(gapminder)     <span style="color:#75715e"># For health and wealth data</span>
<span style="color:#a6e22e">library</span>(faux)          <span style="color:#75715e"># For generating fake data</span>
<span style="color:#a6e22e">library</span>(eulerr)        <span style="color:#75715e"># For creating Euler and Venn diagrams</span>
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Just look at 2007</span>
gapminder_2007 <span style="color:#f92672">&lt;-</span> gapminder <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">filter</span>(year <span style="color:#f92672">==</span> <span style="color:#ae81ff">2007</span>)

super_naive_model <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lm</span>(lifeExp <span style="color:#f92672">~</span> gdpPercap, data <span style="color:#f92672">=</span> gapminder_2007)
<span style="color:#a6e22e">tidy</span>(super_naive_model)
<span style="color:#75715e">## # A tibble: 2 x 5</span>
<span style="color:#75715e">##   term         estimate std.error statistic   p.value</span>
<span style="color:#75715e">##   &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 (Intercept) 59.6      1.01           59.0 9.89e-101</span>
<span style="color:#75715e">## 2 gdpPercap    0.000637 0.0000583      10.9 1.69e- 20</span>
<span style="color:#a6e22e">glance</span>(super_naive_model)
<span style="color:#75715e">## # A tibble: 1 x 12</span>
<span style="color:#75715e">##   r.squared adj.r.squared sigma statistic  p.value    df logLik   AIC   BIC deviance</span>
<span style="color:#75715e">##       &lt;dbl&gt;         &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;</span>
<span style="color:#75715e">## 1     0.461         0.457  8.90      120. 1.69e-20     1  -511. 1028. 1037.   11086.</span>
<span style="color:#75715e">## # … with 2 more variables: df.residual &lt;int&gt;, nobs &lt;int&gt;</span>
</code></pre></div><p>This is an awful model on theoretical grounds, but whatever. A $1 increase in GDP per capita is associated with a 0.001 year increase in life expectancy, on average. Look at all those diagnostics though—AIC? BIC? LogLik? Those are important, but definitely not intuitive. The <code>\(R^2\)</code> value, on the other hand, is nice and interpretable. GDP per capita explains 46.1% of the variation in life expectancy. That’s soundbite-worthy. Students love it.</p>
<p>People also love to critique models based on it. In my program evaluation class, a model in one of my problem sets has an <code>\(R^2\)</code> of 0.02, and without fail, a majority of students dismiss it because of its low explanatory power. It only explains 2% of the variation in the outcome! It must be junk!</p>
<p>But low <code>\(R^2\)</code>s aren’t necessarily bad. And while saying that a model explains X% of the variation in an outcome, what does that even mean in practice?</p>
<p>So how the heck does <code>\(R^2\)</code> work anyway? I’ve struggled teaching this, but recently a friend mentioned that she teaches students to imagine <code>\(R^2\)</code> as a combination of overlapping circles, or a type of Venn diagram. I’d never heard of this approach before, so I went down a really interesting rabbit hole to discover that this approach has actually been used for decades! Let’s go down that rabbit hole together!</p>
<h2 id="regression-as-overlapping-circles">Regression as overlapping circles</h2>
<p>The earliest example I found is <a href="#ref-CohenCohen:1975">Cohen and Cohen</a> (<a href="#ref-CohenCohen:1975">1975</a>), who proposed visualizing the shared variance between 2–3 variables as a “ballantine” graph (apparently named after <a href="https://en.wikipedia.org/wiki/P._Ballantine_and_Sons_Brewing_Company">an ale logo</a>?), or what we call nowadays a Venn or Euler diagram. Others refined their approach, like <a href="#ref-Hunt:1986">Hunt</a> (<a href="#ref-Hunt:1986">1986</a>) who provides all sorts of fancy geometric equations to make them accurate (and provides some neat vintage Pascal code in the appendix!), and <a href="#ref-Ip:2001">Ip</a> (<a href="#ref-Ip:2001">2001</a>), who shows a bunch of different examples and highlights some of the limitations of using this approach.</p>
<p>For this ongoing example, we’ll simulate some correlated data using <a href="https://debruine.github.io/faux/">the <strong>faux</strong> package</a>. We could use real data, but as you’ll see, these diagrams are pretty finicky and fragile and generally need very tame data to work. Here we’ll create data with three variables that are normally distributed with these parameters:</p>
<ul>
<li><code>Y</code>: mean = 10, sd = 2</li>
<li><code>X1</code>: mean = 9, sd = 1.7</li>
<li><code>X2</code>: mean = 9, sd = 1.3</li>
</ul>
<p>We’ll make <code>Y</code> and <code>X1</code> be correlated at r = 0.5, <code>Y</code> and <code>X2</code> correlated at r = 0.3, and <code>X1</code> and <code>X2</code> correlated at r = 0.4:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">set.seed</span>(<span style="color:#ae81ff">1234</span>)
df <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">rnorm_multi</span>(n <span style="color:#f92672">=</span> <span style="color:#ae81ff">100</span>,
                  mu <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">9</span>),
                  sd <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">1.7</span>, <span style="color:#ae81ff">1.3</span>),
                  r <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0.5</span>, <span style="color:#ae81ff">0.3</span>, <span style="color:#ae81ff">0.4</span>),
                  varnames <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;Y&#34;</span>, <span style="color:#e6db74">&#34;X1&#34;</span>, <span style="color:#e6db74">&#34;X2&#34;</span>),
                  empirical <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>)

<span style="color:#75715e"># Look at the first few rows</span>
<span style="color:#a6e22e">head</span>(df)
<span style="color:#75715e">##       Y    X1    X2</span>
<span style="color:#75715e">## 1  8.22  6.73  8.38</span>
<span style="color:#75715e">## 2 10.17  9.36 10.12</span>
<span style="color:#75715e">## 3 12.03 10.32  9.86</span>
<span style="color:#75715e">## 4  5.41  5.80  8.38</span>
<span style="color:#75715e">## 5 10.10 10.08 10.09</span>
<span style="color:#75715e">## 6 11.13  9.11  9.94</span>

<span style="color:#75715e"># Check if the correlations worked</span>
<span style="color:#a6e22e">cor</span>(df)
<span style="color:#75715e">##        Y    X1    X2</span>
<span style="color:#75715e">## Y  1.000 0.453 0.373</span>
<span style="color:#75715e">## X1 0.453 1.000 0.468</span>
<span style="color:#75715e">## X2 0.373 0.468 1.000</span>
<span style="color:#75715e"># Close enough!</span>
</code></pre></div><p>In these regression diagrams, each variable is shown as a circle sized according to its variance, or:</p>
<p>$$
\operatorname{var} = \sigma^2 = \frac{\sum (\color{gray}{\overbrace{\color{black}{x_i}}^{\substack{\text{Single} \ \text{value}}}} - \color{gray}{\overbrace{\color{black}{\bar{x}}}^{\substack{\text{Mean of} \ \text{all values}}}\color{black}{)^2}}}{\color{gray}{\underbrace{\color{black}{n}}_{\substack{\text{Sample} \ \text{size}}}}-1}
$$</p>
<p>According to <a href="#ref-Ip:2001">Ip</a> (<a href="#ref-Ip:2001">2001</a>), you can also size the circles based on just the numerator of that equation, or the sum-of-squares, which is the same value proportionally number (it’s just not divided by <code>\(n-1\)</code>). It’s also easier to work with when plotting, so that’s what we’ll use throughout this example.</p>
<p>$$
\color{gray}{\overbrace{\color{black}{{\scriptstyle\sum} (x_i - \bar{x})^2}}^{\text{Sum of squares}}}
$$</p>
<p>We can even make a little function to calculate the sum of squares for us:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Sum of squares, or the numerator of the variance equation</span>
ss <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">function</span>(x) {
  <span style="color:#a6e22e">sum</span>((x <span style="color:#f92672">-</span> <span style="color:#a6e22e">mean</span>(x))^2)
}
</code></pre></div><p>Enough math, though—let’s make some plots! We’ll use <a href="https://cran.r-project.org/web/packages/eulerr/vignettes/introduction.html">the <strong>eulerr</strong> package</a> for this, since (1) it calculates proportional overlaps between circles (that’s the key technical difference between Venn and Euler diagram—Venn diagrams are supposed to have equally sized overlapping areas), and (2) it uses grid graphics, so it fits nicely in the ggplot ecosystem.</p>
<h3 id="relationship-between-two-variables">Relationship between two variables</h3>
<p>First let’s just look at the relationship between <code>Y</code> and <code>X1</code>. We’ll use the sum of squares to calculate the size for each circle:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">ss_y <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ss</span>(df<span style="color:#f92672">$</span>Y)
ss_x1 <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ss</span>(df<span style="color:#f92672">$</span>X1)

<span style="color:#a6e22e">plot</span>(<span style="color:#a6e22e">euler</span>(<span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;Y&#34;</span> <span style="color:#f92672">=</span> ss_y,
             <span style="color:#e6db74">&#34;X1&#34;</span> <span style="color:#f92672">=</span> ss_x1)),
     quantities <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>)
</code></pre></div><p><img src="https://www.shagunjhaver.com/blog/2021/08/21/r2-euler/index_files/figure-html/unrelated-vars-1.png" width="75%" style="display: block; margin: auto;" /></p>
<p>Just looking at this plot, we can see that <code>Y</code> has more variation than <code>X1</code>. Neat.</p>
<p>These two variables are related to each other though and have some covariance. We can calculate the shared covariance using <a href="https://en.wikipedia.org/wiki/Analysis_of_variance">ANOVA</a>. Ordinarily you need to feed R’s <code>anova()</code> function an <code>lm()</code> object to calculate different variance statistics (e.g. <code>anova(lm(Y ~ X1, data = df))</code>), but to save some typing, you can also use the <code>aov()</code> function to skip the intermediate <code>lm()</code> step. The nice thing about using the sum of squares values for these diagrams rather than variance values is that <code>aov()</code> reports its results as sums of squares, so we can use those results directly.</p>
<p>Let’s see how much of the variation between <code>Y</code> and <code>X1</code> is shared:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">aov</span>(Y <span style="color:#f92672">~</span> X1, data <span style="color:#f92672">=</span> df)
<span style="color:#75715e">## Call:</span>
<span style="color:#75715e">##    aov(formula = Y ~ X1, data = df)</span>
<span style="color:#75715e">## </span>
<span style="color:#75715e">## Terms:</span>
<span style="color:#75715e">##                  X1 Residuals</span>
<span style="color:#75715e">## Sum of Squares   82       318</span>
<span style="color:#75715e">## Deg. of Freedom   1        98</span>
<span style="color:#75715e">## </span>
<span style="color:#75715e">## Residual standard error: 1.8</span>
<span style="color:#75715e">## Estimated effects may be unbalanced</span>
</code></pre></div><p>If we look at the sum of squares row, we can see that 81.98 sum-of-squares units (whatever those mean) are shared between the two variables, with 317.87 not shared (or residual). To plot this overlap, we need to do a little bit of set theory math. We can’t just tell <code>Y</code> to be 399 units big—we need to subtract the shared space from both <code>Y</code> and <code>X1</code>. We’ll extract the sum of squares value from <code>aov()</code> (using <code>broom::tidy()</code> to make this easier):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">ss_both_y_x1 <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">aov</span>(Y <span style="color:#f92672">~</span> X1, data <span style="color:#f92672">=</span> df) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">tidy</span>() <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">filter</span>(term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;X1&#34;</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">pull</span>(sumsq)
ss_both_y_x1
<span style="color:#75715e">## [1] 82</span>

<span style="color:#a6e22e">plot</span>(<span style="color:#a6e22e">euler</span>(<span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;Y&#34;</span> <span style="color:#f92672">=</span> ss_y <span style="color:#f92672">-</span> ss_both_y_x1,
             <span style="color:#e6db74">&#34;X1&#34;</span> <span style="color:#f92672">=</span> ss_x1 <span style="color:#f92672">-</span> ss_both_y_x1,
             <span style="color:#e6db74">&#34;Y&amp;X1&#34;</span> <span style="color:#f92672">=</span> ss_both_y_x1)),
     quantities <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>)
</code></pre></div><p><img src="https://www.shagunjhaver.com/blog/2021/08/21/r2-euler/index_files/figure-html/plot-basic-overlap-1.png" width="75%" style="display: block; margin: auto;" /></p>
<p>Now we can visualize the covariance between these two variables! Let’s get rid of the raw numbers and add some letters for the different segments:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">plot</span>(<span style="color:#a6e22e">euler</span>(<span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;Y&#34;</span> <span style="color:#f92672">=</span> ss_y <span style="color:#f92672">-</span> ss_both_y_x1,
             <span style="color:#e6db74">&#34;X1&#34;</span> <span style="color:#f92672">=</span> ss_x1 <span style="color:#f92672">-</span> ss_both_y_x1,
             <span style="color:#e6db74">&#34;Y&amp;X1&#34;</span> <span style="color:#f92672">=</span> ss_both_y_x1)),
     quantities <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;A&#34;</span>, <span style="color:#e6db74">&#34;B&#34;</span>, <span style="color:#e6db74">&#34;C&#34;</span>))
</code></pre></div><p><img src="https://www.shagunjhaver.com/blog/2021/08/21/r2-euler/index_files/figure-html/plot-basic-overlap-labels-1.png" width="75%" style="display: block; margin: auto;" /></p>
<p>Area C here represents the amount of variation in <code>Y</code> explained by <code>X1</code>, while Area A represents the unexplained portion of <code>Y</code>. In regression language, A is basically the error term:</p>
<p>$$
\hat{Y} = \beta_0 + \beta_1 X_1 + \color{gray}{\overbrace{\epsilon}^{\color{black}{\text{A}}}}
$$</p>
<p>The great thing about visualizing this is that C also represents the <code>\(R^2\)</code>! In general, <code>\(R^2\)</code> is the ratio between explained and total variance:</p>
<p>$$
R^2 = \frac{\text{Explained variance in }Y}{\text{Total variance in }Y}
$$</p>
<p>Based on this diagram, we can write this as:</p>
<p>$$
R^2 = \frac{C}{A + C}
$$</p>
<p>Using actual numbers, we get</p>
<p>$$
R^2 = \frac{81.98}{317.87 + 81.98} = 0.205
$$</p>
<p>We can do this more precisely with code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">part_a <span style="color:#f92672">&lt;-</span> ss_y <span style="color:#f92672">-</span> ss_both_y_x1
part_c <span style="color:#f92672">&lt;-</span> ss_both_y_x1

part_c <span style="color:#f92672">/</span> (part_a <span style="color:#f92672">+</span> part_c)
<span style="color:#75715e">## [1] 0.205</span>
</code></pre></div><p>According to this, <code>X1</code> explains 20.5% of the variation in <code>Y</code>. That’s apparent visually—the overlapping space covers about 20% of the total <code>Y</code> circle.</p>
<p>Let’s run a regression model and check the <code>\(R^2\)</code> value to see if it’s the same:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">lm</span>(Y <span style="color:#f92672">~</span> X1, data <span style="color:#f92672">=</span> df) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">glance</span>() <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">pull</span>(r.squared)
<span style="color:#75715e">## [1] 0.205</span>
</code></pre></div><p>Incredible!! It’s the same! That’s so cool.</p>
<h3 id="relationship-between-three-variables">Relationship between three variables</h3>
<p>Where this gets even more useful is when we look at the overlapping space between three different variables. It’s also a little more complicated, since we need to calculate a bunch of different shared variances and do some set theory calculations to find the exact size of these different slivers of the diagram. Here’s a general diagram of what we’ll be calculating (this is unrelated to the data we’ve been working with and doesn’t use any actual numbers—it’s just a reference so we can find which shared variances we need to calculate):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">plot</span>(<span style="color:#a6e22e">euler</span>(<span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;Y&#34;</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>,
             <span style="color:#e6db74">&#34;X1&#34;</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>,
             <span style="color:#e6db74">&#34;X2&#34;</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>,
             <span style="color:#e6db74">&#34;X1&amp;Y&#34;</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>,
             <span style="color:#e6db74">&#34;X2&amp;Y&#34;</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>,
             <span style="color:#e6db74">&#34;X1&amp;X2&#34;</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>,
             <span style="color:#e6db74">&#34;Y&amp;X1&amp;X2&#34;</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.5</span>)),
     quantities <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#66d9ef">LETTERS</span>[1<span style="color:#f92672">:</span><span style="color:#ae81ff">7</span>]))
</code></pre></div><p><img src="https://www.shagunjhaver.com/blog/2021/08/21/r2-euler/index_files/figure-html/plot-generic-3-rings-1.png" width="75%" style="display: block; margin: auto;" /></p>
<p>This looks complicated, but the same principles apply. The entire circles for <code>Y</code>, <code>X1</code>, and <code>X2</code> represent each variable’s total variance. Overlapping areas represent shared variance. For instance, the combination of D and G here (or <code>\(A \cap B\)</code>) is the covariance that we calculated previously. The <code>\(R^2\)</code> is still here too—the total explained variance in <code>Y</code> is the combination of D, E, and G, while A is the residual unexplained variance. That means we can calculate <code>\(R^2\)</code> like this:</p>
<p>$$
\frac{D + E + G}{A + D + E + G}
$$</p>
<p>This visualization also helps with the intuition of <code>\(R^2\)</code>. Generally when you add additional variables to a regression model, the <code>\(R^2\)</code> increases. That’s because you’re adding another circle to the diagram and absorbing more of the variation in the outcome. For instance, even though the numbers in this diagram aren’t to scale at all, you can see that (D + G) (the <code>\(R^2\)</code> that we calculated in the two-variable diagram) is smaller than (D + E + G). There’s more explained variance here.</p>
<p>To calculate the actual values for each of these segments, we’ll use <code>aov()</code> again to find the shared variance. This will involve a lot of different calculations and some algebra to isolate each segment. This table will help us keep everything straight:</p>
<table>
<thead>
<tr>
<th style="text-align:left">Segment</th>
<th style="text-align:left">Explanation</th>
<th style="text-align:left">Code or algebra</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">A + D + E + G</td>
<td style="text-align:left">Total variation in <code>Y</code></td>
<td style="text-align:left"><code>ss(df$Y)</code> or <code>aov(Y ~ 1)</code></td>
</tr>
<tr>
<td style="text-align:left">B + D + F + G</td>
<td style="text-align:left">Total variation in <code>X1</code></td>
<td style="text-align:left"><code>ss(df$X1)</code> or <code>aov(X1 ~ 1)</code></td>
</tr>
<tr>
<td style="text-align:left">C + E + F + G</td>
<td style="text-align:left">Total variation in <code>X2</code></td>
<td style="text-align:left"><code>ss(df$X2)</code> or <code>aov(X2 ~ 1)</code></td>
</tr>
<tr>
<td style="text-align:left">A</td>
<td style="text-align:left">Unexplained variation in <code>Y</code> after accounting for <code>X1</code> and <code>X2</code></td>
<td style="text-align:left">Residuals from <code>aov(Y ~ X2 + X1)</code></td>
</tr>
<tr>
<td style="text-align:left">B</td>
<td style="text-align:left">Unexplained variation in <code>X1</code> after accounting for <code>Y</code> and <code>X2</code></td>
<td style="text-align:left">Residuals from <code>aov(X1 ~ Y + X2)</code></td>
</tr>
<tr>
<td style="text-align:left">C</td>
<td style="text-align:left">Unexplained variation in <code>X2</code> after accounting for <code>Y</code> and <code>X1</code></td>
<td style="text-align:left">Residuals from <code>aov(X2 ~ Y + X1)</code></td>
</tr>
<tr>
<td style="text-align:left">D + G</td>
<td style="text-align:left">Variance shared by <code>Y</code> and <code>X1</code></td>
<td style="text-align:left"><code>X1</code> in <code>aov(Y ~ X1)</code></td>
</tr>
<tr>
<td style="text-align:left">E + G</td>
<td style="text-align:left">Variance shared by <code>Y</code> and <code>X2</code></td>
<td style="text-align:left"><code>X2</code> in <code>aov(Y ~ X2)</code></td>
</tr>
<tr>
<td style="text-align:left">D + G</td>
<td style="text-align:left">Variance shared by <code>X1</code> and <code>X2</code></td>
<td style="text-align:left"><code>X2</code> in <code>aov(X1 ~ X2)</code></td>
</tr>
<tr>
<td style="text-align:left">D</td>
<td style="text-align:left">Variance <em>only</em> between <code>Y</code> and <code>X1</code>, without influence from <code>X2</code></td>
<td style="text-align:left">(A + D + E + G) − A − (E + G)</td>
</tr>
<tr>
<td style="text-align:left">E</td>
<td style="text-align:left">Variance <em>only</em> between <code>Y</code> and <code>X2</code>, without influence from <code>X1</code></td>
<td style="text-align:left">(C + E + F + G) − C − (F + G)</td>
</tr>
<tr>
<td style="text-align:left">F</td>
<td style="text-align:left">Variance <em>only</em> between <code>X1</code> and <code>X2</code>, without influence from <code>Y</code></td>
<td style="text-align:left">(B + D + F + G) − B − (D + G)</td>
</tr>
<tr>
<td style="text-align:left">G</td>
<td style="text-align:left">Variance shared by <code>Y</code>, <code>X1</code>, and <code>X2</code></td>
<td style="text-align:left">(D + G) − D</td>
</tr>
</tbody>
</table>
<p>PHEW. That’s <em>a lot</em>. Here’s all the code for it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">y_total <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ss</span>(df<span style="color:#f92672">$</span>Y)    <span style="color:#75715e"># A + D + E + G</span>
x1_total <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ss</span>(df<span style="color:#f92672">$</span>X1)  <span style="color:#75715e"># B + D + F + G</span>
x2_total <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ss</span>(df<span style="color:#f92672">$</span>X2)  <span style="color:#75715e"># C + E + F + G</span>

<span style="color:#75715e"># A</span>
y_alone <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">aov</span>(Y <span style="color:#f92672">~</span> X2 <span style="color:#f92672">+</span> X1, data <span style="color:#f92672">=</span> df) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">tidy</span>() <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">filter</span>(term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;Residuals&#34;</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">pull</span>(sumsq)

<span style="color:#75715e"># B</span>
x1_alone <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">aov</span>(X1 <span style="color:#f92672">~</span> Y <span style="color:#f92672">+</span> X2, data <span style="color:#f92672">=</span> df) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">tidy</span>() <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">filter</span>(term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;Residuals&#34;</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">pull</span>(sumsq)

<span style="color:#75715e"># C</span>
x2_alone <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">aov</span>(X2 <span style="color:#f92672">~</span> Y <span style="color:#f92672">+</span> X1, data <span style="color:#f92672">=</span> df) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">tidy</span>() <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">filter</span>(term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;Residuals&#34;</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">pull</span>(sumsq)

<span style="color:#75715e"># D + G</span>
y_plus_x1 <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">aov</span>(Y <span style="color:#f92672">~</span> X1, data <span style="color:#f92672">=</span> df) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">tidy</span>() <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">filter</span>(term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;X1&#34;</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">pull</span>(sumsq)

<span style="color:#75715e"># E + G</span>
y_plus_x2 <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">aov</span>(Y <span style="color:#f92672">~</span> X2, data <span style="color:#f92672">=</span> df) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">tidy</span>() <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">filter</span>(term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;X2&#34;</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">pull</span>(sumsq)

<span style="color:#75715e"># F + G</span>
x1_plus_x2 <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">aov</span>(X1 <span style="color:#f92672">~</span> X2, data <span style="color:#f92672">=</span> df) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">tidy</span>() <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">filter</span>(term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;X2&#34;</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">pull</span>(sumsq)

<span style="color:#75715e"># D = (A + D + E + G) − A − (E + G)</span>
y_x1_alone <span style="color:#f92672">&lt;-</span> y_total <span style="color:#f92672">-</span> y_alone <span style="color:#f92672">-</span> y_plus_x2

<span style="color:#75715e"># E = (A + D + E + G) − A − (D + G)</span>
y_x2_alone <span style="color:#f92672">&lt;-</span> y_total <span style="color:#f92672">-</span> y_alone <span style="color:#f92672">-</span> y_plus_x1

<span style="color:#75715e"># G = (D + G) − D</span>
y_x1_x2_alone <span style="color:#f92672">&lt;-</span> y_plus_x1 <span style="color:#f92672">-</span> y_x1_alone

<span style="color:#75715e"># F = (F + G) - G</span>
x1_x2_alone <span style="color:#f92672">&lt;-</span> x1_plus_x2 <span style="color:#f92672">-</span> y_x1_x2_alone
</code></pre></div><p>Again, that’s super complex, but it’s really just a ton of set theory algebra.</p>
<p>Now that we have all these little pieces, let’s plot them!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">all_pieces <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;Y&#34;</span> <span style="color:#f92672">=</span> y_alone,
                <span style="color:#e6db74">&#34;X1&#34;</span> <span style="color:#f92672">=</span> x1_alone,
                <span style="color:#e6db74">&#34;X2&#34;</span> <span style="color:#f92672">=</span> x2_alone,
                <span style="color:#e6db74">&#34;X1&amp;Y&#34;</span> <span style="color:#f92672">=</span> y_x1_alone,
                <span style="color:#e6db74">&#34;X2&amp;Y&#34;</span> <span style="color:#f92672">=</span> y_x2_alone,
                <span style="color:#e6db74">&#34;X1&amp;X2&#34;</span> <span style="color:#f92672">=</span> x1_x2_alone,
                <span style="color:#e6db74">&#34;Y&amp;X1&amp;X2&#34;</span> <span style="color:#f92672">=</span> y_x1_x2_alone)
all_pieces
<span style="color:#75715e">##       Y      X1      X2    X1&amp;Y    X2&amp;Y   X1&amp;X2 Y&amp;X1&amp;X2 </span>
<span style="color:#75715e">##   304.6   201.6   123.6    39.7    13.3    21.5    42.3</span>

<span style="color:#a6e22e">plot</span>(<span style="color:#a6e22e">euler</span>(all_pieces),
     quantities <span style="color:#f92672">=</span> <span style="color:#66d9ef">LETTERS</span>[1<span style="color:#f92672">:</span><span style="color:#ae81ff">7</span>])
</code></pre></div><p><img src="https://www.shagunjhaver.com/blog/2021/08/21/r2-euler/index_files/figure-html/plot-complex-1.png" width="75%" style="display: block; margin: auto;" /></p>
<p>These circles are now all proportional to the actual values in the data. Both <code>X1</code> and <code>X2</code> explain some of the variation in <code>Y</code>, but not a ton (and <code>X1</code> explains more than <code>X2</code>). The explained variance is represented by the area D + E + G, which means we can now calculate the actual <code>\(R^2\)</code>:</p>
<p>$$
R^2 = \frac{D + E + G}{A + D + E + G} = \frac{39.69 + 13.27 + 42.29}{304.6 + 39.69 + 13.27 + 42.29} = 0.238
$$</p>
<p>Or with code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">(y_x1_alone <span style="color:#f92672">+</span> y_x2_alone <span style="color:#f92672">+</span> y_x1_x2_alone) <span style="color:#f92672">/</span>
  (y_alone <span style="color:#f92672">+</span> y_x1_alone <span style="color:#f92672">+</span> y_x2_alone <span style="color:#f92672">+</span> y_x1_x2_alone)
<span style="color:#75715e">## [1] 0.238</span>
</code></pre></div><p>Let’s confirm it with a regression model:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">lm</span>(Y <span style="color:#f92672">~</span> X1 <span style="color:#f92672">+</span> X2, data <span style="color:#f92672">=</span> df) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">glance</span>() <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">pull</span>(r.squared)
<span style="color:#75715e">## [1] 0.238</span>
</code></pre></div><p>AMAZING. It’s the same. It worked!</p>
<h3 id="nicer-plot">Nicer plot</h3>
<p>With everything nice and proportional, let’s make this plot a little fancier for teaching purposes. Since <strong>eulerr</strong> uses grid-based graphics, we can use it with <a href="https://patchwork.data-imaginist.com/"><strong>patchwork</strong></a> to add annotations (or combine it with other ggplot objects if we really wanted to):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">library</span>(patchwork)  <span style="color:#75715e"># For combining ggplot and grid elements</span>
<span style="color:#a6e22e">library</span>(grid)       <span style="color:#75715e"># For making custom grid grobs</span>
<span style="color:#a6e22e">library</span>(latex2exp)  <span style="color:#75715e"># For writing LaTeX-like text with grid plots</span>

nice_plot <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">plot</span>(<span style="color:#a6e22e">euler</span>(all_pieces),
                  quantities <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(labels <span style="color:#f92672">=</span> <span style="color:#66d9ef">LETTERS</span>[1<span style="color:#f92672">:</span><span style="color:#ae81ff">7</span>],
                                    fontfamily <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Roboto Condensed Light&#34;</span>,
                                    fontsize <span style="color:#f92672">=</span> <span style="color:#ae81ff">16</span>),
                  fills <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(fill <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;#7FDBFF&#34;</span>, <span style="color:#e6db74">&#34;grey30&#34;</span>, <span style="color:#e6db74">&#34;grey80&#34;</span>,
                                        <span style="color:#e6db74">&#34;#FF851B&#34;</span>, <span style="color:#e6db74">&#34;#FF851B&#34;</span>, <span style="color:#e6db74">&#34;grey50&#34;</span>, <span style="color:#e6db74">&#34;#FF851B&#34;</span>),
                               alpha <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0.5</span>, <span style="color:#ae81ff">0.5</span>, <span style="color:#ae81ff">0.5</span>, <span style="color:#ae81ff">0.5</span>, <span style="color:#ae81ff">0.5</span>, <span style="color:#ae81ff">0.35</span>)),
                  labels <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(fontfamily <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Roboto Condensed&#34;</span>,
                                fontface <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bold&#34;</span>, fontsize <span style="color:#f92672">=</span> <span style="color:#ae81ff">20</span>))

math_part <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">textGrob</span>(<span style="color:#a6e22e">TeX</span>(<span style="color:#e6db74">&#34;R^2 = \\frac{D + E + G}{A + D + E + G}&#34;</span>),
                      gp <span style="color:#f92672">=</span> <span style="color:#a6e22e">gpar</span>(fontfamily <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Roboto Condensed&#34;</span>,
                                col <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;grey50&#34;</span>, fontsize <span style="color:#f92672">=</span> <span style="color:#ae81ff">13</span>))

<span style="color:#75715e"># Ordinarily patchwork works just fine with grid grob objects, like the results</span>
<span style="color:#75715e"># from plot.euler(), but *not* when they&#39;re the first element in patchwork chain</span>
<span style="color:#75715e"># of plots. To make grob objects work nicely with patchwork, we need to wrap</span>
<span style="color:#75715e"># them in wrap_elements()</span>
<span style="color:#a6e22e">wrap_elements</span>(nice_plot) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">inset_element</span>(math_part,
                left <span style="color:#f92672">=</span> <span style="color:#ae81ff">-0.04</span>, bottom <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.72</span>, right <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.3</span>, top <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.85</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">plot_annotation</span>(
    title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;R² represented as an Euler diagram&#34;</span>,
    subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Orange area (D + E + G) shows the total variance in\noutcome Y that is jointly explained by X1 and X2&#34;</span>,
    caption <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Circles sized according to each variable&#39;s sum of squares; size of overlapping areas\nis not 100% correct due to limitations in available geometric space&#34;</span>,
    theme <span style="color:#f92672">=</span> <span style="color:#a6e22e">theme</span>(plot.title <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_text</span>(size <span style="color:#f92672">=</span> <span style="color:#ae81ff">20</span>, family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Roboto Condensed&#34;</span>, face <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bold&#34;</span>),
                  plot.subtitle <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_text</span>(size <span style="color:#f92672">=</span> <span style="color:#ae81ff">15</span>, family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Roboto Condensed&#34;</span>),
                  plot.caption <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_text</span>(size <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>, family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Roboto Condensed Light&#34;</span>, hjust <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>))
  )
</code></pre></div><p><img src="https://www.shagunjhaver.com/blog/2021/08/21/r2-euler/index_files/figure-html/nice-plot-1.png" width="75%" style="display: block; margin: auto;" /></p>
<h3 id="multicollinearity">Multicollinearity</h3>
<p>Another neat feature of this kind of diagram is that it helps visualize <a href="https://en.wikipedia.org/wiki/Multicollinearity">multicollinearity</a>, or the issues that arise when you control for explanatory variables that explain the same kind of variation in the outcome. Multicollinearity leads to strange coefficient estimates and variance inflation because mathematically the regression model has no way of telling which of the highly correlated explanatory variables explain which parts of the outcome.</p>
<p>In the diagram, areas D and E are uniquely accounted for by <code>X1</code> and <code>X2</code> respectively, but G is is overlapped, making it impossible to know if <code>X1</code> or <code>X2</code> explains that portion of the variation in <code>Y</code>. Similarly, area F shows the variation shared by both <code>X1</code> and <code>X2</code>, and again it’s impossible to know which parts are unique. As a result, the area (F + G) represents the total multicollinearity in the model:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">plot</span>(<span style="color:#a6e22e">euler</span>(all_pieces),
     quantities <span style="color:#f92672">=</span> <span style="color:#66d9ef">LETTERS</span>[1<span style="color:#f92672">:</span><span style="color:#ae81ff">7</span>],
     fills <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#a6e22e">rep</span>(<span style="color:#e6db74">&#34;white&#34;</span>, <span style="color:#ae81ff">5</span>), <span style="color:#a6e22e">rep</span>(<span style="color:#e6db74">&#34;#FF4136&#34;</span>, <span style="color:#ae81ff">2</span>)))
</code></pre></div><p><img src="https://www.shagunjhaver.com/blog/2021/08/21/r2-euler/index_files/figure-html/plot-multicollinearity-1.png" width="75%" style="display: block; margin: auto;" /></p>
<h2 id="why-this-matters">Why this matters</h2>
<p>One really neat thing about thinking about <code>\(R^2\)</code> this way is that it highlights a key difference in the purposes of regression: prediction and estimation.</p>
<p>With prediction, the goal of the regression model is to predict the outcome as accurately as possible. This is what Netflix does when guessing what show you might want to watch next, or what the <a href="https://earlywarningproject.ushmm.org/">US Holocaust Museum does to predict genocide and human rights abuses</a>. You throw in as many control variables as you can in order to create a model that explains variation in Y as accurately as possible. As a result, these kinds of models will typically have a high <code>\(R^2\)</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">plot</span>(<span style="color:#a6e22e">euler</span>(<span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;Next show\non Netflix&#34;</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>,
             <span style="color:#e6db74">&#34;X1&#34;</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>,
             <span style="color:#e6db74">&#34;X2&#34;</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">6</span>,
             <span style="color:#e6db74">&#34;X3&#34;</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>,
             <span style="color:#e6db74">&#34;X4&#34;</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">6</span>,
             <span style="color:#e6db74">&#34;X5&#34;</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">6</span>,
             <span style="color:#e6db74">&#34;X1&amp;Next show\non Netflix&#34;</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>,
             <span style="color:#e6db74">&#34;X2&amp;Next show\non Netflix&#34;</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>,
             <span style="color:#e6db74">&#34;X3&amp;Next show\non Netflix&#34;</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>,
             <span style="color:#e6db74">&#34;X4&amp;Next show\non Netflix&#34;</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>,
             <span style="color:#e6db74">&#34;X5&amp;Next show\non Netflix&#34;</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>,
             <span style="color:#e6db74">&#34;X1&amp;X2&#34;</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>,
             <span style="color:#e6db74">&#34;Next show\non Netflix&amp;X1&amp;X2&#34;</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.5</span>)))
</code></pre></div><p><img src="https://www.shagunjhaver.com/blog/2021/08/21/r2-euler/index_files/figure-html/plot-diagram-prediction-1.png" width="75%" style="display: block; margin: auto;" /></p>
<p>Look at that squishy little area of Y that’s not explained by any of the other variables. Neato.</p>
<p>In the realm of causal inference in social science, or with estimation in general, the focus of the analysis is on <em>a single X variable</em> , like whether or not people in the sample participated in a social program. You might include a bunch of control variables if you identification strategy tells you do: an interaction term for time and group if you’re using <a href="https://evalf21.classes.andrewheiss.com/example/diff-in-diff/">difference-in-differences</a>, an indicator showing if people are above/below a threshold if you’re using <a href="https://evalf21.classes.andrewheiss.com/example/rdd/">regression discontinuity</a>, an instrument if you’re using <a href="https://evalf21.classes.andrewheiss.com/example/iv/">instrumental variables</a>, confounding control variables if you’re using <a href="https://evalf21.classes.andrewheiss.com/example/matching-ipw/">inverse probability weighting and a DAG</a>, or nothing(!) if you’re using a <a href="https://evalf21.classes.andrewheiss.com/example/rcts/">randomized controlled trial</a> (like you can really just run <code>lm(Y ~ treatment)</code>!). Each of these types of models will inevitably return an <code>\(R^2\)</code> value, since that what regression does, but we care less about that when estimating causal effects. All we care about is the accuracy of one little sliver of the diagram—that single policy lever that we might have control over to influence the larger outcome.</p>
<p>For instance, let’s say you’re a new little nonprofit who created a cool new program to help reduce childhood poverty within your city. You want to know if that program does anything to poverty more generally. You have lots of donor money so you decide to run a carefully designed randomized trial. You run a regression model and get a tiny <code>\(R^2\)</code> value, like 0.015. You panic because that means your experiment only explains 1.5% of the variation in poverty, and that seems really bad and low!</p>
<p>But that’s actually totally fine. The goal with the experiment is <em>not</em> to explain all the factors that create poverty—there are far too many to include in a regression model. The goal here is to have an accurate estimate of how much your single program affects poverty. There’s <em>no way</em> your little program is going to explain 80% of the variation in poverty. If you had a high <code>\(R^2\)</code>, I’d be incredibly worried! (Unless you really discovered a program that is a true silver bullet for poverty!)</p>
<p>Looking at an Euler diagram demonstrates this more easily. All we care about in this experiment is that little sliver. Is it accurate? Does the treatment move the needle on poverty in any way? If so, great!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">plot</span>(<span style="color:#a6e22e">euler</span>(<span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;Poverty&#34;</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">100</span>,
             <span style="color:#e6db74">&#34;Program&#34;</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>,
             <span style="color:#e6db74">&#34;Poverty&amp;Program&#34;</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.25</span>)),
     fills <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;white&#34;</span>, <span style="color:#e6db74">&#34;grey75&#34;</span>, <span style="color:#e6db74">&#34;#FF851B&#34;</span>))
</code></pre></div><p><img src="https://www.shagunjhaver.com/blog/2021/08/21/r2-euler/index_files/figure-html/plot-diagram-estimation-1.png" width="75%" style="display: block; margin: auto;" /></p>
<p>So don’t dismiss models immediately just because of a low <code>\(R^2\)</code>! The purpose of the models matters!</p>
<h2 id="caveats">Caveats</h2>
<p>There are a few important caveats to keep in mind with these diagrams:</p>
<p><strong>1: This is inefficient</strong></p>
<p>Calculating each of these plot segments by hand is tedious and there will inevitably be typos and errors (there are probably errors in this very post!). Also, due to how ANOVA works, the order of the variables you specify matters <em>a lot</em>: <code>aov(Y ~ X1 + X2)</code> and <code>aov(Y ~ X2 + X1)</code> give completely different sum of squares for the joint variation of <code>Y</code>, <code>X1</code>, and <code>X2</code>. That in turn changes the sizes of the segments.</p>
<p>When writing this, I spent way too much time playing with covariance matrices, partial correlation matrices, and variance-covariance matrices to see if I could calculate these areas more mathematically using the guts of regression and ANOVA, but it was too tricky. Smarter people than me will need to figure it out.</p>
<p><strong>2: This doesn’t work in all cases</strong></p>
<p>It’s possible to have negative areas, depending on the data you have, and negative areas are unplottable (<a href="#ref-Ip:2001">Ip</a> (<a href="#ref-Ip:2001">2001</a>) shows an example of this at the end of his article). In order to use this kind of diagram when teaching, you have to use carefully constructed data—you can’t just throw any model into a chart like this. Also, when working with actual numbers, you’re generally limited to just one or two explanatory variables. Any more and the math gets too complex.</p>
<p><strong>3: This isn’t 100% accurate</strong></p>
<p>The geometry behind creating these Euler diagrams is complex and doesn’t always work perfectly. Let’s plot the actual values of the sum of squares for each segment:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">plot</span>(<span style="color:#a6e22e">euler</span>(all_pieces),
     quantities <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>)
</code></pre></div><p><img src="https://www.shagunjhaver.com/blog/2021/08/21/r2-euler/index_files/figure-html/plot-complex-values-1.png" width="75%" style="display: block; margin: auto;" /></p>
<p>That central piece where <code>Y</code>, <code>X1</code>, and <code>X2</code> is 42, but it’s smaller any of the other intersections, which all have smaller sum-of-squares values. Yikes!</p>
<p>The <strong>eulerr</strong> package provides a way of diagnosing how bad things are by either inspecting the results of <code>euler()</code> directly, or looking at the residuals and errors with <code>error_plot()</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">euler</span>(all_pieces)
<span style="color:#75715e">##         original fitted residuals regionError</span>
<span style="color:#75715e">## Y          304.6  303.9     0.742       0.001</span>
<span style="color:#75715e">## X1         201.6  200.3     1.326       0.001</span>
<span style="color:#75715e">## X2         123.6  121.3     2.319       0.002</span>
<span style="color:#75715e">## Y&amp;X1        39.7   47.6    -7.953       0.011</span>
<span style="color:#75715e">## Y&amp;X2        13.3   26.5   -13.236       0.018</span>
<span style="color:#75715e">## X1&amp;X2       21.5   33.0   -11.541       0.016</span>
<span style="color:#75715e">## Y&amp;X1&amp;X2     42.3   10.7    31.558       0.042</span>
<span style="color:#75715e">## </span>
<span style="color:#75715e">## diagError: 0.042 </span>
<span style="color:#75715e">## stress:    0.009</span>

<span style="color:#a6e22e">error_plot</span>(<span style="color:#a6e22e">euler</span>(all_pieces),
           quantities <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>)
</code></pre></div><p><img src="https://www.shagunjhaver.com/blog/2021/08/21/r2-euler/index_files/figure-html/plot-errors-1.png" width="75%" style="display: block; margin: auto;" /></p>
<p>That central piece is underrepresented, while the other intersections are overrepresented. Alas.</p>
<h2 id="references">References</h2>
<div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-CohenCohen:1975" class="csl-entry">
<p>Cohen, Jacob, and Patricia Cohen. 1975. <em>Applied Multiple Regression/Correlation Analysis for the Behavioral Sciences</em>. New Jersey: Lawrence Erlbaum Associates.</p>
</div>
<div id="ref-Hunt:1986" class="csl-entry">
<p>Hunt, Earl. 1986. “The Design of Ballantines.” <em>Behavior Research Methods, Instruments, &amp; Computers</em> 28 (May): 277–84. <a href="https://doi.org/10.3758/BF03204399">https://doi.org/10.3758/BF03204399</a>.</p>
</div>
<div id="ref-Ip:2001" class="csl-entry">
<p>Ip, Edward H. S. 2001. “Visualizing Multiple Regression.” <em>Journal of Statistics Education</em> 9 (1). <a href="https://doi.org/10.1080/10691898.2001.11910646">https://doi.org/10.1080/10691898.2001.11910646</a>.</p>
</div>
</div>
%!s(MISSING)]]></content>
        <category term="r" />
        <category term="tidyverse" />
        <category term="regression" />
        <category term="statistics" />
        <category term="data visualization" />
    </entry>
    <entry>
        <title type="html"><![CDATA[AFC Richmond / Ted Lasso cross stitch pattern]]></title>
        <link href="https://www.shagunjhaver.com/blog/2021/07/20/afc-richmond-ted-lasso-cross-stitch/" rel="alternate" />
        <published>2021-07-20T00:00:00+00:00</published>
        <updated>2021-07-20T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2021/07/20/afc-richmond-ted-lasso-cross-stitch/</id>
        <summary type="html"><![CDATA[Make your own Ted Lasso AFC Richmond crest cross stitch with a free pattern and an Illustrator template]]></summary>
        <content type="html"><![CDATA[<div class="alert alert-info"><a href="#downloads">Jump to the downloads</a> and get your own free pattern and template files!</div>
<p>Apparently I now only produce <a href="/blog/tags/cross-stitch/">cross stitch content</a>. Thanks, pandemic.</p>
<p>In preparation for season 2 of the incredible <em>Ted Lasso</em>, I made a cross stitch version of the AFC Richmond crest, and I&rsquo;m really happy with how it turned out!</p>
<p><img src="afc-richmond-cross-stitch.jpg" alt="A cross stitched AFC Richmond crest" title="A cross stitched AFC Richmond crest"></p>
<p>For the world&rsquo;s enjoyment, and to spread the cheer of Ted Lasso, I&rsquo;ve provided the template—along with the raw Illustrator file—for free! (With a Creative Commons license.)</p>
<p>Believe!</p>
<p><span id="downloads">Download everything here:</span></p>
<ul>
<li><a href="afc-richmond-cross-stitch.pdf">AFC Richmond crest cross stitch PDF</a> (v1.0, 2021-07-20)</li>
<li><a href="afc-richmond-cross-stitch.ai">AFC Richmond crest cross stitch Illustrator file</a></li>
</ul>
<p><a href="afc-richmond-cross-stitch.pdf"><img src="afc-richmond-cross-stitch.png" alt="AFC Richmond crest, from Ted Lasso" title="AFC Richmond crest, from Ted Lasso"></a></p>
%!s(MISSING)]]></content>
        <category term="art" />
        <category term="cross stitch" />
        <category term="pandemic boredom" />
        <category term="ted lasso" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Hex sticker/logo cross stitch pattern]]></title>
        <link href="https://www.shagunjhaver.com/blog/2021/07/10/hex-cross-stitch/" rel="alternate" />
        <published>2021-07-10T00:00:00+00:00</published>
        <updated>2021-07-10T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2021/07/10/hex-cross-stitch/</id>
        <summary type="html"><![CDATA[Make your own data science hex logo cross stitch with a free pattern and an Illustrator template]]></summary>
        <content type="html"><![CDATA[<div class="alert alert-info"><a href="#downloads">Jump to the downloads</a> and get your own free pattern and template files!</div>
<p>In the data science world, hex stickers with logos of developers' favorite packages are all the rage. People collect them at conferences and events and display them on their laptops (or, like me, keep them in a pile on their desk because they&rsquo;re too afraid to commit to affixing them anywhere permanently). There are even <a href="http://hexb.in/sticker.html">official standard dimensions</a> and <a href="https://github.com/terinjokes/StickersStandard">templates</a> people can follow.</p>
<p>Just for fun, I make hex logos for each of my classes (<a href="https://evalsp21.classes.andrewheiss.com/">program evaluation/causal inference</a>, <a href="https://econs21.classes.andrewheiss.com/">microeconomics</a>, and <a href="https://datavizs21.classes.andrewheiss.com/">data visualization</a>)—see all <a href="https://github.com/andrewheiss/hex-stickers">my class and package hex logos here</a>—and in non-pandemic times I print them and hand them out to students at the beginning of class. They look awesome.</p>
<p><img src="class-hexes.png" alt="Course-specific hex logos" title="Course-specific hex logos"></p>
<p>Continuing my pandemic art kick (on this, the four hundred and eighty-fifth day of sheltering in place), and following my foray into cross stitch (like <a href="https://www.andrewheiss.com/blog/2021/01/26/bayesian-cross-stitch-sampler/">this Bayesian Sampler</a>), I decided to make cross stitch versions of my hex logos. So I stuck my program evaluation logo into Illustrator, pixel-art-ified it by hand, and made the thing.</p>
<p><img src="eval-cross-stitch.jpg" alt="A cross stitched hex logo" title="A cross stitched hex logo"></p>
<p>The design is a generic <a href="https://en.wikipedia.org/wiki/Directed_acyclic_graph">DAG</a> showing an exposure, an outcome, an indirect effect, a confounder, and a collider; the color palette comes from the viridis inferno scale, generated with <code>viridisLite::viridis(8, option = &quot;inferno&quot;, begin = 0.1, end = 0.9)</code> in R.</p>
<p>To help the world create hex logo cross stitch art, I&rsquo;ve provided the Illustrator file for free! (with a Creative Commons license). Make your own designs—just delete the stuff on the Text and Pattern layers and add little rectangles filled with some color + a 0.5 point white stroke.</p>
<p><span id="downloads">Download everything here!</span></p>
<ul>
<li><a href="hex-sticker-template.pdf">Hex logo cross stitch PDF</a> (v1.0, 2021-02-15)</li>
<li><a href="hex-sticker-template.ai">Hex logo cross stitch Illustrator file</a></li>
</ul>
<p><a href="hex-sticker-template.pdf"><img src="eval-template.png" alt="A Bayesian sampler" title="A Bayesian sampler"></a></p>
%!s(MISSING)]]></content>
        <category term="art" />
        <category term="cross stitch" />
        <category term="pandemic boredom" />
        <category term="data science" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Bayesian (cross stitch) sampler]]></title>
        <link href="https://www.shagunjhaver.com/blog/2021/01/26/bayesian-cross-stitch-sampler/" rel="alternate" />
        <published>2021-01-26T00:00:00+00:00</published>
        <updated>2021-01-26T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2021/01/26/bayesian-cross-stitch-sampler/</id>
        <summary type="html"><![CDATA[Make your own Bayesian cross stitch sampler with a free pattern of Bayes Theorem and the accompanying Illustrator template]]></summary>
        <content type="html"><![CDATA[<div class="alert alert-info"><a href="#downloads">Jump to the downloads</a> and get your own free pattern!</div>
<p>For my latest pandemic art medium (on this, the three hundred and nineteenth day of sheltering in place), I decided to teach myself how to cross stitch. I did a ton of needlepoint as a kid and teen, but was always afraid of cross stitch because it was so much smaller and more delicate.</p>
<p>I somehow stumbled across <a href="https://sgibson91.github.io/cross-stitch-carpentry/index.html">this lesson repository</a> created by The Carpentries, an organization that normally teaches workshops on reproducible research and data scientific software like R and Python. This nifty <a href="https://sgibson91.github.io/cross-stitch-carpentry/index.html">Cross Stitch Carpentry</a> workshop is incredibly helpful and easy to follow, and after downloading <a href="https://t.co/7d0BS3A0K9">a pattern from Etsy</a>, I successfully made my first cross stitched thing: <a href="https://twitter.com/andrewheiss/status/1353172960119566336?s=21">a miniature porg</a>.</p>
<p>I next wanted to make something related to my work with data and stats. In July, I made <a href="https://twitter.com/andrewheiss/status/1287200192647827459?s=21">a linocut print of the R logo</a>, so I considered doing that with cross stitch too, but that seemed like a lot of thread. Also, I couldn’t find a good way to make a good pattern. There’s <a href="https://github.com/glasnt/ih">a neat Python program named <strong>ih</strong></a> that automatically creates embroidery and cross stitch patterns from images, and there are plenty of (sketchy?) online resources for converting images to patterns (they probably rely on <strong>ih</strong> behind the scenes?), but I like having more control over the output.</p>
<p>After lots of googling, I found that <a href="https://blog.stitchpeople.com/creating-graph-templates/">you can use Adobe Illustrator to create cross stitch patterns</a> (there’s an archived Facebook Live video <a href="https://www.facebook.com/stitchpeople/videos/day-1-of-cross-stitch-a-portrait-with-lizzy/512456752992667/">showing the process here</a>), which is perfect, since I use Illustrator all the time.</p>
<p>So I drew the formula for <a href="https://en.wikipedia.org/wiki/Bayes%27_theorem">Bayes’ theorem</a> with little boxes, added some flourishes and borders, and made my first cross stitch pattern, which I then made into an actual cross stitch: a Bayesian <a href="https://mc-stan.org/docs/2_26/reference-manual/hamiltonian-monte-carlo.html">sampler</a>!</p>
<p><img src="sampler-photo.jpg" alt="A cross stitched Bayesian sampler" title="A cross stitched Bayesian sampler"></p>
<p>The color palette is inspired from the jewel colors of the 2021 inauguration (via Cianna Bedford-Petersen’s <a href="https://github.com/ciannabp/inauguration">R package</a>). The density plots in the corners and center are stylized prior and posterior distributions. The borders on the top and bottom are stylized trace plots showing intertwined <a href="https://en.wikipedia.org/wiki/Markov_chain_Monte_Carlo">MCMC chains</a>.</p>
<p>I’ve polished the pattern in Illustrator and released it for free! (with a Creative Commons license). I’ve also provided the original Illustrator file so that you can make your own designs—just delete the stuff on the Text and Pattern layers and add little rectangles filled with some color + a 0.5 point white stroke.</p>
<p><span id="downloads">Download everything here!</span></p>
<ul>
<li><a href="bayesian-sampler.pdf">“Bayesian Sampler” PDF</a> (v1.0, 2021-01-25)</li>
<li><a href="bayesian-sampler-paginated.pdf">“Bayesian Sampler” paginated PDF</a></li>
<li><a href="bayesian-sampler.ai">“Bayesian Sampler” Illustrator file</a></li>
</ul>
<p><a href="bayesian-sampler.pdf"><img src="bayesian-sampler.png" alt="A Bayesian sampler" title="A Bayesian sampler"></a></p>
%!s(MISSING)]]></content>
        <category term="art" />
        <category term="cross stitch" />
        <category term="pandemic boredom" />
        <category term="bayes" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Marginal structural models for panel data with GEE and multilevel models]]></title>
        <link href="https://www.shagunjhaver.com/blog/2021/01/15/msm-gee-multilevel/" rel="alternate" />
        <published>2021-01-15T00:00:00+00:00</published>
        <updated>2021-01-15T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2021/01/15/msm-gee-multilevel/</id>
        <summary type="html"><![CDATA[Use R to correctly close backdoor confounding in panel data with marginal structural models and inverse probability weights with both GEE and multilevel models]]></summary>
        <content type="html"><![CDATA[<script src="/blog/2021/01/15/msm-gee-multilevel/index_files/kePrint-0.0.1/kePrint.js"></script>
<link href="/blog/2021/01/15/msm-gee-multilevel/index_files/lightable-0.0.1/lightable.css" rel="stylesheet" />
<script src="/blog/2021/01/15/msm-gee-multilevel/index_files/kePrint-0.0.1/kePrint.js"></script>
<link href="/blog/2021/01/15/msm-gee-multilevel/index_files/lightable-0.0.1/lightable.css" rel="stylesheet" />
<script src="/blog/2021/01/15/msm-gee-multilevel/index_files/kePrint-0.0.1/kePrint.js"></script>
<link href="/blog/2021/01/15/msm-gee-multilevel/index_files/lightable-0.0.1/lightable.css" rel="stylesheet" />
<p>Since my last two blog posts on <a href="https://www.andrewheiss.com/blog/2020/12/01/ipw-binary-continuous/">binary and continuous inverse probability weights (IPWs)</a> and <a href="https://www.andrewheiss.com/blog/2020/12/03/ipw-tscs-msm/">marginal structural models (MSMs) for time-series cross-sectional (TSCS) panel data</a>, I’ve spent a ton of time trying to figure out why I couldn’t recover the exact causal effect I had built in to those examples when using panel data. It was a mystery, and it took weeks to figure out what was happening.</p>
<p>After poring through all sorts of articles on MSMs and TSCS data like <a href="#ref-ThoemmesOng:2016">Thoemmes and Ong</a> (<a href="#ref-ThoemmesOng:2016">2016</a>) and <a href="#ref-BlackwellGlynn:2018">Blackwell and Glynn</a> (<a href="#ref-BlackwellGlynn:2018">2018</a>), along with all sorts of articles on the differences between <a href="https://en.wikipedia.org/wiki/Generalized_estimating_equation">generalized estimating equations (GEEs)</a>, which the epidemiology world (and everyone who does MSMs) seems to love, and multilevel models (which I find a lot more intuitive, and which can be done Bayesianly with <strong>brms</strong>), I <em>finally</em> figured out what was wrong and how to calculate correct IPWs for panel data.</p>
<p>The main issue lies in the synthetic data I had created for those earlier blog posts. <a href="https://www.andrewheiss.com/blog/2020/12/03/ipw-tscs-msm/#simulated-time-series-cross-sectional-data">There, I used the <strong>fabricatr</strong> package to create a country-year panel</a>, which seemed correct and great. However, it didn’t exactly match the data-generating process in situations where the value in one time period (like <code>\(X_t\)</code>) depends on the value from the previous time period (or <code>\(X_{t-1}\)</code>), or autocorrelation. As such, I couldn’t quite get the correct causal effects out (since the data didn’t show interdepdency across time).</p>
<p>After lots of struggle, though, I finally figured out a way to explicitly build this autocorrelation in. And thanks to this delightfully accessible article by <a href="#ref-ThoemmesOng:2016">Thoemmes and Ong</a> (<a href="#ref-ThoemmesOng:2016">2016</a>) (<a href="https://anthonyongphd.files.wordpress.com/2016/02/emerging-adulthood-2016-thoemmes-40-59.pdf">ungated free version here</a>), I found clear code for MSMs that I could expand to test on more complex panel data.</p>
<p>In this post, I’ll do a few things: (1) recreate the two-time-period example from Thoemmes and Ong’s appendix (which is stuck in a PDF and really hard to copy/paste out), (2) redo their two-period example with a tidier approach, and (3) expand their two-period approach to multiple years and replace GEEs with multilevel models.</p>
<p>Here we go!</p>
<h2 id="contents----omit-in-toc---">Contents <!-- omit in toc --></h2>
<ul>
<li><a href="#synthetic-data-overview">Synthetic data overview</a></li>
<li><a href="#original-two-period-thoemmes-and-ong-results">Original two-period Thoemmes and Ong results</a></li>
<li><a href="#tidier-two-period-results">Tidier two-period results</a></li>
<li><a href="#expansion-to-multiple-period-data">Expansion to multiple-period data</a>
<ul>
<li><a href="#tricky-interdependent-data-generating-process">Tricky interdependent data generating process</a></li>
<li><a href="#multiple-period-marginal-structural-models">Multiple-period marginal structural models</a></li>
</ul>
</li>
<li><a href="#questions-for-the-future">Questions for the future</a></li>
<li><a href="#references">References</a></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">library</span>(tidyverse)
<span style="color:#a6e22e">library</span>(broom)
<span style="color:#a6e22e">library</span>(ggdag)
<span style="color:#a6e22e">library</span>(dagitty)
<span style="color:#a6e22e">library</span>(ipw)  <span style="color:#75715e"># For automatically calculating IPWs</span>
<span style="color:#a6e22e">library</span>(geepack)  <span style="color:#75715e"># For GEE models</span>
<span style="color:#a6e22e">library</span>(lme4)  <span style="color:#75715e"># For mixed/multilevel models</span>
<span style="color:#a6e22e">library</span>(broom.mixed)
<span style="color:#a6e22e">library</span>(kableExtra)
</code></pre></div><h2 id="synthetic-data-overview">Synthetic data overview</h2>
<p>In their paper, Thoemmes and Ong create simulated data based on this DAG, with a time-varying treatment, a non-time-varying confounder, and a time-varying outcome (depression):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># I generally prefer the easier-to-read formula syntax in dagify() (i.e. D1 ~ T1</span>
<span style="color:#75715e"># + C, etc.), but it doesn&#39;t work with subscripted numbers like T[1], so we have</span>
<span style="color:#75715e"># to use this dagitty syntax instead</span>
depression_dag <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">dagitty</span>(<span style="color:#e6db74">&#39;dag {
</span><span style="color:#e6db74">&#34;C&#34; [pos=&#34;2.5,2&#34;]
</span><span style="color:#e6db74">&#34;T[1]&#34; [pos=&#34;1,1&#34;]
</span><span style="color:#e6db74">&#34;D[1]&#34; [pos=&#34;2,1&#34;]
</span><span style="color:#e6db74">&#34;T[2]&#34; [pos=&#34;3,1&#34;]
</span><span style="color:#e6db74">&#34;D[2]&#34; [pos=&#34;4,1&#34;]
</span><span style="color:#e6db74">&#34;C&#34; -&gt; &#34;D[1]&#34;
</span><span style="color:#e6db74">&#34;C&#34; -&gt; &#34;D[2]&#34;
</span><span style="color:#e6db74">&#34;C&#34; -&gt; &#34;T[1]&#34;
</span><span style="color:#e6db74">&#34;C&#34; -&gt; &#34;T[2]&#34;
</span><span style="color:#e6db74">&#34;D[1]&#34; -&gt; &#34;T[2]&#34;
</span><span style="color:#e6db74">&#34;T[1]&#34; -&gt; &#34;D[1]&#34;
</span><span style="color:#e6db74">&#34;T[2]&#34; -&gt; &#34;D[2]&#34;
</span><span style="color:#e6db74">}&#39;</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">tidy_dagitty</span>()

<span style="color:#a6e22e">ggplot</span>(depression_dag, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> y, xend <span style="color:#f92672">=</span> xend, yend <span style="color:#f92672">=</span> yend)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_edges</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_point</span>(color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;grey80&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">12</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_text</span>(color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;black&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>, parse <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_dag</span>()
</code></pre></div><p><img src="/blog/2021/01/15/msm-gee-multilevel/index_files/figure-html/depression-dag-1.png" width="75%" style="display: block; margin: auto;" /></p>
<p>Essentially earlier treatment ($T_1$) causes some level of depression ($D_1$), which causes later treatment ($T_2$), which causes later depression ($D_2$). This whole chain is influenced by some non-varying confounder ($C$).</p>
<h2 id="original-two-period-thoemmes-and-ong-results">Original two-period Thoemmes and Ong results</h2>
<p>Here’s the original code from the appendix of <a href="#ref-ThoemmesOng:2016">Thoemmes and Ong</a> (<a href="#ref-ThoemmesOng:2016">2016</a>) for data with a time-varying continuous treatment and a confounder. It explicitly creates columns for <code>t1</code>, <code>d1</code>, <code>t2</code>, and <code>d2</code>, so it is easy to mathematically make it so that <code>t2</code> is caused by <code>d1</code>.</p>
<p>Because it’s only two time periods, they calculate the inverse probability weights in two formulas and then multiply them together:</p>
<ul>
<li>
<p>Weights for the first time period:</p>
<p>$$
w_1 = \frac{\phi(T_{i1})}{\phi(T_{i1}\ |\ C)}
$$</p>
</li>
<li>
<p>Weights for the second time period:</p>
<p>$$
w_2 = \frac{\phi(T_{i2}\ |\ T_{i1})}{\phi(T_{i2}\ |\ C, T_{i1}, D_{i1})}
$$</p>
</li>
<li>
<p>Final weights:</p>
<p>$$
w = w_1 \cdot w_2
$$</p>
</li>
</ul>
<p>Here’s their code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e">##################################################################### </span>
<span style="color:#75715e"># iptw demo with time-varying continuous treatment and confounder</span>
<span style="color:#75715e">#####################################################################</span>
<span style="color:#75715e"># Felix Thoemmes, October, 2015 </span>
<span style="color:#75715e">#####################################################################</span>

<span style="color:#75715e">#set seed to replicate results</span>
<span style="color:#a6e22e">set.seed</span>(<span style="color:#ae81ff">12345</span>)
<span style="color:#75715e">#define sample size</span>
n <span style="color:#f92672">&lt;-</span> <span style="color:#ae81ff">2000</span>
<span style="color:#75715e">#define confounder c</span>
c <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">rnorm</span>(n,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">1</span>)
<span style="color:#75715e">#define treatment at time 1 as function of confounder</span>
t1 <span style="color:#f92672">&lt;-</span> <span style="color:#ae81ff">.1</span><span style="color:#f92672">*</span>c <span style="color:#f92672">+</span> <span style="color:#a6e22e">rnorm</span>(n,<span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">sqrt</span>(<span style="color:#ae81ff">.99</span>))
<span style="color:#75715e">#define depression at time 1 as function of confounder and treat1</span>
d1 <span style="color:#f92672">&lt;-</span> <span style="color:#ae81ff">.1</span><span style="color:#f92672">*</span>c <span style="color:#f92672">+</span> <span style="color:#ae81ff">.4</span><span style="color:#f92672">*</span>t1 <span style="color:#f92672">+</span> <span style="color:#a6e22e">rnorm</span>(n,<span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">sqrt</span>(<span style="color:#ae81ff">.822</span>))
<span style="color:#75715e">#define treatment at time 2 as function of confounder and dep1</span>
t2 <span style="color:#f92672">&lt;-</span> <span style="color:#ae81ff">.1</span><span style="color:#f92672">*</span>c <span style="color:#f92672">+</span> <span style="color:#ae81ff">.4</span><span style="color:#f92672">*</span>d1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">.4</span><span style="color:#f92672">*</span>t1 <span style="color:#f92672">+</span> <span style="color:#a6e22e">rnorm</span>(n,<span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">sqrt</span>(<span style="color:#ae81ff">.5196</span>))
<span style="color:#75715e">#define outcome depression at time 2 as function of confounder, treat1, and dep1 </span>
d2 <span style="color:#f92672">&lt;-</span> <span style="color:#ae81ff">.1</span><span style="color:#f92672">*</span>c <span style="color:#f92672">+</span> <span style="color:#ae81ff">.4</span><span style="color:#f92672">*</span>t2 <span style="color:#f92672">+</span> <span style="color:#ae81ff">.4</span><span style="color:#f92672">*</span>d1 <span style="color:#f92672">+</span> <span style="color:#a6e22e">rnorm</span>(n,<span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">sqrt</span>(<span style="color:#ae81ff">.4582</span>))
<span style="color:#75715e">#add ID variable to do mixed effects models later</span>
id <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">rep</span>(<span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#a6e22e">length</span>(c))

df1 <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">data.frame</span>(id, c, t1, d1, t2, d2)

<span style="color:#75715e">#compute the weights for timepoint 1</span>
<span style="color:#75715e">#this is a continuous treatment</span>
<span style="color:#75715e">#therefore we use densities of normal distributions</span>
<span style="color:#75715e">#weights at time 1</span>
w1 <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">dnorm</span>(df1<span style="color:#f92672">$</span>t1, <span style="color:#a6e22e">predict</span>(<span style="color:#a6e22e">lm</span>(t1 <span style="color:#f92672">~</span> <span style="color:#ae81ff">1</span>)), <span style="color:#a6e22e">sd</span>(<span style="color:#a6e22e">lm</span>(t1 <span style="color:#f92672">~</span> <span style="color:#ae81ff">1</span>)<span style="color:#f92672">$</span>residuals)) <span style="color:#f92672">/</span> 
  <span style="color:#a6e22e">dnorm</span>(df1<span style="color:#f92672">$</span>t1, <span style="color:#a6e22e">predict</span>(<span style="color:#a6e22e">lm</span>(t1 <span style="color:#f92672">~</span> c)), <span style="color:#a6e22e">sd</span>(<span style="color:#a6e22e">lm</span>(t1 <span style="color:#f92672">~</span> c)<span style="color:#f92672">$</span>residuals))

<span style="color:#75715e">#weights at time 2</span>
w2 <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">dnorm</span>(df1<span style="color:#f92672">$</span>t2, <span style="color:#a6e22e">predict</span>(<span style="color:#a6e22e">lm</span>(t2 <span style="color:#f92672">~</span> t1)), <span style="color:#a6e22e">sd</span>(<span style="color:#a6e22e">lm</span>(t2 <span style="color:#f92672">~</span> t1)<span style="color:#f92672">$</span>residuals)) <span style="color:#f92672">/</span> 
  <span style="color:#a6e22e">dnorm</span>(df1<span style="color:#f92672">$</span>t2, <span style="color:#a6e22e">predict</span>(<span style="color:#a6e22e">lm</span>(t2 <span style="color:#f92672">~</span> c <span style="color:#f92672">+</span> d1 <span style="color:#f92672">+</span> t1)), <span style="color:#a6e22e">sd</span>(<span style="color:#a6e22e">lm</span>(t2 <span style="color:#f92672">~</span> c <span style="color:#f92672">+</span> d1 <span style="color:#f92672">+</span> t1)<span style="color:#f92672">$</span>residuals)) 

<span style="color:#75715e">#total weights are a product of all time-varying weights</span>
w <span style="color:#f92672">&lt;-</span> w1<span style="color:#f92672">*</span>w2

<span style="color:#75715e">#truncate weights at 5%</span>
tw1 <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ifelse</span>(w <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">quantile</span>(w, probs <span style="color:#f92672">=</span> <span style="color:#ae81ff">.05</span>), <span style="color:#a6e22e">quantile</span>(w, probs <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.05</span>), w)
tw1 <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ifelse</span>(w <span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">quantile</span>(w, probs <span style="color:#f92672">=</span> <span style="color:#ae81ff">.95</span>), <span style="color:#a6e22e">quantile</span>(w, probs <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.95</span>), tw1)

<span style="color:#75715e">#truncate weights at 1%</span>
tw2 <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ifelse</span>(w <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">quantile</span>(w, probs <span style="color:#f92672">=</span> <span style="color:#ae81ff">.01</span>), <span style="color:#a6e22e">quantile</span>(w, probs <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.01</span>), w)
tw2 <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ifelse</span>(w <span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">quantile</span>(w, probs <span style="color:#f92672">=</span> <span style="color:#ae81ff">.99</span>), <span style="color:#a6e22e">quantile</span>(w, probs <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.99</span>), tw2)
</code></pre></div><p>They they run a bunch of different outcome models with <code>geeglm()</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">only_t1 <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">geeglm</span>(d2 <span style="color:#f92672">~</span> t1, data <span style="color:#f92672">=</span> df1, id <span style="color:#f92672">=</span> <span style="color:#a6e22e">rownames</span>(df1))
only_t2 <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">geeglm</span>(d2 <span style="color:#f92672">~</span> t2, data <span style="color:#f92672">=</span> df1, id <span style="color:#f92672">=</span> <span style="color:#a6e22e">rownames</span>(df1))
both_t <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">geeglm</span>(d2 <span style="color:#f92672">~</span> t1 <span style="color:#f92672">+</span> t2, data <span style="color:#f92672">=</span> df1, id <span style="color:#f92672">=</span> <span style="color:#a6e22e">rownames</span>(df1))
both_t_c <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">geeglm</span>(d2 <span style="color:#f92672">~</span> t1 <span style="color:#f92672">+</span> t2 <span style="color:#f92672">+</span> c <span style="color:#f92672">+</span> d1, data <span style="color:#f92672">=</span> df1, id <span style="color:#f92672">=</span> <span style="color:#a6e22e">rownames</span>(df1))

stab_ipw <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">geeglm</span>(d2 <span style="color:#f92672">~</span> t1 <span style="color:#f92672">+</span> t2, data <span style="color:#f92672">=</span> df1, id <span style="color:#f92672">=</span> <span style="color:#a6e22e">rownames</span>(df1), weights <span style="color:#f92672">=</span> w)
stab_ipw_1p <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">geeglm</span>(d2 <span style="color:#f92672">~</span> t1 <span style="color:#f92672">+</span> t2, data <span style="color:#f92672">=</span> df1, id <span style="color:#f92672">=</span> <span style="color:#a6e22e">rownames</span>(df1), weights <span style="color:#f92672">=</span> tw2)
stab_ipw_5p <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">geeglm</span>(d2 <span style="color:#f92672">~</span> t1 <span style="color:#f92672">+</span> t2, data <span style="color:#f92672">=</span> df1, id <span style="color:#f92672">=</span> <span style="color:#a6e22e">rownames</span>(df1), weights <span style="color:#f92672">=</span> tw1)

results <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">tribble</span>(
  <span style="color:#f92672">~</span>`Method`, <span style="color:#f92672">~</span>`T&lt;sub&gt;1&lt;/sub&gt; effect`, <span style="color:#f92672">~</span>`T&lt;sub&gt;2&lt;/sub&gt; effect`,
  <span style="color:#e6db74">&#34;True effect&#34;</span>, <span style="color:#ae81ff">0.160</span>, <span style="color:#ae81ff">0.400</span>,
  <span style="color:#e6db74">&#34;Naive, only T1&#34;</span>, <span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">tidy</span>(only_t1), term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;t1&#34;</span>)<span style="color:#f92672">$</span>estimate, <span style="color:#66d9ef">NA</span>,
  <span style="color:#e6db74">&#34;Naive, only T2&#34;</span>, <span style="color:#66d9ef">NA</span>, <span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">tidy</span>(only_t2), term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;t2&#34;</span>)<span style="color:#f92672">$</span>estimate,
  <span style="color:#e6db74">&#34;Naive, both&#34;</span>, <span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">tidy</span>(both_t), term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;t1&#34;</span>)<span style="color:#f92672">$</span>estimate, <span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">tidy</span>(both_t), term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;t2&#34;</span>)<span style="color:#f92672">$</span>estimate,
  <span style="color:#e6db74">&#34;Naive, both + controls&#34;</span>, <span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">tidy</span>(both_t_c), term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;t1&#34;</span>)<span style="color:#f92672">$</span>estimate, <span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">tidy</span>(both_t_c), term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;t2&#34;</span>)<span style="color:#f92672">$</span>estimate,
  <span style="color:#e6db74">&#34;IPW&#34;</span>, <span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">tidy</span>(stab_ipw), term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;t1&#34;</span>)<span style="color:#f92672">$</span>estimate, <span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">tidy</span>(stab_ipw), term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;t2&#34;</span>)<span style="color:#f92672">$</span>estimate,
  <span style="color:#e6db74">&#34;IPW, 1% truncated&#34;</span>, <span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">tidy</span>(stab_ipw_1p), term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;t1&#34;</span>)<span style="color:#f92672">$</span>estimate, <span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">tidy</span>(stab_ipw_1p), term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;t2&#34;</span>)<span style="color:#f92672">$</span>estimate,
  <span style="color:#e6db74">&#34;IPW, 5% truncated&#34;</span>, <span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">tidy</span>(stab_ipw_5p), term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;t1&#34;</span>)<span style="color:#f92672">$</span>estimate, <span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">tidy</span>(stab_ipw_5p), term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;t2&#34;</span>)<span style="color:#f92672">$</span>estimate
)
</code></pre></div><table style="width:70%; margin-left: auto; margin-right: auto;" class=" pure-table pure-table-horizontal">
<thead>
<tr>
<th style="text-align:left;">
Method
</th>
<th style="text-align:right;">
T<sub>1</sub> effect
</th>
<th style="text-align:right;">
T<sub>2</sub> effect
</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">
True effect
</td>
<td style="text-align:right;">
0.160
</td>
<td style="text-align:right;">
0.400
</td>
</tr>
<tr>
<td style="text-align:left;">
Naive, only T1
</td>
<td style="text-align:right;">
0.423
</td>
<td style="text-align:right;">
—
</td>
</tr>
<tr>
<td style="text-align:left;">
Naive, only T2
</td>
<td style="text-align:right;">
—
</td>
<td style="text-align:right;">
0.649
</td>
</tr>
<tr>
<td style="text-align:left;">
Naive, both
</td>
<td style="text-align:right;">
0.048
</td>
<td style="text-align:right;">
0.623
</td>
</tr>
<tr>
<td style="text-align:left;">
Naive, both + controls
</td>
<td style="text-align:right;">
0.011
</td>
<td style="text-align:right;">
0.399
</td>
</tr>
<tr>
<td style="text-align:left;">
IPW
</td>
<td style="text-align:right;">
0.157
</td>
<td style="text-align:right;">
0.421
</td>
</tr>
<tr>
<td style="text-align:left;">
IPW, 1% truncated
</td>
<td style="text-align:right;">
0.154
</td>
<td style="text-align:right;">
0.434
</td>
</tr>
<tr>
<td style="text-align:left;">
IPW, 5% truncated
</td>
<td style="text-align:right;">
0.131
</td>
<td style="text-align:right;">
0.480
</td>
</tr>
</tbody>
</table>
<p>And here’s all that compared to what they have in the paper:</p>
<p><img src="ThoemmesOng-Table2.png" width="50%" style="display: block; margin: auto;" /></p>
<p>It’s identical! I’m chalking any tiny differences up to the fact that <code>set.seed()</code> changed with R 4.0 and they used R 3.x in their paper. (Also the T2-only model is wrong, but that’s probably a typo—the “estimated scale parameter” from that model is 0.574 with an sd of 0.018, which lines up perfectly with the coefficient in the published table, so I think maybe the published paper has the wrong number in the table.)</p>
<p>Also, there seems to be another typo in that table. The true effect of T1 in the table is 0.140, but in the text of the paper, it says the effect should be 0.160, which makes sense—that’s the product of 0.4 × 0.4, or each of the treatment coefficients ($0.4 \times 0.4 = 0.16$).</p>
<p>Regardless of those super tiny insignificant typos, we did it! We have their exact results using marginal structural models and inverse probability weights.</p>
<h2 id="tidier-two-period-results">Tidier two-period results</h2>
<p>The code to generate that data isn’t very tidyverse-friendly and it creates a ton of intermediate vectors. Here’s a cleaner version with <strong>dplyr</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">set.seed</span>(<span style="color:#ae81ff">12345</span>)
n <span style="color:#f92672">&lt;-</span> <span style="color:#ae81ff">2000</span>

df_nice <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">tibble</span>(id <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">:</span>n,
                  c <span style="color:#f92672">=</span> <span style="color:#a6e22e">rnorm</span>(n, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(t1 <span style="color:#f92672">=</span> (<span style="color:#ae81ff">0.1</span> <span style="color:#f92672">*</span> c) <span style="color:#f92672">+</span> <span style="color:#a6e22e">rnorm</span>(n, <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">sqrt</span>(<span style="color:#ae81ff">0.99</span>)),
         d1 <span style="color:#f92672">=</span> (<span style="color:#ae81ff">0.1</span> <span style="color:#f92672">*</span> c) <span style="color:#f92672">+</span> (<span style="color:#ae81ff">0.4</span> <span style="color:#f92672">*</span> t1) <span style="color:#f92672">+</span> <span style="color:#a6e22e">rnorm</span>(n, <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">sqrt</span>(<span style="color:#ae81ff">0.822</span>)),
         t2 <span style="color:#f92672">=</span> (<span style="color:#ae81ff">0.1</span> <span style="color:#f92672">*</span> c) <span style="color:#f92672">+</span> (<span style="color:#ae81ff">0.4</span> <span style="color:#f92672">*</span> d1) <span style="color:#f92672">+</span> (<span style="color:#ae81ff">0.4</span> <span style="color:#f92672">*</span> t1) <span style="color:#f92672">+</span> <span style="color:#a6e22e">rnorm</span>(n, <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">sqrt</span>(<span style="color:#ae81ff">0.5196</span>)),
         d2 <span style="color:#f92672">=</span> (<span style="color:#ae81ff">0.1</span> <span style="color:#f92672">*</span> c) <span style="color:#f92672">+</span> (<span style="color:#ae81ff">0.4</span> <span style="color:#f92672">*</span> t2) <span style="color:#f92672">+</span> (<span style="color:#ae81ff">0.4</span> <span style="color:#f92672">*</span> d1) <span style="color:#f92672">+</span> <span style="color:#a6e22e">rnorm</span>(n, <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">sqrt</span>(<span style="color:#ae81ff">0.4582</span>)))
</code></pre></div><p>Also, this original data is wide, with explicit columns for each time period. Let’s make it tidy and pretend the time periods are years (<code>y</code>) and add some lagged columns:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">df_tidy <span style="color:#f92672">&lt;-</span> df_nice <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">pivot_longer</span>(cols <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(t1, d1, t2, d2)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">separate</span>(name, into <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;variable&#34;</span>, <span style="color:#e6db74">&#34;y&#34;</span>), sep <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">pivot_wider</span>(names_from <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;variable&#34;</span>, values_from <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;value&#34;</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">group_by</span>(id) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(<span style="color:#a6e22e">across</span>(<span style="color:#a6e22e">c</span>(t, d), <span style="color:#a6e22e">list</span>(lag <span style="color:#f92672">=</span> lag))) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">ungroup</span>()
<span style="color:#a6e22e">head</span>(df_tidy)
<span style="color:#75715e">## # A tibble: 6 x 7</span>
<span style="color:#75715e">##      id      c y           t       d  t_lag   d_lag</span>
<span style="color:#75715e">##   &lt;int&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;</span>
<span style="color:#75715e">## 1     1  0.586 1     -0.546  -1.11   NA     NA     </span>
<span style="color:#75715e">## 2     1  0.586 2     -0.853  -1.73   -0.546 -1.11  </span>
<span style="color:#75715e">## 3     2  0.709 1      1.14    0.361  NA     NA     </span>
<span style="color:#75715e">## 4     2  0.709 2     -0.0673 -1.30    1.14   0.361 </span>
<span style="color:#75715e">## 5     3 -0.109 1     -0.584  -0.0822 NA     NA     </span>
<span style="color:#75715e">## 6     3 -0.109 2     -0.932   0.535  -0.584 -0.0822</span>
</code></pre></div><p>This is how panel data is typically structured, with rows repeated for each time period. This is good because we can figure out how to structure the weight models and outcome model in a way that uses this structure and compare it to the original <code>t1</code>, <code>d1</code>, etc. models.</p>
<p>Because there are only two time periods, the lagged columns here are missing a ton of data (since you can’t see what the value is for year 0), but it’ll still work.</p>
<p>With the data like this, we can find the weights. We’ll do it both manually and with the <strong>ipw</strong> package.</p>
<p>Manually, we need to fit two models (a numerator and denominator) and then take the cumulative product of their probability distributions:</p>
<p>$$
w = \prod^t_{t = 1} \frac{\phi(T_{it} | T_{i, t-1}, C_i)}{\phi(T_{it} | T_{i, t-1}, D_{i, t-1}, C_i)}
$$</p>
<p>Here we go!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Remove NAs since ipwpoint() will complain</span>
df_tidy_sans_na <span style="color:#f92672">&lt;-</span> df_tidy <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">filter</span>(<span style="color:#f92672">!</span><span style="color:#a6e22e">is.na</span>(t_lag))

<span style="color:#75715e"># Manually</span>
<span style="color:#75715e"># Numerator is lagged treatment + non-varying confounders</span>
model_num <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lm</span>(t <span style="color:#f92672">~</span> t_lag <span style="color:#f92672">+</span> c,
                data <span style="color:#f92672">=</span> df_tidy_sans_na)

<span style="color:#75715e"># Denominator is lagged treatment, lagged outcome, time-varying confounders +</span>
<span style="color:#75715e"># non-varying confounders</span>
model_denom <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lm</span>(t <span style="color:#f92672">~</span> t_lag <span style="color:#f92672">+</span> d_lag <span style="color:#f92672">+</span> c, 
                  data <span style="color:#f92672">=</span> df_tidy_sans_na)

<span style="color:#75715e"># Probability distributions</span>
num <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">dnorm</span>(df_tidy_sans_na<span style="color:#f92672">$</span>t,
             <span style="color:#a6e22e">predict</span>(model_num),
             <span style="color:#a6e22e">sd</span>(<span style="color:#a6e22e">residuals</span>(model_num)))

den <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">dnorm</span>(df_tidy_sans_na<span style="color:#f92672">$</span>t,
             <span style="color:#a6e22e">predict</span>(model_denom),
             <span style="color:#a6e22e">sd</span>(<span style="color:#a6e22e">residuals</span>(model_denom)))

<span style="color:#75715e"># Make num/den fraction and find cumulative product within each id</span>
df_weights_manual <span style="color:#f92672">&lt;-</span> df_tidy_sans_na <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(weights_no_time <span style="color:#f92672">=</span> num <span style="color:#f92672">/</span> den) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">group_by</span>(id) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(ipw <span style="color:#f92672">=</span> <span style="color:#a6e22e">cumprod</span>(weights_no_time)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">ungroup</span>()

<span style="color:#75715e"># Automatically find weights with ipw::ipwpoint()</span>
tidy_weights_auto <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ipwpoint</span>(
  exposure <span style="color:#f92672">=</span> t,
  family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;gaussian&#34;</span>, 
  numerator <span style="color:#f92672">=</span> <span style="color:#f92672">~</span> t_lag <span style="color:#f92672">+</span> c, 
  denominator <span style="color:#f92672">=</span> <span style="color:#f92672">~</span> t_lag <span style="color:#f92672">+</span> d_lag <span style="color:#f92672">+</span> c, 
  data <span style="color:#f92672">=</span> <span style="color:#a6e22e">as.data.frame</span>(df_tidy_sans_na))

df_weights_auto <span style="color:#f92672">&lt;-</span> df_tidy_sans_na <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(ipw <span style="color:#f92672">=</span> tidy_weights_auto<span style="color:#f92672">$</span>ipw.weights)
</code></pre></div><p>Now we can use these new weights in the outcome model:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">model_lags_manual <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">geeglm</span>(d <span style="color:#f92672">~</span> t <span style="color:#f92672">+</span> t_lag, data <span style="color:#f92672">=</span> df_weights_manual,
                            id <span style="color:#f92672">=</span> id, weights <span style="color:#f92672">=</span> ipw)

model_lags_auto <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">geeglm</span>(d <span style="color:#f92672">~</span> t <span style="color:#f92672">+</span> t_lag, data <span style="color:#f92672">=</span> df_weights_auto, 
                          id <span style="color:#f92672">=</span> id, weights <span style="color:#f92672">=</span> ipw)

results <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">tribble</span>(
  <span style="color:#f92672">~</span>`Method`, <span style="color:#f92672">~</span>`T&lt;sub&gt;1&lt;/sub&gt; effect`, <span style="color:#f92672">~</span>`T&lt;sub&gt;2&lt;/sub&gt; effect`,
  <span style="color:#e6db74">&#34;True effect&#34;</span>, <span style="color:#ae81ff">0.160</span>, <span style="color:#ae81ff">0.400</span>,
  <span style="color:#e6db74">&#34;IPW, original&#34;</span>, <span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">tidy</span>(stab_ipw), term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;t1&#34;</span>)<span style="color:#f92672">$</span>estimate, <span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">tidy</span>(stab_ipw), term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;t2&#34;</span>)<span style="color:#f92672">$</span>estimate,
  <span style="color:#e6db74">&#34;IPW, lagged, manual&#34;</span>, <span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">tidy</span>(model_lags_manual), term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;t_lag&#34;</span>)<span style="color:#f92672">$</span>estimate, <span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">tidy</span>(model_lags_manual), term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;t&#34;</span>)<span style="color:#f92672">$</span>estimate,
  <span style="color:#e6db74">&#34;IPW, lagged, automatic&#34;</span>, <span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">tidy</span>(model_lags_auto), term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;t_lag&#34;</span>)<span style="color:#f92672">$</span>estimate, <span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">tidy</span>(model_lags_auto), term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;t&#34;</span>)<span style="color:#f92672">$</span>estimate
) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(<span style="color:#a6e22e">across</span>(<span style="color:#ae81ff">2</span><span style="color:#f92672">:</span><span style="color:#ae81ff">3</span>, <span style="color:#f92672">~</span><span style="color:#a6e22e">sprintf</span>(<span style="color:#e6db74">&#34;%.3f&#34;</span>, <span style="color:#a6e22e">round</span>(., <span style="color:#ae81ff">3</span>)))) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">add_row</span>(`T&lt;sub&gt;1&lt;/sub&gt; effect` <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&lt;b&gt;lag(T) effect&lt;/b&gt;&#34;</span>, 
          `T&lt;sub&gt;2&lt;/sub&gt; effect` <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&lt;b&gt;T effect&lt;/b&gt;&#34;</span>, 
          .after <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>)
</code></pre></div><table style="width:70%; margin-left: auto; margin-right: auto;" class=" pure-table pure-table-horizontal">
<thead>
<tr>
<th style="text-align:left;">
Method
</th>
<th style="text-align:left;">
T<sub>1</sub> effect
</th>
<th style="text-align:left;">
T<sub>2</sub> effect
</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">
True effect
</td>
<td style="text-align:left;">
0.160
</td>
<td style="text-align:left;">
0.400
</td>
</tr>
<tr>
<td style="text-align:left;">
IPW, original
</td>
<td style="text-align:left;">
0.157
</td>
<td style="text-align:left;">
0.421
</td>
</tr>
<tr>
<td style="text-align:left;">
—
</td>
<td style="text-align:left;">
<b>lag(T) effect</b>
</td>
<td style="text-align:left;">
<b>T effect</b>
</td>
</tr>
<tr>
<td style="text-align:left;">
IPW, lagged, manual
</td>
<td style="text-align:left;">
0.150
</td>
<td style="text-align:left;">
0.441
</td>
</tr>
<tr>
<td style="text-align:left;">
IPW, lagged, automatic
</td>
<td style="text-align:left;">
0.150
</td>
<td style="text-align:left;">
0.441
</td>
</tr>
</tbody>
</table>
<p>Those results aren’t identical (I don’t know why!), but they’re close-ish, so whatever. It worked! Instead of using explicit <code>t1</code>, <code>d1</code>, etc. columns, we can do the same marginal structural model with just <code>t</code> and <code>d</code> in a long data frame.</p>
<h2 id="expansion-to-multiple-period-data">Expansion to multiple-period data</h2>
<p>Since that’s all working, now we can do something a little/lot trickier—instead of manually specifying <code>\(T_1\)</code> and <code>\(T_2\)</code>, which isn’t really easily scalable to more time periods, we’ll construct the data more generally for any number of years</p>
<h3 id="tricky-interdependent-data-generating-process">Tricky interdependent data generating process</h3>
<p>The trick here is that we want to have any number of time periods, but also maintain the same DAG relationships. In the small data, these are the two general relationships:</p>
<ul>
<li><code>\(\text{treatment}_t = (0.1 \cdot \text{confounder}) + (0.4 \cdot \text{depression}_{t-1}) + (0.4 \cdot \text{treatment}_{t-1}) + \text{noise}\)</code></li>
<li><code>\(\text{depression}_t = (0.1 \cdot \text{confounder}) + (0.4 \cdot \text{treatment}_{t}) + (0.4 \cdot \text{depression}_{t-1}) + \text{noise}\)</code></li>
</ul>
<p>Or in code:</p>
<ul>
<li><code>t = (0.1 * c) + (0.4 * lag(d)) + (0.4 * lag(t)) + rnorm(n, 0, sqrt(0.5196))</code></li>
<li><code>d = (0.1 * c) + (0.4 * t) + (0.4 * lag(d)) + rnorm(n, 0, sqrt(0.4582))</code></li>
</ul>
<p>Generating this data in a tidy <strong>dplyr</strong> way is super tricky, since the <code>t</code> and <code>d</code> columns are interdependent—the data has to be generated rowwise, but we also have to be able to look back a row to get the lagged values of <code>t</code> and <code>d</code>. I’ve seen people like <a href="#ref-BlackwellGlynn:2018">Blackwell and Glynn</a> (<a href="#ref-BlackwellGlynn:2018">2018</a>) get around this by using a <code>for</code> loop to build the data, but I have an aversion to for loops in R <a href="https://r4ds.had.co.nz/iteration.html#for-loops-vs.-functionals">since <strong>purrr</strong> exists</a>, so I spent way too much time trying to figure out a <strong>purrr</strong>-based way to do this. Others have tried this (like <a href="https://community.rstudio.com/t/row-wise-iteration-in-a-dataframe-with-interdependent-variables/38778">this RStudio Community post</a>), and I <a href="https://twitter.com/andrewheiss/status/1347780639714664448">asked about it on Twitter</a>, where I got a few cool solutions using <code>purrr::accumulate()</code> and <code>purrr::reduce()</code>, like <a href="https://twitter.com/ianmoran011/status/1347849678696574977">this fancy <code>accumutate()</code> function from Ian Moran</a> and <a href="https://gist.github.com/andrewheiss/89ae26a7a4682aff0ee9b7db1e92c326#gistcomment-3587810">these solutions from Miles McBain</a>.</p>
<p>There are no loops involved in those solutions, but phew that accumulate/reduce syntax is wonky and I can’t fully wrap my head around it (plus it makes it hard to carry over non-accumulated variables). So I resorted to a loop. Oooof.</p>
<p>It works, though! Let’s test it on just one ID. We’ll generate just one row with <code>t1</code>, <code>t2</code>, <code>d1</code>, and <code>d2</code>, and we’ll remove the noise from each of the columns:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">set.seed</span>(<span style="color:#ae81ff">12345</span>)
n <span style="color:#f92672">&lt;-</span> <span style="color:#ae81ff">1</span>

<span style="color:#75715e"># Remove all noise so that we can compare this with the function version</span>
df_example <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">tibble</span>(id <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">:</span>n,
                     c <span style="color:#f92672">=</span> <span style="color:#a6e22e">rnorm</span>(n, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(t1 <span style="color:#f92672">=</span> (<span style="color:#ae81ff">0.1</span> <span style="color:#f92672">*</span> c),
         d1 <span style="color:#f92672">=</span> (<span style="color:#ae81ff">0.1</span> <span style="color:#f92672">*</span> c) <span style="color:#f92672">+</span> (<span style="color:#ae81ff">0.4</span> <span style="color:#f92672">*</span> t1),
         t2 <span style="color:#f92672">=</span> (<span style="color:#ae81ff">0.1</span> <span style="color:#f92672">*</span> c) <span style="color:#f92672">+</span> (<span style="color:#ae81ff">0.4</span> <span style="color:#f92672">*</span> d1) <span style="color:#f92672">+</span> (<span style="color:#ae81ff">0.4</span> <span style="color:#f92672">*</span> t1),
         d2 <span style="color:#f92672">=</span> (<span style="color:#ae81ff">0.1</span> <span style="color:#f92672">*</span> c) <span style="color:#f92672">+</span> (<span style="color:#ae81ff">0.4</span> <span style="color:#f92672">*</span> t2) <span style="color:#f92672">+</span> (<span style="color:#ae81ff">0.4</span> <span style="color:#f92672">*</span> d1))
df_example
<span style="color:#75715e">## # A tibble: 1 x 6</span>
<span style="color:#75715e">##      id     c     t1     d1    t2    d2</span>
<span style="color:#75715e">##   &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;</span>
<span style="color:#75715e">## 1     1 0.586 0.0586 0.0820 0.115 0.137</span>
</code></pre></div><p>This isn’t tidy data, so technically there are two years here. We’ll keep <code>t1</code> and <code>d1</code> as the initial values for year 1, then generate values for 5 years. If we do this right, the <code>t</code> and <code>d</code> values for year 2 should be identical to <code>t2</code> and <code>d2</code> here.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Add a bunch of extra years with empty cells for t and d</span>
df_multiple_years_empty <span style="color:#f92672">&lt;-</span> df_example <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(y <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">select</span>(id, y, t <span style="color:#f92672">=</span> t1, d <span style="color:#f92672">=</span> d1, c) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">add_row</span>(y <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">:</span><span style="color:#ae81ff">5</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># c doesn&#39;t vary across time</span>
  <span style="color:#a6e22e">mutate</span>(id <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, 
         c <span style="color:#f92672">=</span> df_example<span style="color:#f92672">$</span>c[1])
df_multiple_years_empty
<span style="color:#75715e">## # A tibble: 5 x 5</span>
<span style="color:#75715e">##      id     y       t       d     c</span>
<span style="color:#75715e">##   &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;</span>
<span style="color:#75715e">## 1     1     1  0.0586  0.0820 0.586</span>
<span style="color:#75715e">## 2     1     2 NA      NA      0.586</span>
<span style="color:#75715e">## 3     1     3 NA      NA      0.586</span>
<span style="color:#75715e">## 4     1     4 NA      NA      0.586</span>
<span style="color:#75715e">## 5     1     5 NA      NA      0.586</span>

<span style="color:#75715e"># Now we need to build the interdependent values for t and d with &lt;gasp&gt; a loop</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e"># The loop is inside this function---it skips the initial row and then</span>
<span style="color:#75715e"># iteratively adds new rows. We can&#39;t use neat things like lag(t), so instead</span>
<span style="color:#75715e"># we use df$t[i - 1]</span>
<span style="color:#75715e"># </span>
<span style="color:#75715e"># We omit the extra noise for now</span>
dgp <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">function</span>(df) {
  <span style="color:#a6e22e">for </span>(i in <span style="color:#ae81ff">2</span><span style="color:#f92672">:</span><span style="color:#a6e22e">nrow</span>(df)) {
    df<span style="color:#f92672">$</span>t[i] <span style="color:#f92672">&lt;-</span> (<span style="color:#ae81ff">0.1</span> <span style="color:#f92672">*</span> df<span style="color:#f92672">$</span>c[i]) <span style="color:#f92672">+</span> (<span style="color:#ae81ff">0.4</span> <span style="color:#f92672">*</span> df<span style="color:#f92672">$</span>d[i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>]) <span style="color:#f92672">+</span> (<span style="color:#ae81ff">0.4</span> <span style="color:#f92672">*</span> df<span style="color:#f92672">$</span>t[i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>])
    df<span style="color:#f92672">$</span>d[i] <span style="color:#f92672">&lt;-</span> (<span style="color:#ae81ff">0.1</span> <span style="color:#f92672">*</span> df<span style="color:#f92672">$</span>c[i]) <span style="color:#f92672">+</span> (<span style="color:#ae81ff">0.4</span> <span style="color:#f92672">*</span> df<span style="color:#f92672">$</span>t[i]) <span style="color:#f92672">+</span> (<span style="color:#ae81ff">0.4</span> <span style="color:#f92672">*</span> df<span style="color:#f92672">$</span>d[i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>])
  }
  
  df
}

<span style="color:#75715e"># Generate all 5 years</span>
df_multiple_years_empty <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">dgp</span>()
<span style="color:#75715e">## # A tibble: 5 x 5</span>
<span style="color:#75715e">##      id     y      t      d     c</span>
<span style="color:#75715e">##   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;</span>
<span style="color:#75715e">## 1     1     1 0.0586 0.0820 0.586</span>
<span style="color:#75715e">## 2     1     2 0.115  0.137  0.586</span>
<span style="color:#75715e">## 3     1     3 0.159  0.177  0.586</span>
<span style="color:#75715e">## 4     1     4 0.193  0.207  0.586</span>
<span style="color:#75715e">## 5     1     5 0.219  0.229  0.586</span>
</code></pre></div><p>If this worked, the <code>t</code> and <code>d</code> values for year 2 should be the same as <code>t2</code> and <code>d2</code> here:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">df_example
<span style="color:#75715e">## # A tibble: 1 x 6</span>
<span style="color:#75715e">##      id     c     t1     d1    t2    d2</span>
<span style="color:#75715e">##   &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;</span>
<span style="color:#75715e">## 1     1 0.586 0.0586 0.0820 0.115 0.137</span>
</code></pre></div><p>They are!</p>
<p>Since we know it works, let’s generate a big dataset for playing with multi-year MSMs, this time with noise:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">set.seed</span>(<span style="color:#ae81ff">1234</span>)

<span style="color:#75715e"># Make data for the first year</span>
df_first_year <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">expand_grid</span>(id <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#ae81ff">2000</span>, y <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(c <span style="color:#f92672">=</span> <span style="color:#a6e22e">rnorm</span>(<span style="color:#a6e22e">n</span>(), <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>),
         t <span style="color:#f92672">=</span> (<span style="color:#ae81ff">0.1</span> <span style="color:#f92672">*</span> c) <span style="color:#f92672">+</span> <span style="color:#a6e22e">rnorm</span>(<span style="color:#a6e22e">n</span>(), <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">sqrt</span>(<span style="color:#ae81ff">0.99</span>)),
         d <span style="color:#f92672">=</span> (<span style="color:#ae81ff">0.1</span> <span style="color:#f92672">*</span> c) <span style="color:#f92672">+</span> (<span style="color:#ae81ff">0.4</span> <span style="color:#f92672">*</span> t) <span style="color:#f92672">+</span> <span style="color:#a6e22e">rnorm</span>(<span style="color:#a6e22e">n</span>(), <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">sqrt</span>(<span style="color:#ae81ff">0.822</span>)))
df_first_year
<span style="color:#75715e">## # A tibble: 2,000 x 5</span>
<span style="color:#75715e">##       id     y      c        t       d</span>
<span style="color:#75715e">##    &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;</span>
<span style="color:#75715e">##  1     1     1 -1.21  -1.09    -1.43  </span>
<span style="color:#75715e">##  2     2     1  0.277 -0.0714  -0.739 </span>
<span style="color:#75715e">##  3     3     1  1.08  -0.00174 -0.0686</span>
<span style="color:#75715e">##  4     4     1 -2.35   0.952    1.88  </span>
<span style="color:#75715e">##  5     5     1  0.429 -1.60     0.0373</span>
<span style="color:#75715e">##  6     6     1  0.506 -0.990    0.535 </span>
<span style="color:#75715e">##  7     7     1 -0.575 -1.79    -0.889 </span>
<span style="color:#75715e">##  8     8     1 -0.547  0.456   -1.14  </span>
<span style="color:#75715e">##  9     9     1 -0.564 -0.500    0.386 </span>
<span style="color:#75715e">## 10    10     1 -0.890 -1.92    -1.04  </span>
<span style="color:#75715e">## # … with 1,990 more rows</span>

<span style="color:#75715e"># Add empty years 2-5</span>
df_panel_empty <span style="color:#f92672">&lt;-</span> df_first_year <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">bind_rows</span>(<span style="color:#a6e22e">expand_grid</span>(id <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#ae81ff">2000</span>, y <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">:</span><span style="color:#ae81ff">5</span>)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">arrange</span>(id, y)
<span style="color:#a6e22e">head</span>(df_panel_empty, <span style="color:#ae81ff">10</span>)
<span style="color:#75715e">## # A tibble: 10 x 5</span>
<span style="color:#75715e">##       id     y      c       t      d</span>
<span style="color:#75715e">##    &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;</span>
<span style="color:#75715e">##  1     1     1 -1.21  -1.09   -1.43 </span>
<span style="color:#75715e">##  2     1     2 NA     NA      NA    </span>
<span style="color:#75715e">##  3     1     3 NA     NA      NA    </span>
<span style="color:#75715e">##  4     1     4 NA     NA      NA    </span>
<span style="color:#75715e">##  5     1     5 NA     NA      NA    </span>
<span style="color:#75715e">##  6     2     1  0.277 -0.0714 -0.739</span>
<span style="color:#75715e">##  7     2     2 NA     NA      NA    </span>
<span style="color:#75715e">##  8     2     3 NA     NA      NA    </span>
<span style="color:#75715e">##  9     2     4 NA     NA      NA    </span>
<span style="color:#75715e">## 10     2     5 NA     NA      NA</span>

<span style="color:#75715e"># Add noise to the fancy dgp() function</span>
dgp <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">function</span>(df) {
  <span style="color:#a6e22e">for </span>(i in <span style="color:#ae81ff">2</span><span style="color:#f92672">:</span><span style="color:#a6e22e">nrow</span>(df)) {
    df<span style="color:#f92672">$</span>t[i] <span style="color:#f92672">&lt;-</span> (<span style="color:#ae81ff">0.1</span> <span style="color:#f92672">*</span> df<span style="color:#f92672">$</span>c[i]) <span style="color:#f92672">+</span> (<span style="color:#ae81ff">0.4</span> <span style="color:#f92672">*</span> df<span style="color:#f92672">$</span>d[i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>]) <span style="color:#f92672">+</span> (<span style="color:#ae81ff">0.4</span> <span style="color:#f92672">*</span> df<span style="color:#f92672">$</span>t[i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>]) <span style="color:#f92672">+</span> <span style="color:#a6e22e">rnorm</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">sqrt</span>(<span style="color:#ae81ff">0.5196</span>))
    df<span style="color:#f92672">$</span>d[i] <span style="color:#f92672">&lt;-</span> (<span style="color:#ae81ff">0.1</span> <span style="color:#f92672">*</span> df<span style="color:#f92672">$</span>c[i]) <span style="color:#f92672">+</span> (<span style="color:#ae81ff">0.4</span> <span style="color:#f92672">*</span> df<span style="color:#f92672">$</span>t[i]) <span style="color:#f92672">+</span> (<span style="color:#ae81ff">0.4</span> <span style="color:#f92672">*</span> df<span style="color:#f92672">$</span>d[i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>]) <span style="color:#f92672">+</span> <span style="color:#a6e22e">rnorm</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">sqrt</span>(<span style="color:#ae81ff">0.4582</span>))
  }
  
  df
}

<span style="color:#75715e"># Run dgp() within each id</span>
df_panel <span style="color:#f92672">&lt;-</span> df_panel_empty <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">group_by</span>(id) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># This doesn&#39;t vary with time, so repeat it across all the years</span>
  <span style="color:#a6e22e">mutate</span>(c <span style="color:#f92672">=</span> c[1]) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># Nest the data into a single cell in each row</span>
  <span style="color:#a6e22e">nest</span>() <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># Run dgp() on the nested cell (in a column named &#34;data&#34;)</span>
  <span style="color:#a6e22e">mutate</span>(dgp <span style="color:#f92672">=</span> <span style="color:#a6e22e">map</span>(data, dgp)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">select</span>(<span style="color:#f92672">-</span>data) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># Unnest the nested dgp()-ed cells</span>
  <span style="color:#a6e22e">unnest</span>(dgp) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># Add some lags</span>
  <span style="color:#a6e22e">mutate</span>(<span style="color:#a6e22e">across</span>(<span style="color:#a6e22e">c</span>(t, d), <span style="color:#a6e22e">list</span>(lag <span style="color:#f92672">=</span> lag))) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">ungroup</span>()
<span style="color:#a6e22e">head</span>(df_panel, <span style="color:#ae81ff">10</span>)
<span style="color:#75715e">## # A tibble: 10 x 7</span>
<span style="color:#75715e">##       id     y      c       t      d   t_lag  d_lag</span>
<span style="color:#75715e">##    &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;</span>
<span style="color:#75715e">##  1     1     1 -1.21  -1.09   -1.43  NA      NA    </span>
<span style="color:#75715e">##  2     1     2 -1.21  -1.11   -1.28  -1.09   -1.43 </span>
<span style="color:#75715e">##  3     1     3 -1.21  -1.83   -1.35  -1.11   -1.28 </span>
<span style="color:#75715e">##  4     1     4 -1.21  -1.62   -1.20  -1.83   -1.35 </span>
<span style="color:#75715e">##  5     1     5 -1.21  -1.62   -0.981 -1.62   -1.20 </span>
<span style="color:#75715e">##  6     2     1  0.277 -0.0714 -0.739 NA      NA    </span>
<span style="color:#75715e">##  7     2     2  0.277  1.09    0.116 -0.0714 -0.739</span>
<span style="color:#75715e">##  8     2     3  0.277  1.43    0.562  1.09    0.116</span>
<span style="color:#75715e">##  9     2     4  0.277  0.584  -0.606  1.43    0.562</span>
<span style="color:#75715e">## 10     2     5  0.277 -0.881   0.603  0.584  -0.606</span>
</code></pre></div><h3 id="multiple-period-marginal-structural-models">Multiple-period marginal structural models</h3>
<p>Cool cool cool. We have multi-period data where variables depend on their lagged values and other interdependent columns. Let’s build some MSMs!</p>
<p>We’re going to build weights two different ways here. Because the data has a time-series cross-sectional structure (with multiple individuals across multiple years), the weight models need to account for that structure. Everywhere I’ve seen elsewhere uses generalized estimating equations (GEEs) for these models (and that’s what the <strong>ipw</strong> package uses behind the scenes), but I’m a fan of multilevel models, so I’ll make weights with both to compare their results.</p>
<p>We’ll use the same equation as before—the cumulative product of the ratio of two probability distributions:</p>
<p>$$
w = \prod^t_{t = 1} \frac{\phi(T_{it} | T_{i, t-1}, C_i)}{\phi(T_{it} | T_{i, t-1}, D_{i, t-1}, C_i)}
$$</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Again, ipw complains about missing values, so get rid of them (i.e. all year 1)</span>
df_panel_sans_na <span style="color:#f92672">&lt;-</span> df_panel <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">filter</span>(<span style="color:#f92672">!</span><span style="color:#a6e22e">is.na</span>(t_lag)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(y <span style="color:#f92672">=</span> <span style="color:#a6e22e">as.numeric</span>(y))

<span style="color:#75715e"># Manually</span>
<span style="color:#75715e"># Numerator is lagged treatment + non-varying confounders</span>
<span style="color:#75715e"># ipw uses GEE models to account for panel structure, so use them here too</span>
model_num_gee <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">geeglm</span>(t <span style="color:#f92672">~</span> t_lag <span style="color:#f92672">+</span> c, 
                        id <span style="color:#f92672">=</span> id, waves <span style="color:#f92672">=</span> y, corstr <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ar1&#34;</span>,
                        data <span style="color:#f92672">=</span> df_panel_sans_na)

<span style="color:#75715e"># But we can also use mixed models with lmer</span>
model_num_multi <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lmer</span>(t <span style="color:#f92672">~</span> t_lag <span style="color:#f92672">+</span> c <span style="color:#f92672">+</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">|</span> id),
                        data <span style="color:#f92672">=</span> df_panel_sans_na)

<span style="color:#75715e"># Denominator is lagged treatment, lagged outcome, time-varying confounders +</span>
<span style="color:#75715e"># non-varying confounders</span>
model_denom_gee <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">geeglm</span>(t <span style="color:#f92672">~</span> t_lag <span style="color:#f92672">+</span> d_lag <span style="color:#f92672">+</span> c, 
                          id <span style="color:#f92672">=</span> id, waves <span style="color:#f92672">=</span> y, corstr <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ar1&#34;</span>,
                          data <span style="color:#f92672">=</span> df_panel_sans_na)

model_denom_multi <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lmer</span>(t <span style="color:#f92672">~</span> t_lag <span style="color:#f92672">+</span> d_lag <span style="color:#f92672">+</span> c <span style="color:#f92672">+</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">|</span> id),
                          data <span style="color:#f92672">=</span> df_panel_sans_na)

<span style="color:#75715e"># Probability distributions</span>
num_gee <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">dnorm</span>(df_panel_sans_na<span style="color:#f92672">$</span>t,
             <span style="color:#a6e22e">predict</span>(model_num_gee),
             <span style="color:#a6e22e">sd</span>(<span style="color:#a6e22e">residuals</span>(model_num_gee)))

den_gee <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">dnorm</span>(df_panel_sans_na<span style="color:#f92672">$</span>t,
                 <span style="color:#a6e22e">predict</span>(model_denom_gee),
                 <span style="color:#a6e22e">sd</span>(<span style="color:#a6e22e">residuals</span>(model_denom_gee)))

num_multi <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">dnorm</span>(df_panel_sans_na<span style="color:#f92672">$</span>t,
                   <span style="color:#a6e22e">predict</span>(model_num_multi),
                   <span style="color:#a6e22e">sd</span>(<span style="color:#a6e22e">residuals</span>(model_num_multi)))

den_multi <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">dnorm</span>(df_panel_sans_na<span style="color:#f92672">$</span>t,
                   <span style="color:#a6e22e">predict</span>(model_denom_multi),
                   <span style="color:#a6e22e">sd</span>(<span style="color:#a6e22e">residuals</span>(model_denom_multi)))

df_panel_weights_manual <span style="color:#f92672">&lt;-</span> df_panel_sans_na <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(weights_no_time_gee <span style="color:#f92672">=</span> num_gee <span style="color:#f92672">/</span> den_gee,
         weights_no_time_multi <span style="color:#f92672">=</span> num_multi <span style="color:#f92672">/</span> den_multi) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">group_by</span>(id) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(ipw_gee <span style="color:#f92672">=</span> <span style="color:#a6e22e">cumprod</span>(weights_no_time_gee),
         ipw_multi <span style="color:#f92672">=</span> <span style="color:#a6e22e">cumprod</span>(weights_no_time_multi)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">ungroup</span>()

<span style="color:#75715e"># Automatically with ipwtm()</span>
panel_weights_auto <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ipwtm</span>(
  exposure <span style="color:#f92672">=</span> t,
  family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;gaussian&#34;</span>, 
  numerator <span style="color:#f92672">=</span> <span style="color:#f92672">~</span> t_lag <span style="color:#f92672">+</span> c, 
  denominator <span style="color:#f92672">=</span> <span style="color:#f92672">~</span> t_lag <span style="color:#f92672">+</span> d_lag <span style="color:#f92672">+</span> c, 
  id <span style="color:#f92672">=</span> id,
  timevar <span style="color:#f92672">=</span> y,
  type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;all&#34;</span>,
  corstr <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ar1&#34;</span>,
  data <span style="color:#f92672">=</span> <span style="color:#a6e22e">as.data.frame</span>(df_panel_sans_na))

df_panel_weights_auto <span style="color:#f92672">&lt;-</span> df_panel_sans_na <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(ipw <span style="color:#f92672">=</span> panel_weights_auto<span style="color:#f92672">$</span>ipw.weights)
</code></pre></div><p>Now we can build the outcome models, using both GEE and multilevel models.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">m_manual_gee <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">geeglm</span>(d <span style="color:#f92672">~</span> t <span style="color:#f92672">+</span> t_lag, 
                       data <span style="color:#f92672">=</span> df_panel_weights_manual,
                       id <span style="color:#f92672">=</span> id, waves <span style="color:#f92672">=</span> y, 
                       weights <span style="color:#f92672">=</span> ipw_gee)

m_auto_gee <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">geeglm</span>(d <span style="color:#f92672">~</span> t <span style="color:#f92672">+</span> t_lag, 
                     data <span style="color:#f92672">=</span> df_panel_weights_auto, 
                     id <span style="color:#f92672">=</span> id, waves <span style="color:#f92672">=</span> y, 
                     weights <span style="color:#f92672">=</span> ipw)

m_lmer_manual_gee_wt <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lmer</span>(d <span style="color:#f92672">~</span> t <span style="color:#f92672">+</span> t_lag <span style="color:#f92672">+</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">|</span> id), 
                             data <span style="color:#f92672">=</span> df_panel_weights_manual, 
                             weights <span style="color:#f92672">=</span> ipw_gee)

m_lmer_auto_gee_wt <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lmer</span>(d <span style="color:#f92672">~</span> t <span style="color:#f92672">+</span> t_lag <span style="color:#f92672">+</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">|</span> id), 
                           data <span style="color:#f92672">=</span> df_panel_weights_auto, 
                           weights <span style="color:#f92672">=</span> ipw)

m_lmer_manual_multi_wt <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lmer</span>(d <span style="color:#f92672">~</span> t <span style="color:#f92672">+</span> t_lag <span style="color:#f92672">+</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">|</span> id), 
                               data <span style="color:#f92672">=</span> df_panel_weights_manual, 
                               weights <span style="color:#f92672">=</span> ipw_multi)

results <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">tribble</span>(
  <span style="color:#f92672">~</span>`Method`, <span style="color:#f92672">~</span>`Weights`, <span style="color:#f92672">~</span><span style="color:#a6e22e">`lag</span>(T) effect`, ~`T effect`,
  <span style="color:#e6db74">&#34;True effect&#34;</span>, <span style="color:#66d9ef">NA</span>, <span style="color:#ae81ff">0.160</span>, <span style="color:#ae81ff">0.400</span>,
  <span style="color:#e6db74">&#34;Panel with GEE&#34;</span>, <span style="color:#e6db74">&#34;Manual GEE weights&#34;</span>, <span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">tidy</span>(m_manual_gee), term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;t_lag&#34;</span>)<span style="color:#f92672">$</span>estimate, <span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">tidy</span>(m_manual_gee), term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;t&#34;</span>)<span style="color:#f92672">$</span>estimate,
  <span style="color:#e6db74">&#34;Panel with GEE&#34;</span>, <span style="color:#e6db74">&#34;Automatic GEE weights&#34;</span>, <span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">tidy</span>(m_auto_gee), term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;t_lag&#34;</span>)<span style="color:#f92672">$</span>estimate, <span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">tidy</span>(m_auto_gee), term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;t&#34;</span>)<span style="color:#f92672">$</span>estimate,
  <span style="color:#e6db74">&#34;Panel with multilevel model&#34;</span>, <span style="color:#e6db74">&#34;Manual GEE weights&#34;</span>, <span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">tidy</span>(m_lmer_manual_gee_wt), term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;t_lag&#34;</span>)<span style="color:#f92672">$</span>estimate, <span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">tidy</span>(m_lmer_manual_gee_wt), term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;t&#34;</span>)<span style="color:#f92672">$</span>estimate,
  <span style="color:#e6db74">&#34;Panel with multilevel model&#34;</span>, <span style="color:#e6db74">&#34;Automatic GEE weights&#34;</span>, <span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">tidy</span>(m_lmer_auto_gee_wt), term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;t_lag&#34;</span>)<span style="color:#f92672">$</span>estimate, <span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">tidy</span>(m_lmer_auto_gee_wt), term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;t&#34;</span>)<span style="color:#f92672">$</span>estimate,
  <span style="color:#e6db74">&#34;Panel with multilevel model&#34;</span>, <span style="color:#e6db74">&#34;Manual multilevel weights&#34;</span>, <span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">tidy</span>(m_lmer_manual_multi_wt), term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;t_lag&#34;</span>)<span style="color:#f92672">$</span>estimate, <span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">tidy</span>(m_lmer_manual_multi_wt), term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;t&#34;</span>)<span style="color:#f92672">$</span>estimate
)
</code></pre></div><table style="width:90%; margin-left: auto; margin-right: auto;" class=" pure-table pure-table-horizontal">
<thead>
<tr>
<th style="text-align:left;">
Method
</th>
<th style="text-align:left;">
Weights
</th>
<th style="text-align:right;">
lag(T) effect
</th>
<th style="text-align:right;">
T effect
</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">
True effect
</td>
<td style="text-align:left;">
—
</td>
<td style="text-align:right;">
0.160
</td>
<td style="text-align:right;">
0.400
</td>
</tr>
<tr>
<td style="text-align:left;">
Panel with GEE
</td>
<td style="text-align:left;">
Manual GEE weights
</td>
<td style="text-align:right;">
0.230
</td>
<td style="text-align:right;">
0.429
</td>
</tr>
<tr>
<td style="text-align:left;">
Panel with GEE
</td>
<td style="text-align:left;">
Automatic GEE weights
</td>
<td style="text-align:right;">
0.230
</td>
<td style="text-align:right;">
0.429
</td>
</tr>
<tr>
<td style="text-align:left;">
Panel with multilevel model
</td>
<td style="text-align:left;">
Manual GEE weights
</td>
<td style="text-align:right;">
0.195
</td>
<td style="text-align:right;">
0.408
</td>
</tr>
<tr>
<td style="text-align:left;">
Panel with multilevel model
</td>
<td style="text-align:left;">
Automatic GEE weights
</td>
<td style="text-align:right;">
0.195
</td>
<td style="text-align:right;">
0.408
</td>
</tr>
<tr>
<td style="text-align:left;">
Panel with multilevel model
</td>
<td style="text-align:left;">
Manual multilevel weights
</td>
<td style="text-align:right;">
0.196
</td>
<td style="text-align:right;">
0.414
</td>
</tr>
</tbody>
</table>
<p>Phew.</p>
<p>All of the models here are relatively close to the true effect for <code>\(T_t\)</code>! (Though they’re all sizably off for <code>\(T_{t-1}\)</code>, but I don’t know why).</p>
<p>Importantly, it seems that mixed models work just fine for both weights and outcome models, which means there’s probably no need to use GEE (and this can all be done Bayesianly with <code>brms()</code>!).</p>
<p>It works!</p>
<h2 id="questions-for-the-future">Questions for the future</h2>
<p>I still have some lingering things to check (forthcoming in a future blog post):</p>
<ul>
<li>
<p><code>y</code> isn’t any any of the models: weights numerator, weights denominator, or outcome. If I include it in any of the models, the there’s perfect fit. That may be because there are no time-varying confounders? I think year might need to be in there somewhere, but I’m not sure. <a href="#ref-BlackwellGlynn:2018">Blackwell and Glynn</a> (<a href="#ref-BlackwellGlynn:2018">2018</a>) include year in the numerator and denominator for weights in their Swank Steinmo replication, but not in their Burgoon replication.</p>
</li>
<li>
<p>This example has no time-varying confounders. I need to see how this all works with those.</p>
</li>
<li>
<p>This DAG for this example is pretty simple. I need to see what happens when there are <em>also</em> direct arrows from <code>\(T_{t-1} \rightarrow T_{t}\)</code> and <code>\(D_{t-1} \rightarrow D_{t}\)</code>.</p>
</li>
</ul>
<h2 id="references">References</h2>
<div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-BlackwellGlynn:2018" class="csl-entry">
<p>Blackwell, Matthew, and Adam N. Glynn. 2018. “How to Make Causal Inferences with Time-Series Cross-Sectional Data Under Selection on Observables.” <em>American Political Science Review</em> 112 (4): 1067–82. <a href="https://doi.org/10.1017/s0003055418000357">https://doi.org/10.1017/s0003055418000357</a>.</p>
</div>
<div id="ref-ThoemmesOng:2016" class="csl-entry">
<p>Thoemmes, Felix, and Anthony D. Ong. 2016. “A Primer on Inverse Probability of Treatment Weighting and Marginal Structural Models.” <em>Emerging Adulthood</em> 4 (1): 40–59. <a href="https://doi.org/10.1177/2167696815621645">https://doi.org/10.1177/2167696815621645</a>.</p>
</div>
</div>
%!s(MISSING)]]></content>
        <category term="r" />
        <category term="tidyverse" />
        <category term="causal inference" />
        <category term="DAGs" />
        <category term="do calculus" />
        <category term="inverse probability weighting" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Generating inverse probability weights for marginal structural models with time-series cross-sectional panel data]]></title>
        <link href="https://www.shagunjhaver.com/blog/2020/12/03/ipw-tscs-msm/" rel="alternate" />
        <published>2020-12-03T00:00:00+00:00</published>
        <updated>2020-12-03T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2020/12/03/ipw-tscs-msm/</id>
        <summary type="html"><![CDATA[Use R to close backdoor confounding in panel data with marginal structural models and inverse probability weights for both binary and continuous treatments]]></summary>
        <content type="html"><![CDATA[<p>In <a href="/blog/2020/12/01/ipw-binary-continuous/">my post on generating inverse probability weights for both binary and continuous treatments</a>, I mentioned that I’d eventually need to figure out how to deal with more complex data structures and causal models where treatments, outcomes, and confounders vary over time. Instead of adjusting for DAG confounding with inverse probability weights, we need to use something called marginal structural models (MSMs) to make adjustments that account for treatment and outcome history and other time structures. This is complex stuff and social science hasn’t done much with it (but it’s been a common approach in epidemiology).</p>
<p>This post is my first attempt at teaching myself how to do this stuff. As I note at the end in the <a href="#important-caveats">caveats section</a>, there might be (surely are!) mistakes. Please correct them!</p>
<h2 id="contents----omit-in-toc---">Contents <!-- omit in toc --></h2>
<ul>
<li><a href="#dags-and-time-series-cross-sectional-tscs-data">DAGs and time-series cross-sectional (TSCS) data</a></li>
<li><a href="#marginal-structural-models">Marginal structural models</a></li>
<li><a href="#simulated-time-series-cross-sectional-data">Simulated time-series cross-sectional data</a></li>
<li><a href="#marginal-structural-model-with-a-binary-treatment">Marginal structural model with a binary treatment</a>
<ul>
<li><a href="#naive-estimate-without-weights">Naive estimate without weights</a></li>
<li><a href="#manual-weights">Manual weights</a></li>
<li><a href="#weights-with-the-ipw-package">Weights with the <strong>ipw</strong> package</a></li>
</ul>
</li>
<li><a href="#marginal-structural-model-with-a-continuous-treatment">Marginal structural model with a continuous treatment</a>
<ul>
<li><a href="#naive-estimate-without-weights-1">Naive estimate without weights</a></li>
<li><a href="#manual-weights-1">Manual weights</a></li>
<li><a href="#weights-with-the-ipw-package-1">Weights with the <strong>ipw</strong> package</a></li>
</ul>
</li>
<li><a href="#important-caveats">Important caveats!</a></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">library</span>(tidyverse)
<span style="color:#a6e22e">library</span>(lme4)  <span style="color:#75715e"># For mixed models</span>
<span style="color:#a6e22e">library</span>(fixest)  <span style="color:#75715e"># For fixed effects models</span>
<span style="color:#a6e22e">library</span>(broom)
<span style="color:#a6e22e">library</span>(broom.mixed)  <span style="color:#75715e"># For tidying mixed models</span>
<span style="color:#a6e22e">library</span>(ggdag)
<span style="color:#a6e22e">library</span>(dagitty)
<span style="color:#a6e22e">library</span>(ipw)
</code></pre></div><h2 id="dags-and-time-series-cross-sectional-tscs-data">DAGs and time-series cross-sectional (TSCS) data</h2>
<p>Let’s pretend that we’re interested in the causal effect of a policy in a country on a country’s happiness. We’ll work with two different policies: whether a country implements a 6-hour workday (like <a href="https://www.forbes.com/sites/jackkelly/2020/01/08/finlands-prime-ministers-aspirational-goal-of-a-six-hour-four-day-workweek-will-this-ever-happen/?sh=79367a836384">Finland has been considering</a>), which is binary, and the number of mandated vacation days a country provides, which is continuous. Both the policy and national happiness are influenced and confounded by a few different variables: general country-specific trends, GDP per capita, level of democratization, and level of political corruption.</p>
<p>In the absence of time, this causal model is fairly straightforward:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">simple_dag <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">dagify</span>(happiness <span style="color:#f92672">~</span> policy <span style="color:#f92672">+</span> gdp_cap <span style="color:#f92672">+</span> democracy <span style="color:#f92672">+</span> corruption <span style="color:#f92672">+</span> country,
                     policy <span style="color:#f92672">~</span> gdp_cap <span style="color:#f92672">+</span> democracy <span style="color:#f92672">+</span> corruption <span style="color:#f92672">+</span> country,
                     coords <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(x <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(policy <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, happiness <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>, gdp_cap <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, 
                                         democracy <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>, corruption <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>, country <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>),
                                   y <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(policy <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, happiness <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, gdp_cap <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>, 
                                         democracy <span style="color:#f92672">=</span> <span style="color:#ae81ff">3.3</span>, corruption <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>, country <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>)),
                     exposure <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;policy&#34;</span>,
                     outcome <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;happiness&#34;</span>)

<span style="color:#a6e22e">ggdag_status</span>(simple_dag, text_col <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;black&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">guides</span>(color <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_dag</span>()
</code></pre></div><p><img src="/blog/2020/12/03/ipw-tscs-msm/index_files/figure-html/dag-simple-1.png" width="75%" style="display: block; margin: auto;" /></p>
<p>In a regular DAG setting, we can isolate the arrow between policy and happiness by statistically adjusting for all the nodes that open up backdoor relationships between them, or confound them. We can use <em>do</em>-calculus logic for that, or we can use R:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">adjustmentSets</span>(simple_dag)
<span style="color:#75715e">## { corruption, country, democracy, gdp_cap }</span>
</code></pre></div><p>Adjusting for the four confounders here is thus sufficient for closing all the backdoors and isolating the causal effect of the policy on national happiness. A standard approach to this kind of adjustment is inverse probability weighting, and I have <a href="/blog/2020/12/01/ipw-binary-continuous/">a whole post about how to do that with both binary and continuous treatments</a> (as well as <a href="/blog/2020/02/25/closing-backdoors-dags/">another post</a> and <a href="/research/chapters/heiss-causal-inference-2021/">a textbook chapter</a> with even more details and examples).</p>
<p>However, in reality, time also influences policies, happiness, and other confounders. The number of vacation days a country offers in 2019 depends a lot on the number of vacation days offered in 2018, and 2017, and 2016, and so on. Also, a country’s GDP, level of democracy, and level of corruption all depend on earlier values. Countries aren’t just getting random levels of democracy each year! Not all confounders vary with time—country remains the same every year, as do things like region and continent.</p>
<p>On top of all that, happiness in a previous year could influence the policy in the current year. If a country has lower aggregate happiness in 2016, that could influences politicians’ choice to mandate a 6-hour workday or increase vacation days in 2017 or 2018.</p>
<p>We need to incorporate time into our simple DAG. Because we’re adding a bunch more nodes, I’m going to collapse the time-varying confounders (GDP per capita, democracy, and corruption) and time-invariant confounders (just country here) into single separate nodes. To account for time, I add <code>\(t\)</code> subscripts: <code>\(t\)</code> represents the current year, <code>\(t - 1\)</code> (<code>t_m1</code> in the graph) represents the previous year, <code>\(t - 2\)</code> represents two years earlier, and so on.</p>
<p>Here’s what this looks like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">time_dag <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">dagify</span>(happiness_t <span style="color:#f92672">~</span> policy_t <span style="color:#f92672">+</span> varying_confounders_t <span style="color:#f92672">+</span> happiness_tm1 <span style="color:#f92672">+</span> nonvarying_confounders,
                   policy_t <span style="color:#f92672">~</span> varying_confounders_t <span style="color:#f92672">+</span> happiness_tm1 <span style="color:#f92672">+</span> policy_tm1 <span style="color:#f92672">+</span> nonvarying_confounders,
                   varying_confounders_t <span style="color:#f92672">~</span> happiness_tm1 <span style="color:#f92672">+</span> varying_confounders_tm1 <span style="color:#f92672">+</span> nonvarying_confounders,
                   happiness_tm1 <span style="color:#f92672">~</span> policy_tm1 <span style="color:#f92672">+</span> varying_confounders_tm1 <span style="color:#f92672">+</span> nonvarying_confounders,
                   policy_tm1 <span style="color:#f92672">~</span> varying_confounders_tm1 <span style="color:#f92672">+</span> nonvarying_confounders,
                   varying_confounders_tm1 <span style="color:#f92672">~</span> nonvarying_confounders,
                   coords <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(x <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(happiness_t <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>, policy_t <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>, varying_confounders_t <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>, 
                                       happiness_tm1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, policy_tm1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, varying_confounders_tm1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>,
                                       nonvarying_confounders <span style="color:#f92672">=</span> <span style="color:#ae81ff">2.5</span>),
                                 y <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(happiness_t <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>, policy_t <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, varying_confounders_t <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>, 
                                       happiness_tm1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>, policy_tm1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, varying_confounders_tm1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>,
                                       nonvarying_confounders <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>)),
                   exposure <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;policy_t&#34;</span>,
                   outcome <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;happiness_t&#34;</span>)

<span style="color:#a6e22e">ggdag_status</span>(time_dag, text_col <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;black&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">guides</span>(color <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_dag</span>()
</code></pre></div><p><img src="/blog/2020/12/03/ipw-tscs-msm/index_files/figure-html/dag-complex-1.png" width="100%" style="display: block; margin: auto;" /></p>
<p>Phew. That’s bananas. And that’s just for one time period. Technically there are also nodes from <code>\(t - 2\)</code> and <code>\(t - 3\)</code> and so on that influence <code>\(t - 1\)</code>. Figure 2 from <a href="#ref-BlackwellGlynn:2018">Blackwell and Glynn</a> (<a href="#ref-BlackwellGlynn:2018">2018</a>) shows a similar structure with previous time periods (though they don’t have an arrow from <code>\(Y_{t-1}\)</code> to <code>\(Y\)</code>):</p>
<p><img src="blackwell-glynn-fig-2.png" alt="Figure 2 from Blackwell and Glynn (2018)"></p>
<p>All we care about in this situation is the single arrow between <code>policy_t</code> and <code>happiness_t</code>. (There are ways of looking at other arrows, like the effect of <code>policy_tm1</code> on <code>happiness_t</code>, but we won’t try to measure those here. <a href="#ref-BlackwellGlynn:2018">Blackwell and Glynn</a> (<a href="#ref-BlackwellGlynn:2018">2018</a>) show how to do that.)</p>
<p>We can use <em>do</em>-calculus logic to see what nodes need to be adjusted for to isolate that arrow:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">adjustmentSets</span>(time_dag)
<span style="color:#75715e">## { happiness_tm1, nonvarying_confounders, varying_confounders_t }</span>
</code></pre></div><p>According to this, we should adjust for time variant confounders in the current year, happiness in the previous year, and nonvarying confounders like country. <em>However</em>, this won’t be completely accurate because the previous history matters. In general, situations where treatments, confounders, and outcomes vary over time, adjustment approaches like inverse probability weighting will be biased and incorrect.</p>
<h2 id="marginal-structural-models">Marginal structural models</h2>
<p>To account for this time structure, we can instead use something called marginal structural models (MSMs) to make DAG adjustments. These have been used widely in epidemiology, and there are some really great and accessible overviews of the method here:</p>
<ul>
<li>Chapter 12 in <a href="https://www.hsph.harvard.edu/miguel-hernan/causal-inference-book/">Miguel A. Hernán and James M. Robins, <em>Causal Inference: What If</em></a> (<a href="#ref-HernanRobins:2020">Hernán and Robins 2020</a>)</li>
<li>Felix Thoemmes and Anthony D. Ong, “A Primer on Inverse Probability of Treatment Weighting and Marginal Structural Models” (<a href="#ref-ThoemmesOng:2016">Thoemmes and Ong 2016</a>)</li>
<li>Stephen R. Cole and Miguel A. Hernán, “Constructing Inverse Probability Weights for Marginal Structural Models” (<a href="#ref-ColeHernan:2008">Cole and Hernán 2008</a>)</li>
<li>Kosuke Imai and Marc Ratkovic, “Robust Estimation of Inverse Probability Weights for Marginal Structural Models” (<a href="#ref-ImaiRatkovic:2015">Imai and Ratkovic 2015</a>)</li>
<li>James M. Robins, Miguel Ángel Hernán, and Babette Brumback, “Marginal Structural Models and Causal Inference in Epidemiology” (<a href="#ref-RobinsHernanBrumback:2000">Robins, Hernán, and Brumback 2000</a>)</li>
</ul>
<p>In my world of public policy and political science, though, MSMs are far rarer, even though <em><strong>tons of the data we use</strong></em> is time-series cross-sectional (TSCS) data, or panel data where each row represents a country and year (e.g. row 1 is Afghanistan in 2008, row 2 is Afghanistan in 2009, etc.) or state and year (e.g. Alabama 2015, Alabama 2016, etc.). The only paper I’ve really seen that uses MSMs in the political science world is <a href="#ref-BlackwellGlynn:2018">Blackwell and Glynn</a> (<a href="#ref-BlackwellGlynn:2018">2018</a>), which is an introduction to the topic and a call for using them more:</p>
<ul>
<li>Matthew Blackwell and Adam N. Glynn, “How to Make Causal Inferences with Time-Series Cross-Sectional Data under Selection on Observables,” (<a href="#ref-BlackwellGlynn:2018">Blackwell and Glynn 2018</a>)</li>
</ul>
<p>The basic intuition behind MSMs is similar to <a href="blog/2020/12/01/ipw-binary-continuous/">simpler inverse probability weighting</a>:</p>
<ul>
<li>Calculate weights using confounders and the time structure</li>
<li>Calculate the average treatment effect using the weights and the time structure</li>
</ul>
<p>The formula for calculating weights differs depending on if the treatment is binary or continuous, and they’re written slightly differently across those different resources listed above.</p>
<p>Here’s my version of how to calculate stabilized inverse probability weights with a binary treatment:</p>
<p><code>$$\text{Binary stabilized IPW}_{it} = \prod^t_{t = 1} \frac{P[X_{it} | \bar{X}_{i, t-1}, V_i]}{P[X_{it} | \bar{X}_{i, t-1}, Y_{i, t-1}, C_{it}, V_i]}$$</code></p>
<p>There are a ton of variables in this equation. Let’s go through them one at a time:</p>
<ul>
<li><code>\(i\)</code> stands for an individual (person, country, etc.)</li>
<li><code>\(t\)</code> stands for a time period (year, month, day, etc.)</li>
<li><code>\(X\)</code> stands for the observed treatment status; <code>\(X_{it}\)</code> stands for the observed treatment status of an individual at a given time. This is often written more specifically as <code>\(X_{it} = x_{it}\)</code> (see equation 1 in p. 46 in <a href="#ref-ThoemmesOng:2016">Thoemmes and Ong</a> (<a href="#ref-ThoemmesOng:2016">2016</a>), and <a href="https://rpubs.com/mbounthavong/IPTW_MSM_Tutorial">the equation at the beginning of this tutorial here</a>, for instance), but for simplicity I’ll just write it as <code>\(X_{it}\)</code>.</li>
<li><code>\(\bar{X}\)</code> stands for the individual’s history of treatment assignment (e.g. all <code>\(X\)</code> values in previous time periods)</li>
<li><code>\(Y\)</code> stands for the outcome; <code>\(Y_{it}\)</code> stands for the outcome of an individual at a given time.</li>
<li><code>\(C\)</code> stands for time <em>varying</em> confounders; because these change over time, <code>\(C\)</code> gets a <code>\(t\)</code> subscript: <code>\(C_{it}\)</code></li>
<li><code>\(V\)</code> stands for time <em>invarying</em> confounders; that’s why there’s no <code>\(t\)</code> in <code>\(V_i\)</code></li>
<li>Finally <code>\(P[\cdot]\)</code> stands for the probability distribution</li>
</ul>
<p>Here’s a more human explanation:</p>
<ul>
<li>The numerator contains the probability of the observed treatment status ($X$) at each time given the previous history of treatment ($\bar{X}$) and time <em>invariant</em> confounders ($V_i$)</li>
<li>The denominator contains the probability of the observed treatment status ($X$) at each time given the previous history of treatment ($\bar{X}$), previous outcomes ($Y_{i, t-1}$), time *varying* confounders ($C_{it}$) and time *invariant* confounders ($V_i$). The previous outcomes part ($Y_{i, t-1}$) is optional; if you think that the outcome’s previous values influence current values, and the DAG shows an arrow from <code>\(Y_{t-1}\)</code> and <code>\(Y_t\)</code>, include it.</li>
</ul>
<p>Importantly, time varying confounders ($C_{it}$) are included in the denominator only, not the numerator. The lagged outcome ($Y_{i, t-1}$), if used, also only goes in the denominator.</p>
<p>Technically the numerator can just be 1 instead of the whole <code>\(P[\cdot]\)</code> thing, but that creates unstable weights. Using <code>\(P[\cdot]\)</code> in the numerator creates stabilized weights.</p>
<p>The equation for continuous weights looks really similar:</p>
<p><code>$$\text{Continuous stabilized IPW}_{it} = \prod^t_{t = 1} \frac{f_{X | \bar{X}, V}[(X_{it} | \bar{X}_{i, t-1}, V_i); \mu_1, \sigma^2_1]}{f_{X | \bar{X}, Y, C, V}[(X_{it} | \bar{X}_{i, t-1}, Y_{i, t-1}, C_{it}, V_i), \mu_2, \sigma^2_2]}$$</code></p>
<p>Yikes. This is looks really complicated (and it is!), but again we can separate it into individual parts:</p>
<ul>
<li><code>\(X\)</code>, <code>\(Y\)</code>, <code>\(V\)</code>, <code>\(C\)</code>, <code>\(i\)</code>, and <code>\(t\)</code> are all the same as the binary version of the formula</li>
<li>The numerator is still the treatment, treatment history, and time invariant confounders</li>
<li>The denominator is still the treatment, treatment history, previous outcome, time varying confounders, and time invariant confounders</li>
<li>The <code>\(f_{\cdot}(\cdot)\)</code> functions are new and stand for a probability density function with a mean of <code>\(\mu\)</code> and a variance of <code>\(\sigma^2\)</code></li>
</ul>
<p>That’s a ton of information and it’s all really abstract. Let’s try this out with some simulated data</p>
<h2 id="simulated-time-series-cross-sectional-data">Simulated time-series cross-sectional data</h2>
<p>For this example, we’ll use some data I generated with the <strong>fabricatr</strong> package, which makes it really easy to build multilevel and nested structures like country- and year-level variables. The actual code to generate this is a little long, mostly because it’s heavily annotated and has a ton of intermediate variables. You can download the data here if you want to follow along with the rest of the code:</p>
<ul>
<li><a href="happiness_data.csv"><i class="fas fa-file-csv"></i> <code>happiness_data.csv</code></a></li>
<li><a href="happiness_simulation.R"><i class="fab fa-r-project"></i> <code>happiness_simulation.R</code></a></li>
</ul>
<p>It contains a bunch of different columns:</p>
<ul>
<li><code>country</code>: The country name (generated as a pronouncable 5-letter sequence (<a href="https://arxiv.org/html/0901.4016">proquint</a>) with the <a href="https://reside-ic.github.io/ids/"><strong>ids</strong> package</a>)</li>
<li><code>year</code>: The year</li>
<li><code>vacation_days</code>: The number of mandated vacation days. This is a treatment variable.</li>
<li><code>policy</code>: An indicator for whether a country has passed a policy that mandates a 6-hour workday. This is another treatment variable</li>
<li><code>happiness_vacation</code>: The level of happiness in a country, on a scale of 1–100 (more happiness = higher values). This is the outcome when using <code>vacation_days</code> as the treatment.</li>
<li><code>happiness_policy</code>: The level of happiness in a country. This is the outcome when using <code>policy</code> as the treatment.</li>
<li><code>log_populuation</code>: Logged population</li>
<li><code>log_gdp</code>: Logged GDP</li>
<li><code>gdp</code>: GDP</li>
<li><code>population</code>: Population</li>
<li><code>gdp_cap</code>: GDP per capita</li>
<li><code>log_gdp_cap</code>: Logged GDP per capita</li>
<li><code>democracy</code>: The country’s level of democracy, on a scale of 1–100 (more democratic = higher values)</li>
<li><code>corruption</code>: The level of political corruption in a country, on a scale of 1–100 (more corrupt = higher values)</li>
<li><code>lag_*</code>: Lagged versions of a bunch of different columns</li>
</ul>
<p>And here’s what the actual data looks like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">happiness_data <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">read_csv</span>(<span style="color:#e6db74">&#34;happiness_data.csv&#34;</span>)

<span style="color:#a6e22e">glimpse</span>(happiness_data)
<span style="color:#75715e">## Rows: 1,520</span>
<span style="color:#75715e">## Columns: 18</span>
<span style="color:#75715e">## $ country                &lt;chr&gt; &#34;Mimim&#34;, &#34;Mimim&#34;, &#34;Mimim&#34;, &#34;Mimim&#34;, &#34;Mimim&#34;, &#34;Mimim&#34;, &#34;M…</span>
<span style="color:#75715e">## $ year                   &lt;dbl&gt; 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 20…</span>
<span style="color:#75715e">## $ vacation_days          &lt;dbl&gt; 12, 14, 16, 17, 18, 20, 21, 22, 24, 25, 9, 11, 13, 14, 1…</span>
<span style="color:#75715e">## $ policy                 &lt;dbl&gt; 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,…</span>
<span style="color:#75715e">## $ happiness_vacation     &lt;dbl&gt; 43.2, 45.1, 52.7, 52.7, 53.5, 61.4, 63.1, 66.1, 71.4, 73…</span>
<span style="color:#75715e">## $ happiness_policy       &lt;dbl&gt; 36.9, 40.6, 44.3, 46.3, 54.3, 58.4, 54.7, 59.1, 67.6, 59…</span>
<span style="color:#75715e">## $ log_population         &lt;dbl&gt; 17.4, 17.4, 17.5, 17.5, 17.6, 17.6, 17.7, 17.7, 17.8, 17…</span>
<span style="color:#75715e">## $ log_gdp                &lt;dbl&gt; 23.1, 23.2, 23.3, 23.4, 23.5, 23.6, 23.7, 23.8, 23.9, 24…</span>
<span style="color:#75715e">## $ gdp                    &lt;dbl&gt; 1.06e+10, 1.18e+10, 1.27e+10, 1.48e+10, 1.57e+10, 1.78e+…</span>
<span style="color:#75715e">## $ population             &lt;dbl&gt; 36049651, 37745007, 39520093, 41378659, 43324629, 453621…</span>
<span style="color:#75715e">## $ gdp_cap                &lt;dbl&gt; 293, 313, 321, 358, 361, 392, 434, 446, 483, 528, 5750, …</span>
<span style="color:#75715e">## $ log_gdp_cap            &lt;dbl&gt; 5.68, 5.74, 5.77, 5.88, 5.89, 5.97, 6.07, 6.10, 6.18, 6.…</span>
<span style="color:#75715e">## $ democracy              &lt;dbl&gt; 56.9, 59.8, 77.5, 71.0, 76.2, 83.1, 87.3, 92.2, 100.0, 9…</span>
<span style="color:#75715e">## $ corruption             &lt;dbl&gt; 63.4, 62.9, 62.0, 60.7, 61.9, 60.4, 60.4, 57.9, 58.0, 58…</span>
<span style="color:#75715e">## $ lag_policy             &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1,…</span>
<span style="color:#75715e">## $ lag_happiness_policy   &lt;dbl&gt; 36.8, 36.9, 40.6, 44.3, 46.3, 54.3, 58.4, 54.7, 59.1, 67…</span>
<span style="color:#75715e">## $ lag_vacation_days      &lt;dbl&gt; 12, 12, 14, 16, 17, 18, 20, 21, 22, 24, 9, 9, 11, 13, 14…</span>
<span style="color:#75715e">## $ lag_happiness_vacation &lt;dbl&gt; 41.5, 43.2, 45.1, 52.7, 52.7, 53.5, 61.4, 63.1, 66.1, 71…</span>
</code></pre></div><p>We’ll use this data explore two different questions:</p>
<ol>
<li><strong>Binary treatment: What is the effect of a 6-hour workday policy on national happiness?</strong></li>
<li><strong>Continuous treatment: What is the effect of the number of mandated vacation days on national happiness?</strong></li>
</ol>
<h2 id="marginal-structural-model-with-a-binary-treatment">Marginal structural model with a binary treatment</h2>
<p>Before we do anything with the binary treatment, we need to filter the data a little. Because of the nature of the data, some of the fake countries never implement the policy and have all 0s in the <code>policy</code> column. Weird things happen with the math of logistic regression if there are countries that have all 0s or all 1s for the outcome, since it’s technically impossible to predict their outcomes. That’s why <a href="https://vuorre.netlify.app/post/2019/02/18/analyze-analog-scale-ratings-with-zero-one-inflated-beta-models/">zero-one inflated beta (ZOIB) models or hurdle models</a> are a thing—they’re two step models that first model if you do the policy at all, then model the probability of the policy if it does happen. Rather than deal with ZOIB stuff here, I made it so that all countries start with 0 for the policy (i.e. no country has the policy in the first year), and then here we filter out any countries that don’t ever implement the policy.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">happiness_binary <span style="color:#f92672">&lt;-</span> happiness_data <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">group_by</span>(country) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(never_policy <span style="color:#f92672">=</span> <span style="color:#a6e22e">all</span>(policy <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">ungroup</span>() <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">filter</span>(<span style="color:#f92672">!</span>never_policy)
</code></pre></div><h3 id="naive-estimate-without-weights">Naive estimate without weights</h3>
<p>Before playing with MSMs, let’s look at what the effect of the policy is on happiness without doing any inverse probability weighting for DAG adjustment. This is what most political science and international relations and public policy papers do. This is what I did in my dissertation and what I’ve done in a bunch of working papers. The wrongness of this approach is why I’m writing this post :)</p>
<p>This is just a regular linear regression model. I could run it with <code>lm()</code>, but then a ton of country and year coefficients would be included by default in the results, so I use <code>feols()</code> from the delightful <strong>fixest</strong> package to include country and year as fixed effects. The results from <code>feols()</code> and <code>lm()</code> are identical here; <code>feols()</code> is cleaner and faster.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">model_naive <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">feols</span>(happiness_policy <span style="color:#f92672">~</span> policy <span style="color:#f92672">+</span> log_gdp_cap <span style="color:#f92672">+</span> democracy <span style="color:#f92672">+</span> 
                       corruption <span style="color:#f92672">+</span> lag_happiness_policy <span style="color:#f92672">+</span> lag_policy <span style="color:#f92672">|</span> country <span style="color:#f92672">+</span> year,
                data <span style="color:#f92672">=</span> happiness_binary)
<span style="color:#a6e22e">tidy</span>(model_naive)
<span style="color:#75715e">## # A tibble: 6 x 5</span>
<span style="color:#75715e">##   term                 estimate std.error statistic  p.value</span>
<span style="color:#75715e">##   &lt;chr&gt;                   &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 policy                  6.76     0.397      17.0  1.90e-58</span>
<span style="color:#75715e">## 2 log_gdp_cap             3.80     1.85        2.05 4.07e- 2</span>
<span style="color:#75715e">## 3 democracy               0.146    0.0218      6.71 3.01e-11</span>
<span style="color:#75715e">## 4 corruption             -0.158    0.0252     -6.26 5.31e-10</span>
<span style="color:#75715e">## 5 lag_happiness_policy    0.172    0.0449      3.82 1.40e- 4</span>
<span style="color:#75715e">## 6 lag_policy             -1.54     0.511      -3.01 2.66e- 3</span>
</code></pre></div><p>According to this, implementing a 6-hour workday is associated with a 6.8-point increase in national happiness. This is wrong though! We need to generate and use time-adjusted inverse probability weights to adjust for these confounders.</p>
<h3 id="manual-weights">Manual weights</h3>
<p>We’ll follow this formula to use confounders and previous treatments and outcomes to generate stabilized weights:</p>
<p><code>$$\text{Binary stabilized IPW}_{it} = \prod^t_{t = 1} \frac{P[X_{it} | \bar{X}_{i, t-1}, V_i]}{P[X_{it} | \bar{X}_{i, t-1}, Y_{i, t-1}, C_{it}, V_i]}$$</code></p>
<p>The numerator predicts the treatment using the previous treatment and time invariant confounders. We’ll use logistic regression here, but I’m like 90% sure you can do fancier things like multilevel models or machine learning or Bayes stuff:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">model_num <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">glm</span>(policy <span style="color:#f92672">~</span> lag_policy <span style="color:#f92672">+</span> country, 
                 data <span style="color:#f92672">=</span> happiness_binary, family <span style="color:#f92672">=</span> <span style="color:#a6e22e">binomial</span>(link <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;logit&#34;</span>))
</code></pre></div><p>The denominator predicts the treatment using time-varying confounders, previous outcome, previous treatment, and time invariant confounders. Again we’ll use logistic regression here, but you can probably do fancier stuff too:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># There&#39;s a warning that fitted probabiltiies of 0 or 1 occurred, likely because</span>
<span style="color:#75715e"># my data is too perfect. Oh well---we&#39;ll live with it.</span>
model_denom <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">glm</span>(policy <span style="color:#f92672">~</span> log_gdp_cap <span style="color:#f92672">+</span> democracy <span style="color:#f92672">+</span> corruption <span style="color:#f92672">+</span> 
                     lag_happiness_policy <span style="color:#f92672">+</span> lag_policy <span style="color:#f92672">+</span> country, 
                   data <span style="color:#f92672">=</span> happiness_binary, family <span style="color:#f92672">=</span> <span style="color:#a6e22e">binomial</span>(link <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;logit&#34;</span>))

<span style="color:#75715e"># This also works if you use fixest::feglm() for country fixed effects</span>
<span style="color:#75715e"># model_denom &lt;- feglm(policy ~ log_gdp_cap + democracy + corruption +</span>
<span style="color:#75715e">#                        lag_happiness_policy + lag_policy | country,</span>
<span style="color:#75715e">#                      data = happiness_binary, family = binomial(link = &#34;logit&#34;))</span>
</code></pre></div><p>Finally we need to use the results from the numerator and denominator to construct the weights following the equation:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">happiness_binary_weights <span style="color:#f92672">&lt;-</span> happiness_binary <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># Propensity scores from the models</span>
  <span style="color:#a6e22e">mutate</span>(propensity_num <span style="color:#f92672">=</span> model_num<span style="color:#f92672">$</span>fitted.values,
         propensity_denom <span style="color:#f92672">=</span> model_denom<span style="color:#f92672">$</span>fitted.values) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># Probability of observed outcome</span>
  <span style="color:#a6e22e">mutate</span>(propensity_num_outcome <span style="color:#f92672">=</span> <span style="color:#a6e22e">ifelse</span>(policy <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>, propensity_num, <span style="color:#ae81ff">1</span> <span style="color:#f92672">-</span> propensity_num),
         propensity_denom_outcome <span style="color:#f92672">=</span> <span style="color:#a6e22e">ifelse</span>(policy <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>, propensity_denom, <span style="color:#ae81ff">1</span> <span style="color:#f92672">-</span> propensity_denom)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># Numerator / denominator</span>
  <span style="color:#a6e22e">mutate</span>(weights_no_time <span style="color:#f92672">=</span> propensity_num_outcome <span style="color:#f92672">/</span> propensity_denom_outcome) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># Calculate the cumulative product of the weights within each country</span>
  <span style="color:#a6e22e">group_by</span>(country) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(ipw <span style="color:#f92672">=</span> <span style="color:#a6e22e">cumprod</span>(weights_no_time)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">ungroup</span>()

happiness_binary_weights <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">select</span>(country, year, policy, happiness_policy, ipw) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">head</span>()
<span style="color:#75715e">## # A tibble: 6 x 5</span>
<span style="color:#75715e">##   country  year policy happiness_policy   ipw</span>
<span style="color:#75715e">##   &lt;chr&gt;   &lt;dbl&gt;  &lt;dbl&gt;            &lt;dbl&gt; &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 Mimim    2010      0             36.9 0.800</span>
<span style="color:#75715e">## 2 Mimim    2011      0             40.6 0.640</span>
<span style="color:#75715e">## 3 Mimim    2012      0             44.3 0.516</span>
<span style="color:#75715e">## 4 Mimim    2013      0             46.3 0.486</span>
<span style="color:#75715e">## 5 Mimim    2014      1             54.3 0.116</span>
<span style="color:#75715e">## 6 Mimim    2015      1             58.4 0.116</span>
</code></pre></div><p>Finally we’ll use those weights in a regression model to estimate the average treatment effect (ATE) of the policy on happiness. We need to use a model that accounts for the year and country panel structure for this. In every tutorial I’ve seen online, people use <code>geeglm()</code> from the <a href="https://cran.r-project.org/package=geepack"><strong>geepack</strong> package</a>, which lets you specify country and year dimensions in generalized estimating equations. These feel an awful lot like mixed models with random country/year effects. There’s some useful discussion and useful links about the differences between GEE models and multilevel models <a href="https://twitter.com/andrewheiss/status/1317634713935380480">in this Twitter thread here</a>. For the sake of this example, I’ll use multilevel models since I’m more familiar with them, and because you can build Bayesian ones with the <a href="https://paul-buerkner.github.io/brms/"><strong>brms</strong> package</a>; I have yet to find a Bayesian flavor of GEEs.</p>
<p>In the outcome model, we include the previous treatment history and the invariant confounders (<code>country</code>, which I include as a random effect). To account for the time structure in the data, I also include a year random effect.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">model_ate_binary <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lmer</span>(happiness_policy <span style="color:#f92672">~</span> policy <span style="color:#f92672">+</span> lag_policy <span style="color:#f92672">+</span> 
                           (<span style="color:#ae81ff">1</span> <span style="color:#f92672">|</span> country) <span style="color:#f92672">+</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">|</span> year), 
                  data <span style="color:#f92672">=</span> happiness_binary_weights, weights <span style="color:#f92672">=</span> ipw)
<span style="color:#a6e22e">tidy</span>(model_ate_binary, effects <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;fixed&#34;</span>)
<span style="color:#75715e">## # A tibble: 3 x 5</span>
<span style="color:#75715e">##   effect term        estimate std.error statistic</span>
<span style="color:#75715e">##   &lt;chr&gt;  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 fixed  (Intercept)    51.9      1.26      41.2 </span>
<span style="color:#75715e">## 2 fixed  policy          7.64     0.510     15.0 </span>
<span style="color:#75715e">## 3 fixed  lag_policy     -1.30     0.448     -2.91</span>
</code></pre></div><p>Voila! After adjusting for time-varying confounders and previous treatment history, the 6-hour workday policy <em>causes</em> an increase of 7.6 happiness points, on average. This is actually the effect that I built into the data. It worked!</p>
<p>However, I’m still not 100% confident that it did work. There are a lot of different moving parts here, and I’m not sure I have the right covariates in the right place (like in the outcome model, I’m fairly certain the model should be <code>happiness_policy ~ policy + lag_policy</code>, but I’m not sure).</p>
<p>Also the standard errors in this outcome model are wrong and have to be adjusted, either with fancy math or with bootstrapping (<a href="#ref-BlackwellGlynn:2018">Blackwell and Glynn</a> (<a href="#ref-BlackwellGlynn:2018">2018</a>) use boostrapping).</p>
<p>But still, this is really neat.</p>
<h3 id="weights-with-the-ipw-package">Weights with the <strong>ipw</strong> package</h3>
<p>Instead of manually doing all the math to generate the weights, we can use the <code>ipwtm()</code> function from the <a href="https://cran.r-project.org/package=ipw"><strong>ipw</strong> package</a> to do it for us. We still specify a numerator and denominator, but the function takes care of the rest of the math. The numbers are the same.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># ipwtm() can&#39;t handle tibbles! Force the data to be a data.frame</span>
weights_binary_ipw <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ipwtm</span>(
  exposure <span style="color:#f92672">=</span> policy,
  family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;binomial&#34;</span>,
  link <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;logit&#34;</span>,
  <span style="color:#75715e"># Time invariant stuff</span>
  numerator <span style="color:#f92672">=</span> <span style="color:#f92672">~</span> lag_policy <span style="color:#f92672">+</span> country,
  <span style="color:#75715e"># All confounders</span>
  denominator <span style="color:#f92672">=</span> <span style="color:#f92672">~</span> log_gdp_cap <span style="color:#f92672">+</span> democracy <span style="color:#f92672">+</span> corruption <span style="color:#f92672">+</span> 
    lag_happiness_policy <span style="color:#f92672">+</span> lag_policy <span style="color:#f92672">+</span> country,
  id <span style="color:#f92672">=</span> country,
  timevar <span style="color:#f92672">=</span> year,
  type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;all&#34;</span>,
  data <span style="color:#f92672">=</span> <span style="color:#a6e22e">as.data.frame</span>(happiness_binary)
)

<span style="color:#75715e"># They&#39;re the same!</span>
<span style="color:#a6e22e">head</span>(weights_binary_ipw<span style="color:#f92672">$</span>ipw.weights)
<span style="color:#75715e">## [1] 0.800 0.640 0.516 0.486 0.116 0.116</span>
<span style="color:#a6e22e">head</span>(happiness_binary_weights<span style="color:#f92672">$</span>ipw)
<span style="color:#75715e">## [1] 0.800 0.640 0.516 0.486 0.116 0.116</span>
</code></pre></div><p>This <code>weights_binary_ipw</code> object contains a bunch of other information too, but all we really care about here is what’s in the <code>ipw.weights</code> slot. We can add those weights as a column in a dataset and run the outcome model, which will give us the same ATE as before (unsurprisingly, since they’re identical). Technically we don’t need to add a new column with the weights—the model will work if they’re a standalone vector—but I don’t like mixing data frames and standalone vectors and prefer to keep everything in one nice object.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">happiness_binary_ipw <span style="color:#f92672">&lt;-</span> happiness_binary <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(ipw <span style="color:#f92672">=</span> weights_binary_ipw<span style="color:#f92672">$</span>ipw.weights)

model_ate_binary_ipw <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lmer</span>(happiness_policy <span style="color:#f92672">~</span> policy <span style="color:#f92672">+</span> lag_policy <span style="color:#f92672">+</span> 
                               (<span style="color:#ae81ff">1</span> <span style="color:#f92672">|</span> country) <span style="color:#f92672">+</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">|</span> year), 
                             data <span style="color:#f92672">=</span> happiness_binary_ipw, weights <span style="color:#f92672">=</span> ipw)
<span style="color:#a6e22e">tidy</span>(model_ate_binary_ipw, effects <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;fixed&#34;</span>)
<span style="color:#75715e">## # A tibble: 3 x 5</span>
<span style="color:#75715e">##   effect term        estimate std.error statistic</span>
<span style="color:#75715e">##   &lt;chr&gt;  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 fixed  (Intercept)    51.9      1.26      41.2 </span>
<span style="color:#75715e">## 2 fixed  policy          7.64     0.510     15.0 </span>
<span style="color:#75715e">## 3 fixed  lag_policy     -1.30     0.448     -2.91</span>
</code></pre></div><h2 id="marginal-structural-model-with-a-continuous-treatment">Marginal structural model with a continuous treatment</h2>
<p>Here our main question is what the causal effect of mandated vacation time is on national happiness. This treatment is continuous—days of vacation. We don’t need to worry about having all 1s or all 0s and worry about zero-one inflated models or anything, since the treatment varies a lot across all countries and years.</p>
<h3 id="naive-estimate-without-weights-1">Naive estimate without weights</h3>
<p>As before, we’ll look at the effect of vacation time is on happiness without any weights. Again, this is the approach in like a billion political science papers.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">model_naive <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">feols</span>(happiness_vacation <span style="color:#f92672">~</span> vacation_days <span style="color:#f92672">+</span> log_gdp_cap <span style="color:#f92672">+</span> democracy <span style="color:#f92672">+</span> 
                       corruption <span style="color:#f92672">+</span> lag_happiness_vacation <span style="color:#f92672">+</span> lag_vacation_days <span style="color:#f92672">|</span> country <span style="color:#f92672">+</span> year,
                data <span style="color:#f92672">=</span> happiness_data)
<span style="color:#a6e22e">tidy</span>(model_naive)
<span style="color:#75715e">## # A tibble: 6 x 5</span>
<span style="color:#75715e">##   term                   estimate std.error statistic  p.value</span>
<span style="color:#75715e">##   &lt;chr&gt;                     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 vacation_days            2.12      0.129      16.4  1.85e-55</span>
<span style="color:#75715e">## 2 log_gdp_cap              1.35      0.226       5.98 2.83e- 9</span>
<span style="color:#75715e">## 3 democracy                0.0516    0.0156      3.31 9.63e- 4</span>
<span style="color:#75715e">## 4 corruption              -0.0624    0.0224     -2.78 5.48e- 3</span>
<span style="color:#75715e">## 5 lag_happiness_vacation   0.559     0.148       3.76 1.74e- 4</span>
<span style="color:#75715e">## 6 lag_vacation_days       -1.35      0.382      -3.54 4.13e- 4</span>
</code></pre></div><p>Here we see that an additional day of vacation is associated with a 2.1-point increase in national happiness. Once again, this is wrong and biased, since there’s no weighting adjustment that deals with time-based confounding.</p>
<h3 id="manual-weights-1">Manual weights</h3>
<p>We’ll follow the formula for continuous stabilized weights:</p>
<p><code>$$\text{Continuous stabilized IPW}_{it} = \prod^t_{t = 1} \frac{f_{X | \bar{X}, V}[(X_{it} | \bar{X}_{i, t-1}, V_i); \mu_1, \sigma^2_1]}{f_{X | \bar{X}, Y, C, V}[(X_{it} | \bar{X}_{i, t-1}, Y_{i, t-1}, C_{it}, V_i), \mu_2, \sigma^2_2]}$$</code></p>
<p>The numerator predicts the treatment using the previous treatment and time invariant confounders. We’ll use regular old linear regression here, but again, I’m like 90% sure you can do fancier things like multilevel models or machine learning or Bayes stuff:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">model_num <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lm</span>(vacation_days <span style="color:#f92672">~</span> lag_vacation_days <span style="color:#f92672">+</span> country, 
                data <span style="color:#f92672">=</span> happiness_data)

<span style="color:#75715e"># This multilevel model works too</span>
<span style="color:#75715e"># model_num &lt;- lmer(vacation_days ~ lag_vacation_days + (1 | country), </span>
<span style="color:#75715e">#                   data = happiness_data)</span>

<span style="color:#75715e"># Calculate the probability distribution</span>
num <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">dnorm</span>(happiness_data<span style="color:#f92672">$</span>vacation_days,
             <span style="color:#a6e22e">predict</span>(model_num),
             <span style="color:#a6e22e">sd</span>(<span style="color:#a6e22e">residuals</span>(model_num)))
</code></pre></div><p>The denominator predicts the treatment using time-varying confounders, previous outcome, previous treatment, and time invariant confounders. Again we’ll use linear regression, but you can probably do fancier stuff too:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">model_denom <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lm</span>(vacation_days <span style="color:#f92672">~</span> log_gdp_cap <span style="color:#f92672">+</span> democracy <span style="color:#f92672">+</span> corruption <span style="color:#f92672">+</span> 
                    lag_happiness_vacation <span style="color:#f92672">+</span> lag_vacation_days <span style="color:#f92672">+</span> country, 
                  data <span style="color:#f92672">=</span> happiness_data)

<span style="color:#75715e"># This multilevel model works too</span>
<span style="color:#75715e"># model_denom &lt;- lmer(vacation_days ~ log_gdp_cap + democracy + corruption + </span>
<span style="color:#75715e">#                     lag_happiness_vacation + lag_vacation_days + (1 | country), </span>
<span style="color:#75715e">#                   data = happiness_data)</span>

<span style="color:#75715e"># Calculate the probability distribution</span>
den <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">dnorm</span>(happiness_data<span style="color:#f92672">$</span>vacation_days,
             <span style="color:#a6e22e">predict</span>(model_denom),
             <span style="color:#a6e22e">sd</span>(<span style="color:#a6e22e">residuals</span>(model_denom)))
</code></pre></div><p>Finally we need to use the results from the numerator and denominator to build the inverse weights and calculate the cumulative product over time within each country:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Finally, we make actual IPW weights by building the fraction</span>
happiness_data_weights <span style="color:#f92672">&lt;-</span> happiness_data <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(weights_no_time <span style="color:#f92672">=</span> num <span style="color:#f92672">/</span> den) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">group_by</span>(country) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(ipw <span style="color:#f92672">=</span> <span style="color:#a6e22e">cumprod</span>(weights_no_time)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">ungroup</span>()

happiness_data_weights <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">select</span>(country, year, vacation_days, happiness_vacation, ipw) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">head</span>()
<span style="color:#75715e">## # A tibble: 6 x 5</span>
<span style="color:#75715e">##   country  year vacation_days happiness_vacation   ipw</span>
<span style="color:#75715e">##   &lt;chr&gt;   &lt;dbl&gt;         &lt;dbl&gt;              &lt;dbl&gt; &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 Mimim    2010            12               43.2 0.142</span>
<span style="color:#75715e">## 2 Mimim    2011            14               45.1 1.50 </span>
<span style="color:#75715e">## 3 Mimim    2012            16               52.7 1.13 </span>
<span style="color:#75715e">## 4 Mimim    2013            17               52.7 0.941</span>
<span style="color:#75715e">## 5 Mimim    2014            18               53.5 0.838</span>
<span style="color:#75715e">## 6 Mimim    2015            20               61.4 0.457</span>
</code></pre></div><p>Now we can use the weights to find the ATE, just like we did with the binary version. Again, I’m using a multilevel model instead of a GEE model, which I <em>think</em> is theoretically fine and legal.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">model_ate <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lmer</span>(happiness_vacation <span style="color:#f92672">~</span> vacation_days <span style="color:#f92672">+</span> lag_vacation_days <span style="color:#f92672">+</span> 
                    (<span style="color:#ae81ff">1</span> <span style="color:#f92672">|</span> country) <span style="color:#f92672">+</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">|</span> year), 
                  data <span style="color:#f92672">=</span> happiness_data_weights, weights <span style="color:#f92672">=</span> ipw)
<span style="color:#a6e22e">tidy</span>(model_ate, effects <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;fixed&#34;</span>)
<span style="color:#75715e">## # A tibble: 3 x 5</span>
<span style="color:#75715e">##   effect term              estimate std.error statistic</span>
<span style="color:#75715e">##   &lt;chr&gt;  &lt;chr&gt;                &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 fixed  (Intercept)          23.4     1.82        12.9</span>
<span style="color:#75715e">## 2 fixed  vacation_days         3.48    0.0908      38.4</span>
<span style="color:#75715e">## 3 fixed  lag_vacation_days    -1.19    0.0957     -12.4</span>
</code></pre></div><p>After correctly adjusting for all the time-varying confounding, the causal effect of an additional vacation day is 3.48 happiness points, which is bigger than the naive estimate of 2.1 that we found earlier.</p>
<p>HOWEVER, this isn’t what I built into the data?? In the simulated data, I made the vacation effect be 1.7. So either I did the simulation wrong and built the effect incorrectly and it’s not actually 1.7, or I’m misspecifying the model here. I’m pretty sure that the weights themselves are fine and correct—I copied the equation and code directly from <a href="#ref-BlackwellGlynn:2018">Blackwell and Glynn</a> (<a href="#ref-BlackwellGlynn:2018">2018</a>)’s replication data, and the weights and ATE are basically the same when using <code>ipwtm()</code>. I don’t know what’s going on. :(</p>
<h3 id="weights-with-the-ipw-package-1">Weights with the <strong>ipw</strong> package</h3>
<p>It’s also possible to use the <code>ipwtm()</code> function with continuous weights, but it runs <em>incredibly slowly</em> since it uses <code>geeglm()</code> behind the scenes to build the weights.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># This takes forever! like multiple minutes</span>
weights_ipw_continuous <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ipwtm</span>(
  exposure <span style="color:#f92672">=</span> vacation_days,
  family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;gaussian&#34;</span>,
  corstr <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ar1&#34;</span>,
  numerator <span style="color:#f92672">=</span> <span style="color:#f92672">~</span> lag_vacation_days <span style="color:#f92672">+</span> country,  <span style="color:#75715e"># Time invariant stuff</span>
  denominator <span style="color:#f92672">=</span> <span style="color:#f92672">~</span> log_gdp_cap <span style="color:#f92672">+</span> democracy <span style="color:#f92672">+</span> corruption <span style="color:#f92672">+</span> 
    lag_happiness_vacation <span style="color:#f92672">+</span> lag_vacation_days <span style="color:#f92672">+</span> country,  <span style="color:#75715e"># All confounders</span>
  id <span style="color:#f92672">=</span> country,
  timevar <span style="color:#f92672">=</span> year,
  type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;all&#34;</span>,
  data <span style="color:#f92672">=</span> <span style="color:#a6e22e">as.data.frame</span>(happiness_data)
)
</code></pre></div><p>Because it uses GEE models for the numerator and denominator and accounts for autoregressive time structures in the data (that’s what the <code>costr = &quot;ar1&quot;</code> argument is for), the weights are not exactly the same as the ones we found using manual math, but they’re super close:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Pretty close!</span>
<span style="color:#a6e22e">head</span>(weights_ipw_continuous<span style="color:#f92672">$</span>ipw.weights)
<span style="color:#75715e">## [1] 0.142 1.505 1.126 0.941 0.838 0.457</span>
<span style="color:#a6e22e">head</span>(happiness_data_weights<span style="color:#f92672">$</span>ipw)
<span style="color:#75715e">## [1] 0.142 1.505 1.126 0.941 0.838 0.457</span>
</code></pre></div><p>Finally we can use the weights to find the ATE. It’s basically identical to the effect we found with the manual math. (BUT STILL NOT 1.7 FOR WHATEVER REASON.)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">happiness_ipw <span style="color:#f92672">&lt;-</span> happiness_data <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(ipw <span style="color:#f92672">=</span> weights_ipw_continuous<span style="color:#f92672">$</span>ipw.weights)

model_ate_ipw <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lmer</span>(happiness_vacation <span style="color:#f92672">~</span> vacation_days <span style="color:#f92672">+</span> lag_vacation_days <span style="color:#f92672">+</span> 
                        (<span style="color:#ae81ff">1</span> <span style="color:#f92672">|</span> country) <span style="color:#f92672">+</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">|</span> year), 
                      data <span style="color:#f92672">=</span> happiness_ipw, weights <span style="color:#f92672">=</span> ipw)
<span style="color:#a6e22e">tidy</span>(model_ate_ipw, effects <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;fixed&#34;</span>)
<span style="color:#75715e">## # A tibble: 3 x 5</span>
<span style="color:#75715e">##   effect term              estimate std.error statistic</span>
<span style="color:#75715e">##   &lt;chr&gt;  &lt;chr&gt;                &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 fixed  (Intercept)          23.4     1.82        12.9</span>
<span style="color:#75715e">## 2 fixed  vacation_days         3.48    0.0908      38.4</span>
<span style="color:#75715e">## 3 fixed  lag_vacation_days    -1.19    0.0957     -12.4</span>
</code></pre></div><h2 id="important-caveats">Important caveats!</h2>
<p>This is just a quick practical overview of how to actually build IPWs and use MSMs. I didn’t cover any of the math behind MSMs or the assumptions behind them, their limitations, diagnostics you should do, etc. Like, weights should generally have an average of 1 and not have values that are too extreme (and if values are too extreme, you can/should truncate them).</p>
<p>ALSO I likely have something wrong here. If so, <em>let me know</em>! Download the simulated data, play with it, fix the MSMs and weights, and tell me what’s wrong. Please!</p>
<p>Consult all these resources for better details about the mechanics of these models:</p>
<div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-BlackwellGlynn:2018" class="csl-entry">
<p>Blackwell, Matthew, and Adam N. Glynn. 2018. “How to Make Causal Inferences with Time-Series Cross-Sectional Data Under Selection on Observables.” <em>American Political Science Review</em> 112 (4): 1067–82. <a href="https://doi.org/10.1017/s0003055418000357">https://doi.org/10.1017/s0003055418000357</a>.</p>
</div>
<div id="ref-ColeHernan:2008" class="csl-entry">
<p>Cole, Stephen R., and Miguel A. Hernán. 2008. “Constructing Inverse Probability Weights for Marginal Structural Models.” <em>American Journal of Epidemiology</em> 168 (6): 656–64. <a href="https://doi.org/10.1093/aje/kwn164">https://doi.org/10.1093/aje/kwn164</a>.</p>
</div>
<div id="ref-HernanRobins:2020" class="csl-entry">
<p>Hernán, Miguel A., and James M. Robins. 2020. <em>Causal Inference: What If</em>. Boca Raton, Florida: Chapman and Hall / CRC. <a href="https://www.hsph.harvard.edu/miguel-hernan/causal-inference-book/">https://www.hsph.harvard.edu/miguel-hernan/causal-inference-book/</a>.</p>
</div>
<div id="ref-ImaiRatkovic:2015" class="csl-entry">
<p>Imai, Kosuke, and Marc Ratkovic. 2015. “Robust Estimation of Inverse Probability Weights for Marginal Structural Models.” <em>Journal of the American Statistical Association</em> 110 (511): 1013–23. <a href="https://doi.org/10.1080/01621459.2014.956872">https://doi.org/10.1080/01621459.2014.956872</a>.</p>
</div>
<div id="ref-RobinsHernanBrumback:2000" class="csl-entry">
<p>Robins, James M., Miguel Ángel Hernán, and Babette Brumback. 2000. “Marginal Structural Models and Causal Inference in Epidemiology.” <em>Epidemiology</em> 11 (5): 550–60. <a href="https://doi.org/10.1097/00001648-200009000-00011">https://doi.org/10.1097/00001648-200009000-00011</a>.</p>
</div>
<div id="ref-ThoemmesOng:2016" class="csl-entry">
<p>Thoemmes, Felix, and Anthony D. Ong. 2016. “A Primer on Inverse Probability of Treatment Weighting and Marginal Structural Models.” <em>Emerging Adulthood</em> 4 (1): 40–59. <a href="https://doi.org/10.1177/2167696815621645">https://doi.org/10.1177/2167696815621645</a>.</p>
</div>
</div>
%!s(MISSING)]]></content>
        <category term="r" />
        <category term="tidyverse" />
        <category term="causal inference" />
        <category term="DAGs" />
        <category term="do calculus" />
        <category term="inverse probability weighting" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Generating inverse probability weights for both binary and continuous treatments]]></title>
        <link href="https://www.shagunjhaver.com/blog/2020/12/01/ipw-binary-continuous/" rel="alternate" />
        <published>2020-12-01T00:00:00+00:00</published>
        <updated>2020-12-01T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2020/12/01/ipw-binary-continuous/</id>
        <summary type="html"><![CDATA[Use R to close backdoor confounding by generating and using inverse probability weights for both binary and continuous treatments]]></summary>
        <content type="html"><![CDATA[<p>My <a href="https://evalf20.classes.andrewheiss.com/">program evaluation class</a> is basically a fun wrapper around topics in causal inference and econometrics. I’m a big fan of Judea Pearl-style <a href="https://bigthink.com/errors-we-live-by/judea-pearls-the-book-of-why-brings-news-of-a-new-science-of-causes">“causal revolution”</a> causal graphs (or <a href="https://cran.r-project.org/web/packages/ggdag/vignettes/intro-to-dags.html">DAGs</a>), and they’ve made it easier for both me and my students to understand econometric approaches like diff-in-diff, regression discontinuity, and instrumental variables.</p>
<p>DAGs are also incredibly helpful for doing causal inference with observational data <em>without</em> needing a specific quasi-experimental situation. As I show <a href="/blog/2020/02/25/closing-backdoors-dags/">in this blog post</a> (and in <a href="/research/chapters/heiss-causal-inference-2021/">this new textbook chapter!</a>), you can use DAGs to identify confounders that distort the relationship (i.e. open up backdoors) between treatment and outcome. You can then use statistical methods to close those backdoors and adjust for the confounding. In both that blog post and the chapter, I show how to do this with matching and with inverse probability weighting (IPW).</p>
<p>However, those examples assume that the treatment is binary. This is fine—lots of social programs <em>are</em> binary (used program/didn’t use program), and the math for creating inverse probability weights with binary treatment variables is fairly straightforward. However, treatment variables are also often <em>not</em> binary, especially outside of program evaluation.</p>
<p>In my own research, I’m working on a couple projects right now where the “treatment” is a count of anti-NGO legal restrictions in a country. I want to be able to use DAGs and inverse probability weighting to adjust for confounders, but I can’t use the IPW stuff I’ve been teaching because that variable isn’t binary! This research project gets even more complicated because it involves time-series cross-sectional (TSCS) data with both time-varying and time-invarying confounders, which opens up a whole other can of worms that I’ll figure out soon following <a href="#ref-BlackwellGlynn:2018">Blackwell and Glynn</a> (<a href="#ref-BlackwellGlynn:2018">2018</a>).</p>
<p>So I had to teach myself how to do IPW with continuous variables. This post shows how to calculate IPWs for both binary and continuous treatments, both manually and with a couple different R packages (<a href="https://cran.r-project.org/package=ipw"><strong>ipw</strong></a> and <a href="https://github.com/ngreifer/WeightIt"><strong>WeightIt</strong></a>).</p>
<h2 id="contents----omit-in-toc---">Contents <!-- omit in toc --></h2>
<ul>
<li><a href="#binary-treatments">Binary treatments</a>
<ul>
<li><a href="#example-data">Example data</a></li>
<li><a href="#ipw-manually-binary-treatment">IPW manually, binary treatment</a></li>
<li><a href="#ipw-with-the-ipw-package-binary-treatment">IPW with the <strong>ipw</strong> package, binary treatment</a></li>
<li><a href="#ipw-with-the-weightit-package-binary-treatment">IPW with the <strong>WeightIt</strong> package, binary treatment</a></li>
</ul>
</li>
<li><a href="#continuous-treatments">Continuous treatments</a>
<ul>
<li><a href="#example-data-1">Example data</a></li>
<li><a href="#ipw-manually-continuous-treatment">IPW manually, continuous treatment</a></li>
<li><a href="#ipw-with-the-ipw-package-continuous-treatment">IPW with the <strong>ipw</strong> package, continuous treatment</a></li>
<li><a href="#ipw-with-the-weightit-package-continuous-treatment">IPW with the <strong>WeightIt</strong> package, continuous treatment</a></li>
</ul>
</li>
<li><a href="#references">References</a></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">library</span>(tidyverse)
<span style="color:#a6e22e">library</span>(broom)
<span style="color:#a6e22e">library</span>(scales)
<span style="color:#a6e22e">library</span>(ggdag)
<span style="color:#a6e22e">library</span>(dagitty)
<span style="color:#a6e22e">library</span>(truncnorm)
<span style="color:#a6e22e">library</span>(ipw)
<span style="color:#a6e22e">library</span>(WeightIt)
</code></pre></div><h2 id="binary-treatments">Binary treatments</h2>
<h3 id="example-data">Example data</h3>
<p>For this example, we’ll generate a DAG for a hypothetical program where bed net use causes a reduction in malaria risk. That relationship is confounded by both income and health, and income influences health. Income and health both increase the probability of net usage.</p>
<p>The treatment here is binary: either people use nets or they don’t.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">mosquito_dag <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">dagify</span>(mal <span style="color:#f92672">~</span> net <span style="color:#f92672">+</span> inc <span style="color:#f92672">+</span> hlth,
                       net <span style="color:#f92672">~</span> inc <span style="color:#f92672">+</span> hlth,
                       hlth <span style="color:#f92672">~</span> inc,
                       coords <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(x <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(mal <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>, net <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, inc <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, hlth <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>),
                                     y <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(mal <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, net <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, inc <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, hlth <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>)),
                       exposure <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;net&#34;</span>,
                       outcome <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;mal&#34;</span>)

<span style="color:#a6e22e">ggdag_status</span>(mosquito_dag) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">guides</span>(color <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_dag</span>()
</code></pre></div><p><img src="/blog/2020/12/01/ipw-binary-continuous/index_files/figure-html/dag-binary-1.png" width="75%" style="display: block; margin: auto;" /></p>
<p>We’ll measure these nodes like so:</p>
<ul>
<li><strong>Malaria risk</strong>: scale from 0–100, mostly around 40, but ranging from 10ish to 80ish. Best to use a Beta distribution.</li>
<li><strong>Net use</strong>: binary 0/1, TRUE/FALSE variable, where 50% of people use nets. Best to use a binomial distribution. However, since we want to use other variables that increase the likelihood of using a net, we’ll generate a latent continuous variable, rescale it to 0–1, and then use it as probabilities in <code>rbinom()</code> and assign people to treatment based on those probabilities.</li>
<li><strong>Income</strong>: weekly income, measured in dollars, mostly around 500 ± 300. Best to use a normal distribution.</li>
<li><strong>Health</strong>: scale from 0–100, mostly around 70, but ranging from 50ish to 100. Best to use a Beta distribution.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Make this randomness consistent</span>
<span style="color:#a6e22e">set.seed</span>(<span style="color:#ae81ff">1234</span>)

<span style="color:#75715e"># Simulate 1138 people (just for fun)</span>
n_people <span style="color:#f92672">&lt;-</span> <span style="color:#ae81ff">1138</span>

net_data <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">tibble</span>(
  <span style="color:#75715e"># Make an ID column (not necessary, but nice to have)</span>
  id <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">:</span>n_people,
  <span style="color:#75715e"># Generate income variable: normal, 500 ± 300</span>
  income <span style="color:#f92672">=</span> <span style="color:#a6e22e">rnorm</span>(n_people, mean <span style="color:#f92672">=</span> <span style="color:#ae81ff">500</span>, sd <span style="color:#f92672">=</span> <span style="color:#ae81ff">75</span>)
) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># Generate health variable: beta, centered around 70ish</span>
  <span style="color:#a6e22e">mutate</span>(health_base <span style="color:#f92672">=</span> <span style="color:#a6e22e">rbeta</span>(n_people, shape1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">7</span>, shape2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>) <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>,
         <span style="color:#75715e"># Health increases by 0.02 for every dollar in income</span>
         health_income_effect <span style="color:#f92672">=</span> income <span style="color:#f92672">*</span> <span style="color:#ae81ff">0.02</span>,
         <span style="color:#75715e"># Make the final health score and add some noise</span>
         health <span style="color:#f92672">=</span> health_base <span style="color:#f92672">+</span> health_income_effect <span style="color:#f92672">+</span> <span style="color:#a6e22e">rnorm</span>(n_people, mean <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, sd <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>),
         <span style="color:#75715e"># Rescale so it doesn&#39;t go above 100</span>
         health <span style="color:#f92672">=</span> <span style="color:#a6e22e">rescale</span>(health, to <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#a6e22e">min</span>(health), <span style="color:#ae81ff">100</span>))) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># Generate net variable based on income, health, and random noise</span>
  <span style="color:#a6e22e">mutate</span>(net_score <span style="color:#f92672">=</span> (<span style="color:#ae81ff">0.5</span> <span style="color:#f92672">*</span> income) <span style="color:#f92672">+</span> (<span style="color:#ae81ff">1.5</span> <span style="color:#f92672">*</span> health) <span style="color:#f92672">+</span> <span style="color:#a6e22e">rnorm</span>(n_people, mean <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, sd <span style="color:#f92672">=</span> <span style="color:#ae81ff">15</span>),
         <span style="color:#75715e"># Scale net score down to 0.05 to 0.95 to create a probability of using a net</span>
         net_probability <span style="color:#f92672">=</span> <span style="color:#a6e22e">rescale</span>(net_score, to <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0.05</span>, <span style="color:#ae81ff">0.95</span>)),
         <span style="color:#75715e"># Randomly generate a 0/1 variable using that probability</span>
         net <span style="color:#f92672">=</span> <span style="color:#a6e22e">rbinom</span>(n_people, <span style="color:#ae81ff">1</span>, net_probability)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># Finally generate a malaria risk variable based on income, health, net use,</span>
  <span style="color:#75715e"># and random noise</span>
  <span style="color:#a6e22e">mutate</span>(malaria_risk_base <span style="color:#f92672">=</span> <span style="color:#a6e22e">rbeta</span>(n_people, shape1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>, shape2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>) <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>,
         <span style="color:#75715e"># Risk goes down by 10 when using a net. Because we rescale things,</span>
         <span style="color:#75715e"># though, we have to make the effect a lot bigger here so it scales</span>
         <span style="color:#75715e"># down to -10. Risk also decreases as health and income go up. I played</span>
         <span style="color:#75715e"># with these numbers until they created reasonable coefficients.</span>
         malaria_effect <span style="color:#f92672">=</span> (<span style="color:#ae81ff">-30</span> <span style="color:#f92672">*</span> net) <span style="color:#f92672">+</span> (<span style="color:#ae81ff">-1.9</span> <span style="color:#f92672">*</span> health) <span style="color:#f92672">+</span> (<span style="color:#ae81ff">-0.1</span> <span style="color:#f92672">*</span> income),
         <span style="color:#75715e"># Make the final malaria risk score and add some noise</span>
         malaria_risk <span style="color:#f92672">=</span> malaria_risk_base <span style="color:#f92672">+</span> malaria_effect <span style="color:#f92672">+</span> <span style="color:#a6e22e">rnorm</span>(n_people, <span style="color:#ae81ff">0</span>, sd <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>),
         <span style="color:#75715e"># Rescale so it doesn&#39;t go below 0,</span>
         malaria_risk <span style="color:#f92672">=</span> <span style="color:#a6e22e">rescale</span>(malaria_risk, to <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">70</span>))) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">select</span>(<span style="color:#f92672">-</span><span style="color:#a6e22e">c</span>(health_base, health_income_effect, net_score, net_probability, 
            malaria_risk_base, malaria_effect))

<span style="color:#a6e22e">head</span>(net_data)
<span style="color:#75715e">## # A tibble: 6 x 5</span>
<span style="color:#75715e">##      id income health   net malaria_risk</span>
<span style="color:#75715e">##   &lt;int&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;int&gt;        &lt;dbl&gt;</span>
<span style="color:#75715e">## 1     1   409.   63.1     0         45.1</span>
<span style="color:#75715e">## 2     2   521.   83.5     1         23.4</span>
<span style="color:#75715e">## 3     3   581.   73.0     0         36.5</span>
<span style="color:#75715e">## 4     4   324.   60.6     0         58.7</span>
<span style="color:#75715e">## 5     5   532.   73.4     1         32.7</span>
<span style="color:#75715e">## 6     6   538.   42.6     0         52.5</span>
</code></pre></div><h3 id="ipw-manually-binary-treatment">IPW manually, binary treatment</h3>
<p>If we just look at the effect of nets on malaria risk without any statistical adjustment, we see that nets cause a decrease of 13 points in malaria risk. This is wrong though because there’s confounding.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Wrong correlation-is-not-causation effect</span>
model_net_naive <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lm</span>(malaria_risk <span style="color:#f92672">~</span> net, data <span style="color:#f92672">=</span> net_data)
<span style="color:#a6e22e">tidy</span>(model_net_naive)
<span style="color:#75715e">## # A tibble: 2 x 5</span>
<span style="color:#75715e">##   term        estimate std.error statistic   p.value</span>
<span style="color:#75715e">##   &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 (Intercept)     41.9     0.413     102.  0.       </span>
<span style="color:#75715e">## 2 net            -13.6     0.572     -23.7 2.90e-101</span>
</code></pre></div><p>According to <em>do</em>-calculus logic, we need to adjust for both income and health:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">adjustmentSets</span>(mosquito_dag)
<span style="color:#75715e">## { hlth, inc }</span>
</code></pre></div><p>We’ll do that with inverse probability weighting. First we’ll use the health and income confounders to predict the treatment, or net use, and then we’ll generate propensity scores. We’ll then use those propensity scores to generate inverse probability weights following this formula:</p>
<p>$$
\frac{\text{Treatment}}{\text{Propensity}} - \frac{1 - \text{Treatment}}{1 - \text{Propensity}}
$$</p>
<p>This formula will calculate weights for the average treatment effect (ATE). <a href="https://livefreeordichotomize.com/2019/01/17/understanding-propensity-score-weighting/#how-do-we-incorporate-a-propensity-score-in-a-weight">Lucy D’Agostino McGowan has formulas for a bunch of different IPWs</a>, including the average treatment on the treated (ATT), average treatment among the controls (ATC), and other effects.</p>
<p>Here’s how we do that with R:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Logit model to predict net use</span>
model_predict_net <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">glm</span>(net <span style="color:#f92672">~</span> income <span style="color:#f92672">+</span> health,
                         family <span style="color:#f92672">=</span> <span style="color:#a6e22e">binomial</span>(link <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;logit&#34;</span>),
                         data <span style="color:#f92672">=</span> net_data)

<span style="color:#75715e"># Generate propensity scores and IPWs</span>
net_data_ipw <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">augment_columns</span>(model_predict_net, net_data,
                                type.predict <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;response&#34;</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">rename</span>(propensity <span style="color:#f92672">=</span> .fitted) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(ipw <span style="color:#f92672">=</span> (net <span style="color:#f92672">/</span> propensity) <span style="color:#f92672">+</span> ((<span style="color:#ae81ff">1</span> <span style="color:#f92672">-</span> net) <span style="color:#f92672">/</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">-</span> propensity)))

net_data_ipw <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">select</span>(id, income, health, net, malaria_risk, propensity, ipw) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">head</span>()
<span style="color:#75715e">## # A tibble: 6 x 7</span>
<span style="color:#75715e">##      id income health   net malaria_risk propensity   ipw</span>
<span style="color:#75715e">##   &lt;int&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;int&gt;        &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;</span>
<span style="color:#75715e">## 1     1   409.   63.1     0         45.1      0.380  1.61</span>
<span style="color:#75715e">## 2     2   521.   83.5     1         23.4      0.628  1.59</span>
<span style="color:#75715e">## 3     3   581.   73.0     0         36.5      0.659  2.93</span>
<span style="color:#75715e">## 4     4   324.   60.6     0         58.7      0.266  1.36</span>
<span style="color:#75715e">## 5     5   532.   73.4     1         32.7      0.597  1.68</span>
<span style="color:#75715e">## 6     6   538.   42.6     0         52.5      0.459  1.85</span>
</code></pre></div><p>Finally we’ll use those weights in a regression model to find the ATE. After adjusting for confounding and closing the backdoor paths opened by income and health, <strong>the effect of nets is -10.5</strong>, which is more accurate than the naive estimate we found before. Yay!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">model_net_ipw <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lm</span>(malaria_risk <span style="color:#f92672">~</span> net, data <span style="color:#f92672">=</span> net_data_ipw, weights <span style="color:#f92672">=</span> ipw)
<span style="color:#a6e22e">tidy</span>(model_net_ipw)
<span style="color:#75715e">## # A tibble: 2 x 5</span>
<span style="color:#75715e">##   term        estimate std.error statistic  p.value</span>
<span style="color:#75715e">##   &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 (Intercept)     40.4     0.409      98.8 0.      </span>
<span style="color:#75715e">## 2 net            -10.5     0.578     -18.3 1.83e-65</span>
</code></pre></div><h3 id="ipw-with-the-ipw-package-binary-treatment">IPW with the <strong>ipw</strong> package, binary treatment</h3>
<p>Instead of running a logistic regression model and generating propensity scores by hand, we can use the <strong>ipw</strong> package to generate that <code>ipw</code> column automatically. Specify the confounders in the <code>denominator</code> argument. There’s a <code>numerator</code> argument too that we can use for generating stabilized weights, but we’ll skip that for now.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># ipwpoint() can&#39;t handle tibbles! Force net_data to be a data.frame</span>
weights_ipwpoint <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ipwpoint</span>(
  exposure <span style="color:#f92672">=</span> net,
  family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;binomial&#34;</span>,  <span style="color:#75715e"># The treatment is binary</span>
  link <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;logit&#34;</span>,
  denominator <span style="color:#f92672">=</span> <span style="color:#f92672">~</span> income <span style="color:#f92672">+</span> health,
  data <span style="color:#f92672">=</span> <span style="color:#a6e22e">as.data.frame</span>(net_data)
)

<span style="color:#75715e"># They&#39;re the same!</span>
<span style="color:#a6e22e">head</span>(weights_ipwpoint<span style="color:#f92672">$</span>ipw.weights)
<span style="color:#75715e">## [1] 1.61 1.59 2.93 1.36 1.68 1.85</span>
<span style="color:#a6e22e">head</span>(net_data_ipw<span style="color:#f92672">$</span>ipw)
<span style="color:#75715e">## [1] 1.61 1.59 2.93 1.36 1.68 1.85</span>
</code></pre></div><p>The resulting <code>weights</code> object here is a standalone object, and you can do other things with it like <code>summary()</code>. We can add the weights back into the main data and then fit the final model (<em>technically</em> we don’t need to—we could just say <code>weights = weights_ipwpoint$ipw.weights</code> and it would work just fine, but I don’t like working with standalone vectors and prefer to have them be columns, just so everything is all together in one place).</p>
<p>We get the same ATE of -10.5.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">net_data_ipwpoint <span style="color:#f92672">&lt;-</span> net_data <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(ipw <span style="color:#f92672">=</span> weights_ipwpoint<span style="color:#f92672">$</span>ipw.weights)

model_net_ipwpoint <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lm</span>(malaria_risk <span style="color:#f92672">~</span> net, 
                         data <span style="color:#f92672">=</span> net_data_ipwpoint, weights <span style="color:#f92672">=</span> ipw)
<span style="color:#a6e22e">tidy</span>(model_net_ipwpoint)
<span style="color:#75715e">## # A tibble: 2 x 5</span>
<span style="color:#75715e">##   term        estimate std.error statistic  p.value</span>
<span style="color:#75715e">##   &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 (Intercept)     40.4     0.409      98.8 0.      </span>
<span style="color:#75715e">## 2 net            -10.5     0.578     -18.3 1.83e-65</span>
</code></pre></div><h3 id="ipw-with-the-weightit-package-binary-treatment">IPW with the <strong>WeightIt</strong> package, binary treatment</h3>
<p>We can also use <a href="https://ngreifer.github.io/WeightIt/articles/WeightIt.html">the <strong>WeightIt</strong> package</a> to generate weights. It has slightly different syntax and can find all sorts of different estimands beyond the ATE (like <a href="https://livefreeordichotomize.com/2019/01/17/understanding-propensity-score-weighting/#how-do-we-incorporate-a-propensity-score-in-a-weight">most of the ones Lucy has listed</a>). It can also handle a bunch of different methods beyond propensity scores. <strong>WeightIt</strong> can also handle tibbles, which is nice. It <em>also</em> provides a bunch of other summary information (if you use <code>summary()</code>), like effective sample sizes (ESS) in the treated/untreated groups and covariate balance.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">weights_weightit <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">weightit</span>(net <span style="color:#f92672">~</span> income <span style="color:#f92672">+</span> health,  <span style="color:#75715e"># Model net use with confounders</span>
                             data <span style="color:#f92672">=</span> net_data, 
                             estimand <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ATE&#34;</span>,  <span style="color:#75715e"># Find the ATE</span>
                             method <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ps&#34;</span>)  <span style="color:#75715e"># Build weights with propensity scores</span>
weights_weightit
<span style="color:#75715e">## A weightit object</span>
<span style="color:#75715e">##  - method: &#34;ps&#34; (propensity score weighting)</span>
<span style="color:#75715e">##  - number of obs.: 1138</span>
<span style="color:#75715e">##  - sampling weights: none</span>
<span style="color:#75715e">##  - treatment: 2-category</span>
<span style="color:#75715e">##  - estimand: ATE</span>
<span style="color:#75715e">##  - covariates: income, health</span>

<span style="color:#75715e"># See even more details here</span>
<span style="color:#75715e"># summary(weights_weightit)</span>

<span style="color:#75715e"># Same as the other methods!</span>
<span style="color:#a6e22e">head</span>(weights_weightit<span style="color:#f92672">$</span>weights)
<span style="color:#75715e">## [1] 1.61 1.59 2.93 1.36 1.68 1.85</span>
</code></pre></div><p>As with <strong>ipw</strong>, we can add the weights to the dataset and run the model to find the same -10.5 ATE:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">net_data_weightit <span style="color:#f92672">&lt;-</span> net_data <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(ipw <span style="color:#f92672">=</span> weights_weightit<span style="color:#f92672">$</span>weights)

model_net_weightit <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lm</span>(malaria_risk <span style="color:#f92672">~</span> net, 
                         data <span style="color:#f92672">=</span> net_data_weightit, weights <span style="color:#f92672">=</span> ipw)
<span style="color:#a6e22e">tidy</span>(model_net_weightit)
<span style="color:#75715e">## # A tibble: 2 x 5</span>
<span style="color:#75715e">##   term        estimate std.error statistic  p.value</span>
<span style="color:#75715e">##   &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 (Intercept)     40.4     0.409      98.8 0.      </span>
<span style="color:#75715e">## 2 net            -10.5     0.578     -18.3 1.83e-65</span>
</code></pre></div><h2 id="continuous-treatments">Continuous treatments</h2>
<h3 id="example-data-1">Example data</h3>
<p>Inverse probability weights work with continuous treatment variables too, but the math is a <del>little</del> lot trickier. For this example, we’ll generate a DAG for a hypothetical program where poorer families are given cash grants that they can spend on malaria prevention supplies, like mosquito nets, chemical treatments, and medication. It’s a voluntary program—people self select into it, and we’ll assume that people with lower health scores and lower income will sign up. The amount of the grant depends on income.</p>
<p>The treatment here is continuous: people get different amounts of anti-malaria grant money. For the sake of simplicity here, everyone gets some grant money. I’m not even going to try multilevel zero-inflated models or anything (<a href="https://vuorre.netlify.app/post/2019/02/18/analyze-analog-scale-ratings-with-zero-one-inflated-beta-models/">though those are cool!</a>).</p>
<p>The DAG looks the same as before (since we’re trying to keep things super simple here):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">grant_dag <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">dagify</span>(mal <span style="color:#f92672">~</span> grant <span style="color:#f92672">+</span> inc <span style="color:#f92672">+</span> hlth,
                    grant <span style="color:#f92672">~</span> inc <span style="color:#f92672">+</span> hlth,
                    hlth <span style="color:#f92672">~</span> inc,
                    coords <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(x <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(mal <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>, grant <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, inc <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, hlth <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>),
                                  y <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(mal <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, grant <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, inc <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, hlth <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>)),
                    exposure <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;grant&#34;</span>,
                    outcome <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;mal&#34;</span>)

<span style="color:#a6e22e">ggdag_status</span>(grant_dag) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">guides</span>(color <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_dag</span>()
</code></pre></div><p><img src="/blog/2020/12/01/ipw-binary-continuous/index_files/figure-html/dag-continuous-1.png" width="75%" style="display: block; margin: auto;" /></p>
<p>We’ll measure these nodes like so:</p>
<ul>
<li><strong>Malaria risk</strong>: scale from 0–100, mostly around 40, but ranging from 10ish to 80ish. Best to use a Beta distribution.</li>
<li><strong>Grant</strong>: amount between 5 and 40, centered around 20ish.</li>
<li><strong>Income</strong>: weekly income, measured in dollars, mostly around 500 ± 300. Best to use a normal distribution.</li>
<li><strong>Health</strong>: scale from 0–100, mostly around 70, but ranging from 50ish to 100. Best to use a Beta distribution.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Make this randomness consistent</span>
<span style="color:#a6e22e">set.seed</span>(<span style="color:#ae81ff">1234</span>)

<span style="color:#75715e"># Simulate 1504 people</span>
n_people <span style="color:#f92672">&lt;-</span> <span style="color:#ae81ff">1504</span>

grant_data <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">tibble</span>(
  <span style="color:#75715e"># Make an ID column (not necessary, but nice to have)</span>
  id <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">:</span>n_people,
  <span style="color:#75715e"># Generate income variable: normal, 500 ± 300</span>
  income <span style="color:#f92672">=</span> <span style="color:#a6e22e">rnorm</span>(n_people, mean <span style="color:#f92672">=</span> <span style="color:#ae81ff">500</span>, sd <span style="color:#f92672">=</span> <span style="color:#ae81ff">75</span>)
) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#75715e"># Generate health variable: beta, centered around 70ish</span>
  <span style="color:#a6e22e">mutate</span>(health_base <span style="color:#f92672">=</span> <span style="color:#a6e22e">rbeta</span>(n_people, shape1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">7</span>, shape2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>) <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>,
         <span style="color:#75715e"># Health increases by 0.02 for every dollar in income</span>
         health_income_effect <span style="color:#f92672">=</span> income <span style="color:#f92672">*</span> <span style="color:#ae81ff">0.02</span>,
         <span style="color:#75715e"># Make the final health score and add some noise</span>
         health <span style="color:#f92672">=</span> health_base <span style="color:#f92672">+</span> health_income_effect <span style="color:#f92672">+</span> <span style="color:#a6e22e">rnorm</span>(n_people, mean <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, sd <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>),
         <span style="color:#75715e"># Rescale so it doesn&#39;t go above 100</span>
         health <span style="color:#f92672">=</span> <span style="color:#a6e22e">rescale</span>(health, to <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#a6e22e">min</span>(health), <span style="color:#ae81ff">100</span>))) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># Generate grant variable</span>
  <span style="color:#a6e22e">mutate</span>(grant_base <span style="color:#f92672">=</span> <span style="color:#a6e22e">rtruncnorm</span>(n_people, mean <span style="color:#f92672">=</span> <span style="color:#ae81ff">18</span>, sd <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>, a <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>, b <span style="color:#f92672">=</span> <span style="color:#ae81ff">40</span>),
         <span style="color:#75715e"># Grants are higher for people with lower incomes; higher for people with lower health</span>
         grant_effect <span style="color:#f92672">=</span> (income <span style="color:#f92672">*</span> <span style="color:#ae81ff">-0.25</span>) <span style="color:#f92672">+</span> (health <span style="color:#f92672">*</span> <span style="color:#ae81ff">-0.5</span>),
         <span style="color:#75715e"># Make the final grant amount + noise + rescale it back down</span>
         grant <span style="color:#f92672">=</span> grant_base <span style="color:#f92672">+</span> grant_effect <span style="color:#f92672">+</span> <span style="color:#a6e22e">rnorm</span>(n_people, mean <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, sd <span style="color:#f92672">=</span> <span style="color:#ae81ff">8</span>),
         grant <span style="color:#f92672">=</span> <span style="color:#a6e22e">round</span>(<span style="color:#a6e22e">rescale</span>(grant, to <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">40</span>)), <span style="color:#ae81ff">0</span>)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># Finally generate a malaria risk variable based on income, health, grant amount,</span>
  <span style="color:#75715e"># and random noise</span>
  <span style="color:#a6e22e">mutate</span>(malaria_risk_base <span style="color:#f92672">=</span> <span style="color:#a6e22e">rbeta</span>(n_people, shape1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>, shape2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>) <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>,
         <span style="color:#75715e"># Risk goes down as grant money goes up. I played with these numbers</span>
         <span style="color:#75715e"># until they created reasonable coefficients.</span>
         malaria_effect <span style="color:#f92672">=</span> (<span style="color:#ae81ff">-40</span> <span style="color:#f92672">*</span> grant) <span style="color:#f92672">+</span> (<span style="color:#ae81ff">-25</span> <span style="color:#f92672">*</span> health) <span style="color:#f92672">+</span> (<span style="color:#ae81ff">-0.05</span> <span style="color:#f92672">*</span> income),
         <span style="color:#75715e"># Make the final malaria risk score and add some noise</span>
         malaria_risk <span style="color:#f92672">=</span> malaria_risk_base <span style="color:#f92672">+</span> malaria_effect <span style="color:#f92672">+</span> <span style="color:#a6e22e">rnorm</span>(n_people, <span style="color:#ae81ff">0</span>, sd <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>),
         <span style="color:#75715e"># Rescale so it doesn&#39;t go below 0,</span>
         malaria_risk <span style="color:#f92672">=</span> <span style="color:#a6e22e">rescale</span>(malaria_risk, to <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">70</span>))) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">select</span>(<span style="color:#f92672">-</span><span style="color:#a6e22e">c</span>(health_base, health_income_effect, grant_base, grant_effect, 
            malaria_risk_base, malaria_effect))

<span style="color:#a6e22e">head</span>(grant_data)
<span style="color:#75715e">## # A tibble: 6 x 5</span>
<span style="color:#75715e">##      id income health grant malaria_risk</span>
<span style="color:#75715e">##   &lt;int&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;</span>
<span style="color:#75715e">## 1     1   409.   70.2    27         26.3</span>
<span style="color:#75715e">## 2     2   521.   75.3    18         33.3</span>
<span style="color:#75715e">## 3     3   581.   62.6    20         42.3</span>
<span style="color:#75715e">## 4     4   324.   83.9    28         11.8</span>
<span style="color:#75715e">## 5     5   532.   74.3    20         31.8</span>
<span style="color:#75715e">## 6     6   538.   75.9    15         36.2</span>
</code></pre></div><h3 id="ipw-manually-continuous-treatment">IPW manually, continuous treatment</h3>
<p>If we just look at the effect of grants on malaria risk without any adjustment, every extra grant dollar causes a drop of 0.4 malaria risk points. Once again, though, this is wrong because of confounding.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Wrong correlation-is-not-causation effect</span>
model_grant_naive <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lm</span>(malaria_risk <span style="color:#f92672">~</span> grant, data <span style="color:#f92672">=</span> grant_data)
<span style="color:#a6e22e">tidy</span>(model_grant_naive)
<span style="color:#75715e">## # A tibble: 2 x 5</span>
<span style="color:#75715e">##   term        estimate std.error statistic   p.value</span>
<span style="color:#75715e">##   &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 (Intercept)   44.2      1.35       32.8  2.56e-178</span>
<span style="color:#75715e">## 2 grant         -0.417    0.0615     -6.78 1.69e- 11</span>
</code></pre></div><p>According to <em>do</em>-calculus logic, we again need to adjust for both income and health:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">adjustmentSets</span>(grant_dag)
<span style="color:#75715e">## { hlth, inc }</span>
</code></pre></div><p>Here’s where the math gets tricky. When we worked with a binary treatment, we calculated the propensity score for each observation and then used this formula to generate inverse probability weights:</p>
<p>$$
\frac{\text{Treatment}}{\text{Propensity}} - \frac{1 - \text{Treatment}}{1 - \text{Propensity}}
$$</p>
<p>We can’t do that with continuous treatment variables, though, since we don’t really have propensity scores. Instead, we use this hairy-but-not-too-scary formula (from <a href="#ref-NaimiMoodieAuger:2014">Naimi et al.</a> (<a href="#ref-NaimiMoodieAuger:2014">2014</a>); <a href="http://www.jayskaufman.com/uploads/3/0/8/9/30891283/naimi_constructing_ipw_for_continuous_exposures_epidemiology_2014.pdf">ungated version here</a>; also <a href="https://meghapsimatrix.com/post/continuous-r-rmarkdown/">see this for another R example</a>):</p>
<p>$$
\text{IPW} = \frac{f_X (X; \mu_1, \sigma^2_1)}{f_{X | C} (X | C = c; \mu_2, \sigma^2_2)}
$$</p>
<p>Phew. That’s a lot of math, but it’s not too bad if we take it apart:</p>
<ul>
<li><code>\(X\)</code> stands for the continuous exposure or treatment variable</li>
<li><code>\(C\)</code> stands for the confounders</li>
<li>The <code>\(f_\cdot (\cdot)\)</code> function in both the numerator and denominator stands for a probability density function with a mean of <code>\(\mu\)</code> and a variance of <code>\(\sigma^2\)</code></li>
<li>The numerator <code>\(f_X (X; \mu_1, \sigma^2_1)\)</code> refers to the probability distribution of just the treatment variable (technically you could just use 1 as the numerator, but that can lead to unstable weights—using the probability distribution of the treatment helps stabilize the weights)</li>
<li>The denominator <code>\(f_{X | C} (X | C = c; \mu_2, \sigma^2_2)\)</code> refers to the probability distribution of the treatment variable explained by the confounders</li>
</ul>
<p>(Fun fact: I’m like 85% sure that the <code>\(\frac{\text{Treatment}}{\text{Propensity}} - \frac{1 - \text{Treatment}}{1 - \text{Propensity}}\)</code> formula is just an algebraically rearranged and simplified version of this fancier equation)</p>
<p>We can calculate each element of this fraction and then generate the inverse probability weights. Here’s how to do that with R:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># The numerator is the probability distribution of just the treatment variable.</span>
<span style="color:#75715e"># We&#39;ll use a normal distribution for it (hence dnorm()). We need to feed</span>
<span style="color:#75715e"># dnorm() the grant amount for each person, the predicted value from a simple</span>
<span style="color:#75715e"># grant ~ 1 model, and the sd of the residuals from that model</span>
model_num <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lm</span>(grant <span style="color:#f92672">~</span> <span style="color:#ae81ff">1</span>, data <span style="color:#f92672">=</span> grant_data)
num <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">dnorm</span>(grant_data<span style="color:#f92672">$</span>grant,
             <span style="color:#a6e22e">predict</span>(model_num),
             <span style="color:#a6e22e">sd</span>(model_num<span style="color:#f92672">$</span>residuals))

<span style="color:#75715e"># The denominator is the probability distribution of the treatment variable</span>
<span style="color:#75715e"># explained by the confounders. We&#39;ll again use a normal distribution for it.</span>
<span style="color:#75715e"># We&#39;ll feed dnorm() the grant amount, the predicted value from a model that</span>
<span style="color:#75715e"># includes the confounders, and the sd of the residuals from that model</span>
model_den <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lm</span>(grant <span style="color:#f92672">~</span> health <span style="color:#f92672">+</span> income, data <span style="color:#f92672">=</span> grant_data)
den <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">dnorm</span>(grant_data<span style="color:#f92672">$</span>grant,
             <span style="color:#a6e22e">predict</span>(model_den),
             <span style="color:#a6e22e">sd</span>(model_den<span style="color:#f92672">$</span>residuals))

<span style="color:#75715e"># Finally, we make actual IPW weights by building the fraction</span>
grant_data_ipw <span style="color:#f92672">&lt;-</span> grant_data <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(ipw <span style="color:#f92672">=</span> num <span style="color:#f92672">/</span> den)

<span style="color:#a6e22e">head</span>(grant_data_ipw)
<span style="color:#75715e">## # A tibble: 6 x 6</span>
<span style="color:#75715e">##      id income health grant malaria_risk   ipw</span>
<span style="color:#75715e">##   &lt;int&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt; &lt;dbl&gt;</span>
<span style="color:#75715e">## 1     1   409.   70.2    27         26.3 0.288</span>
<span style="color:#75715e">## 2     2   521.   75.3    18         33.3 0.492</span>
<span style="color:#75715e">## 3     3   581.   62.6    20         42.3 0.687</span>
<span style="color:#75715e">## 4     4   324.   83.9    28         11.8 0.177</span>
<span style="color:#75715e">## 5     5   532.   74.3    20         31.8 0.499</span>
<span style="color:#75715e">## 6     6   538.   75.9    15         36.2 0.748</span>
</code></pre></div><p>Now we can use the weights to find the ATE just like we did with the binary treatment:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">model_grant_ipw <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lm</span>(malaria_risk <span style="color:#f92672">~</span> grant, data <span style="color:#f92672">=</span> grant_data_ipw, weights <span style="color:#f92672">=</span> ipw)
<span style="color:#a6e22e">tidy</span>(model_grant_ipw)
<span style="color:#75715e">## # A tibble: 2 x 5</span>
<span style="color:#75715e">##   term        estimate std.error statistic   p.value</span>
<span style="color:#75715e">##   &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 (Intercept)    58.4     1.79        32.6 1.95e-176</span>
<span style="color:#75715e">## 2 grant          -1.11    0.0806     -13.7 1.45e- 40</span>
</code></pre></div><p>Each dollar of grant money thus <strong>causes a drop of -1.1 malaria risk points</strong>. Neato!</p>
<h3 id="ipw-with-the-ipw-package-continuous-treatment">IPW with the <strong>ipw</strong> package, continuous treatment</h3>
<p>Manually creating the numerator and denominator can get tedious though. We can use the <code>ipwpoint()</code> function from <strong>ipw</strong> to generate continuous weights in one step. Instead of specifying a binomial treatment like we did before, we’ll use a Gaussian (normal) family. We also specify both the numerator and denominator. It will generate identical weights.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">weights_continuous_ipwpoint <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ipwpoint</span>(
  exposure <span style="color:#f92672">=</span> grant,
  family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;gaussian&#34;</span>,
  numerator <span style="color:#f92672">=</span> <span style="color:#f92672">~</span> <span style="color:#ae81ff">1</span>,
  denominator <span style="color:#f92672">=</span> <span style="color:#f92672">~</span> health <span style="color:#f92672">+</span> income,
  data <span style="color:#f92672">=</span> <span style="color:#a6e22e">as.data.frame</span>(grant_data)
)

<span style="color:#75715e"># Same values!</span>
<span style="color:#a6e22e">head</span>(grant_data_ipw<span style="color:#f92672">$</span>ipw)
<span style="color:#75715e">## [1] 0.288 0.492 0.687 0.177 0.499 0.748</span>
<span style="color:#a6e22e">head</span>(weights_continuous_ipwpoint<span style="color:#f92672">$</span>ipw.weights)
<span style="color:#75715e">## [1] 0.288 0.492 0.687 0.177 0.499 0.748</span>
</code></pre></div><p>We can then put those weights into the dataset and run a model with them. We get the same ATE of -1.1:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">grant_data_ipwpoint <span style="color:#f92672">&lt;-</span> grant_data <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(ipw <span style="color:#f92672">=</span> weights_continuous_ipwpoint<span style="color:#f92672">$</span>ipw.weights)

model_grant_ipwpoint <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lm</span>(malaria_risk <span style="color:#f92672">~</span> grant, 
                           data <span style="color:#f92672">=</span> grant_data_ipwpoint, weights <span style="color:#f92672">=</span> ipw)
<span style="color:#a6e22e">tidy</span>(model_grant_ipwpoint)
<span style="color:#75715e">## # A tibble: 2 x 5</span>
<span style="color:#75715e">##   term        estimate std.error statistic   p.value</span>
<span style="color:#75715e">##   &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 (Intercept)    58.4     1.79        32.6 1.95e-176</span>
<span style="color:#75715e">## 2 grant          -1.11    0.0806     -13.7 1.45e- 40</span>
</code></pre></div><h3 id="ipw-with-the-weightit-package-continuous-treatment">IPW with the <strong>WeightIt</strong> package, continuous treatment</h3>
<p>The <strong>WeightIt</strong> package also handles continuous weights. The syntax is a lot simpler—there’s no need to worry about numerators and denominators.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">weights_weightit <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">weightit</span>(grant <span style="color:#f92672">~</span> income <span style="color:#f92672">+</span> health,  <span style="color:#75715e"># Model grant amount with confounders</span>
                             data <span style="color:#f92672">=</span> grant_data, 
                             stabilize <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>)
weights_weightit
<span style="color:#75715e">## A weightit object</span>
<span style="color:#75715e">##  - method: &#34;ps&#34; (propensity score weighting)</span>
<span style="color:#75715e">##  - number of obs.: 1504</span>
<span style="color:#75715e">##  - sampling weights: none</span>
<span style="color:#75715e">##  - treatment: continuous</span>
<span style="color:#75715e">##  - covariates: income, health</span>

<span style="color:#75715e"># See even more details here</span>
<span style="color:#75715e"># summary(weights_weightit)</span>

<span style="color:#75715e"># Not the same as the other methods :(</span>
<span style="color:#a6e22e">head</span>(weights_weightit<span style="color:#f92672">$</span>weights)
<span style="color:#75715e">## [1] 0.580 0.990 1.384 0.356 1.005 1.506</span>
</code></pre></div><p>However(!), for mathy reasons I don’t understand, the weights it generates are not the same as what we get when doing it by hand or with <code>ipwpoint()</code>. In fact, they’re almost exactly twice as large as the manual and <code>ipwpoint()</code> weights:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Manual weights</span>
<span style="color:#a6e22e">head</span>(grant_data_ipw<span style="color:#f92672">$</span>ipw)
<span style="color:#75715e">## [1] 0.288 0.492 0.687 0.177 0.499 0.748</span>

<span style="color:#75715e"># weightit() weights / 2</span>
<span style="color:#a6e22e">head</span>(weights_weightit<span style="color:#f92672">$</span>weights) <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>
<span style="color:#75715e">## [1] 0.290 0.495 0.692 0.178 0.502 0.753</span>
</code></pre></div><p>Surely there’s an argument to <code>weightit()</code> that I’m missing somewhere.</p>
<p>Regardless, for more mathy reasons I don’t understand, the ATE is identical even though the weights are roughly doubled:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">grant_data_weightit <span style="color:#f92672">&lt;-</span> grant_data <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(ipw <span style="color:#f92672">=</span> weights_weightit<span style="color:#f92672">$</span>weights)

model_grant_weightit <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lm</span>(malaria_risk <span style="color:#f92672">~</span> grant, 
                           data <span style="color:#f92672">=</span> grant_data_weightit, weights <span style="color:#f92672">=</span> ipw)
<span style="color:#a6e22e">tidy</span>(model_grant_weightit)
<span style="color:#75715e">## # A tibble: 2 x 5</span>
<span style="color:#75715e">##   term        estimate std.error statistic   p.value</span>
<span style="color:#75715e">##   &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 (Intercept)    58.4     1.79        32.6 1.95e-176</span>
<span style="color:#75715e">## 2 grant          -1.11    0.0806     -13.7 1.45e- 40</span>
</code></pre></div><h2 id="references">References</h2>
<div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-BlackwellGlynn:2018" class="csl-entry">
<p>Blackwell, Matthew, and Adam N. Glynn. 2018. “How to Make Causal Inferences with Time-Series Cross-Sectional Data Under Selection on Observables.” <em>American Political Science Review</em> 112 (4): 1067–82. <a href="https://doi.org/10.1017/s0003055418000357">https://doi.org/10.1017/s0003055418000357</a>.</p>
</div>
<div id="ref-NaimiMoodieAuger:2014" class="csl-entry">
<p>Naimi, Ashley I., Erica E. M. Moodie, Nathalie Auger, and Jay S. Kaufman. 2014. “Constructing Inverse Probability Weights for Continuous Exposures; a Comparison of Methods.” <em>Epidemiology</em> 25 (2): 292–99. <a href="https://doi.org/10.1097/eDe.0000000000000053">https://doi.org/10.1097/eDe.0000000000000053</a>.</p>
</div>
</div>
%!s(MISSING)]]></content>
        <category term="r" />
        <category term="tidyverse" />
        <category term="causal inference" />
        <category term="DAGs" />
        <category term="do calculus" />
        <category term="inverse probability weighting" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Emergency online teaching resources]]></title>
        <link href="https://www.shagunjhaver.com/blog/2020/03/12/emergency-online-teaching-resources/" rel="alternate" />
        <published>2020-03-12T00:00:00+00:00</published>
        <updated>2020-03-12T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2020/03/12/emergency-online-teaching-resources/</id>
        <summary type="html"><![CDATA[List of resources to help teach online as universities rapidly shut down during the COVID-19 pandemic]]></summary>
        <content type="html"><![CDATA[<p><em>This is written for instructors in the Department of Public Management and Policy at the Andrew Young School of Policy Studies at Georgia State University, but it&rsquo;s hopefully widely applicable too.</em></p>
<hr>
<p>With more than 100 universities moving their teaching online (including Emory just last night), it&rsquo;s looking more and more inevitable that GSU will make a similar switch any time now.</p>
<p>Below, I&rsquo;ve described some resources to help the switch to online teaching go smoother. This is by no means comprehensive! Here are a bunch of other resources you can/should consult:</p>
<ul>
<li><a href="https://cetl.gsu.edu/resources/resources-for-remote-teaching-and-learning/">CETL&rsquo;s strategies for teaching remotely</a></li>
<li><a href="https://cetl.gsu.edu/resources/resources-for-remote-teaching-and-learning/faculty-quick-start-guide/">CETL&rsquo;s faculty quickstart guide</a></li>
<li><a href="https://cetl.gsu.edu/resources/resources-for-remote-teaching-and-learning/faqs/">CETL&rsquo;s online teaching FAQs</a></li>
<li><a href="https://oer.gsu.edu/icollegenow/front-matter/introduction/">CETL&rsquo;s iCollege resources</a></li>
<li>Stanford&rsquo;s <a href="https://docs.google.com/document/d/1ccsudB2vwZ_GJYoKlFzGbtnmftGcXwCIwxzf-jkkoCU/edit#heading=h.nvtunalrrj5">&ldquo;Teaching effectively during times of disruption&rdquo;</a></li>
<li><a href="https://twitter.com/rebeccaglazier/status/1236338040710332416">Dr. Rebecca Glazier on effective online teaching</a></li>
<li><a href="https://twitter.com/ProfJMale/status/1237155808464588800">Dr. Jessie Male on effective online teaching</a></li>
<li><a href="https://twitter.com/rebeccakreitzer/status/1237837070682296321">Dr. Rebecca Kreitzer&rsquo;s online teaching tips</a></li>
<li><a href="https://docs.google.com/document/d/1dXeoYe7bUSVyE0ThVOgnGNdDMcsXFyEEm5XMN9ezT9E/edit">Dr. Shana Gadarian&rsquo;s resources</a></li>
<li><a href="http://simondhalliday.com/2020-03-10-online_teaching_covid19/">Dr. Simon Halliday&rsquo;s resources for teaching online during COVID-19</a></li>
<li><a href="https://www.engagingstudents.com/resources/">Engaging Students' resources</a></li>
</ul>
<h2 id="contents----omit-in-toc---">Contents <!-- omit in toc --></h2>
<ul>
<li><a href="#we-are-in-triage-mode">We are in triage mode</a></li>
<li><a href="#synchronous-teaching">Synchronous teaching</a>
<ul>
<li><a href="#webex">Webex</a>
<ul>
<li><a href="#equipment-you-need">Equipment you need</a></li>
<li><a href="#getting-started">Getting started</a></li>
<li><a href="#meeting-rooms-and-urls">Meeting rooms and URLs</a>
<ul>
<li><a href="#your-permanent-personal-meeting-url">Your permanent personal meeting URL</a></li>
<li><a href="#meeting-specific-urls">Meeting-specific URLs</a></li>
</ul>
</li>
<li><a href="#webex-basics">Webex basics</a></li>
<li><a href="#webex-in-icollege">Webex in iCollege</a></li>
</ul>
</li>
<li><a href="#other-ways-to-teach-synchronously">Other ways to teach synchronously</a></li>
</ul>
</li>
<li><a href="#distribution-of-course-materials">Distribution of course materials</a></li>
<li><a href="#meeting-with-students-gras-and-colleagues">Meeting with students, GRAs, and colleagues</a></li>
<li><a href="#asynchronous-teaching">Asynchronous teaching</a></li>
</ul>
<h2 id="we-are-in-triage-mode">We are in triage mode</h2>
<p>In this time of wild uncertainty and anxiety, remember to keep <a href="https://twitter.com/davekarpf/status/1238132990556897285?s=21">these principles</a> in mind first:</p>
<ul>
<li>Lower your expectations for the class</li>
<li>Drop everything that&rsquo;s not essential</li>
<li>Keep it simple</li>
<li>Communicate clearly</li>
<li>Be flexible</li>
<li>Be generous</li>
<li>Ask how you can help</li>
</ul>
<p>Consider taking a few minutes at the beginning of class to address student concerns about COVID-19, clear up misconceptions, and provide basic information about the disease. I&rsquo;ve found that many students don&rsquo;t have complete information about the pandemic, and talking through it and conveying basic information is reassuring.</p>
<p>Look at the first few slides of <a href="https://evalsp20.classes.andrewheiss.com/class/09-class/">my lecture here</a> or <a href="https://www.dropbox.com/s/qxskazf4k76duka/eckhouse%20-%20covid19%20slides%20-%202020-03-09.pdf">this lecture here</a> for some examples.</p>
<p><a href="https://www.flattenthecurve.com/">flattenthecurve.com</a> is an excellent resource. Direct your students to it (and rely on it yourself). The <a href="https://www.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6">Johns Hopkins COVID-19 map</a> and the <a href="https://www.nytimes.com/interactive/2020/world/coronavirus-maps.html">New York Times COVID-19 map</a> are both reliable sources for tracking the spread of the disease</p>
<h2 id="synchronous-teaching">Synchronous teaching</h2>
<p>Perhaps the easiest option for moving your classes online with minimal extra work is to continue to hold your classes at their regularly scheduled time and have students participate remotely via synchronous video. I&rsquo;ve been doing this for the past two weeks and it&rsquo;s caused minimal disruption and extra work from my end.</p>
<h3 id="webex">Webex</h3>
<p>Webex is corporate video conferencing software that GSU has a subscription to. It is similar to Zoom (which you have have heard of or used elsewhere; Zoom was started by a former Webex employee after Webex was bought up by Cisco a few years ago), and provides all sorts of tools for having productive video conferences.</p>
<h4 id="equipment-you-need">Equipment you need</h4>
<ul>
<li>Computer</li>
<li>Webcam
<ul>
<li>You can use the one that&rsquo;s built in to your laptop, or you can use an external one if you have one already (the one in your laptop is more than sufficient)</li>
</ul>
</li>
<li>Microphone
<ul>
<li>You can use the one that&rsquo;s built in to your laptop, or you can use an external one. The one in your laptop is generally sufficient if you&rsquo;re planning on sitting in front of your computer, but if you&rsquo;re walking around a room, it might struggle to pick up your sound. It might be a good idea to get an external microphone. There are a billion options out there—I got <a href="https://www.amazon.com/gp/product/B074C125TN/">this one which transmits wirelessly to my computer through USB</a>, and includes both a lapel mic and a headset mic. If you&rsquo;re only planning on recording at a desk, these articles (<a href="https://thewirecutter.com/reviews/the-best-usb-microphone/">link</a> and <a href="https://thewirecutter.com/lists/the-tools-to-ace-every-video-meeting/">link</a>) have great suggestions for good mics.</li>
</ul>
</li>
</ul>
<h4 id="getting-started">Getting started</h4>
<p>If you haven&rsquo;t downloaded Webex on your computer, go to <a href="https://gsumeetings.webex.com/">https://gsumeetings.webex.com/</a> and log in with your GSU account. Once you&rsquo;re logged in, you can click on the big green &ldquo;Start a Meeting&rdquo; button to start.</p>
<p><img src="personal-room-screen.png" alt="Personal room screen"></p>
<p>You&rsquo;ll be prompted to download the Cisco WebEx Meetings application if you haven&rsquo;t already. Follow all the prompts to install it.</p>
<p>From now on, you can just open the Cisco Webex Meetings app directly on your computer instead of going to <a href="https://gsumeetings.webex.com/">https://gsumeetings.webex.com/</a>.</p>
<h4 id="meeting-rooms-and-urls">Meeting rooms and URLs</h4>
<p>Because Webex was invented for remote meetings, the whole application is based on that metaphor. When you teach and have students join via video, they&rsquo;ll be joining a meeting. Participants join meetings by visiting specific URLs. You can use a permanent URL that will work every time, or you can generate meeting-specific URLs for specific classes</p>
<h5 id="your-permanent-personal-meeting-url">Your permanent personal meeting URL</h5>
<p>Webex gives you a permanent meeting URL—in the screenshot above, you can see that mine is <a href="https://gsumeetings.webex.com/meet/aheiss">https://gsumeetings.webex.com/meet/aheiss</a>. If you send that link to your students, they&rsquo;ll join you via video after visiting the URL. If you&rsquo;re not there (e.g. they click on the link 30 minutes before class and you haven&rsquo;t started streaming anything yet), they&rsquo;ll see this:</p>
<p><img src="personal-room-waiting-screen.png" alt="Personal room waiting screen"></p>
<p>They can wait on that screen until you start the meeting from your end.</p>
<p>The nice thing about using your general permanent meeting URL is that it doesn&rsquo;t change. You can send it to students who want to meet with you during office hours, or use it for committee meetings, or use it for each of your classes. The downside, though, is that it&rsquo;s the same for everyone. If you&rsquo;re meeting with a student during office hours, and a student from another class clicks on the link, they&rsquo;ll automatically join your one-on-one meeting (which could be awkward!)</p>
<h5 id="meeting-specific-urls">Meeting-specific URLs</h5>
<p>To avoid having unwanted guests join your class or office hours or committee meetings, you can generate meeting-specific URLs by scheduling future meetings.</p>
<p>From either the Webex Meetings application or from <a href="https://gsumeetings.webex.com/">https://gsumeetings.webex.com/</a>, click on &ldquo;Schedule&rdquo; and enter the details for your class or meeting, including the start and end time. It makes you choose a password, but it doesn&rsquo;t need to be highly secure or anything (I&rsquo;ve used stuff like &ldquo;asdf&rdquo; or &ldquo;1234&rdquo; in the past).</p>
<p><img src="meeting-scheduling.png" alt="Meeting scheduling"></p>
<p>If you include e-mail addresses in the &ldquo;Attendees&rdquo; section, Webex will send calendar invitations to your students with instructions on how to connect, including the meeting-specific URL and the meeting password. If you don&rsquo;t include e-mail addresses there, it&rsquo;s okay—you can communicate that information to them separately.</p>
<p>After you click on &ldquo;Save&rdquo;, you&rsquo;ll get a confirmation e-mail from Webex, and you&rsquo;ll see the meeting listed in the &ldquo;Meetings&rdquo; section of the Webex webpage:</p>
<p><img src="schedule-information.png" alt="Schedule information"></p>
<p>At the bottom of page, you&rsquo;ll see a &ldquo;Meeting Information&rdquo; section that includes the meeting-specific URL and the password for the meeting. Send those details to your students if you didn&rsquo;t invite them through Webex&rsquo;s system. You don&rsquo;t really need to to worry about the meeting number or host key. The meeting number is only needed if students join the call/conference/meeting/class over the phone (there are instructions for doing that in the confirmation e-mail that Webex sends to you and t to them), and the host key is only needed if you need to host the meeting by phone.</p>
<h4 id="webex-basics">Webex basics</h4>
<p>Once you start a video call, you&rsquo;ll have a toolbar at the bottom with a bunch of different options:</p>
<p><img src="webex-toolbar.png" alt="Webex toolbar"></p>
<ul>
<li>
<p><strong>Mute/unmute</strong>: It&rsquo;s often wise to mute yourself during breaks or while students are talking (or if you take a drink of water)</p>
</li>
<li>
<p><strong>Start/stop video</strong>: You can turn your video on/off here (the meeting will continue without video, so don&rsquo;t worry about it accidentally ending)</p>
</li>
<li>
<p><strong>Share screen</strong>: By default, Webex will show whatever your camera is pointing at (i.e. you), but you can have it stream other things, like your computer screen. You can choose to share specific applications, like PowerPoint or Excel, or you can share your entire screen. If you&rsquo;re plugged into a projector or screen (like when teaching), you can share &ldquo;Screen 2&rdquo; so students can see the projected PowerPoint (and not see your notes in presenter view)</p>
<p><img src="webex-sharing.png" alt="Webex sharing panel"></p>
<p>If you scroll down to the bottom of the share content window, you can also share a whiteboard, which lets you draw on screen with your mouse:</p>
<p><img src="ipad-whiteboard-sharing.png" alt="iPad and whiteboard sharing"></p>
<p>If you plug an iPad or iPhone into your computer, you can also share that screen, which is an even easier way to have a whiteboard. Find some free/cheap drawing app for your iPad (if you have one) and stream that:</p>
<p><img src="ipad-sharing.png" alt="iPad sharing"></p>
<p>To stop sharing your screen, move your mouse to the top of the screen and you&rsquo;ll see a toolbar pop out. Click on &ldquo;Stop Sharing&rdquo; there.</p>
</li>
<li>
<p><strong>Record meeting</strong>: If you click on the &ldquo;Record meeting&rdquo; button, Webex will record the class session. When you finish the meeting, it will process all the video and send you an e-mail with a link that students can use to view later. <em>I&rsquo;d recommend doing this every time you teach</em> for students who might not be able to participate synchronously.</p>
</li>
<li>
<p><strong>View/mute participants</strong>: If you click on this button, you&rsquo;ll see a list of everyone on the call, along with indicators showing if they&rsquo;ve turned off their video or muted themselves. <strong>All students should always keep themselves muted by default</strong>, otherwise it gets really noisy and you&rsquo;ll get lots of audio feedback. If students forget to mute themselves, you can mute them from here. When students want to ask a question or make a comment or respond to a question, they should unmute themselves. Remembering to unmute before speaking takes a little while to get used too, but it really makes the class go a lot smoother.</p>
</li>
<li>
<p><strong>Chat</strong>: You can chat with students too, which is often helpful if you want to have students virtually raise their hand or chime in or ask questions while you&rsquo;re talking.</p>
</li>
<li>
<p><strong>End call</strong>: This, um, ends the meeting.</p>
</li>
</ul>
<h4 id="webex-in-icollege">Webex in iCollege</h4>
<p>There&rsquo;s a way to <a href="https://cetl.gsu.edu/services/digital-environments-teaching-tools/icollege-digital-learning-environment/webex-in-icollege/">embed Webex meeting rooms inside iCollege courses</a>, but I haven&rsquo;t played with this yet, mostly because I use Webex for so many other things (office hours meetings, nonprofit board meetings, coauthor meetings), that I&rsquo;m used to using it on its own. You might want to play with the iCollege integration for fun, though.</p>
<h3 id="other-ways-to-teach-synchronously">Other ways to teach synchronously</h3>
<p>You don&rsquo;t have to use Webex if you don&rsquo;t want to! You can use Zoom, FaceTime, Skype, Google Hangouts, Facebook Messenger, WhatsApp, or any other live video calling service. If you don&rsquo;t care about video and audio interaction with your students, you can stream your class live on YouTube or Twitch and have students participate through chat. If you want to be <em>extra</em> fancy, you can use the free <a href="https://obsproject.com/">OBS</a> application to switch between screens, video cameras, tables, etc. while streaming.</p>
<h2 id="distribution-of-course-materials">Distribution of course materials</h2>
<p>Students need to be able to take quizzes or tests, turn in assignments, and access course materials remotely. iCollege is the best avenue for this, since it&rsquo;s GSU&rsquo;s main learning management software. If you need help, <a href="https://cetl.gsu.edu/services/digital-environments-teaching-tools/icollege-digital-learning-environment/">CETL has a lot of resources</a>.</p>
<p>If you&rsquo;re familiar with web hosting, you can be extra fancy and post slides and class materials to a public website too (<a href="https://evalsp20.classes.andrewheiss.com/">like this</a>).</p>
<h2 id="meeting-with-students-gras-and-colleagues">Meeting with students, GRAs, and colleagues</h2>
<p>If campus closes (or if you voluntarily start practicing social distancing and work from home), you need a way to continue to meet with your students, GRAs, coauthors, colleagues, committee members, and others. The easiest way to do this is probably through Webex (though you can use whatever video application you feel most comfortable with! I meet with different coauthors over the phone, through FaceTime, through Zoom, and through Google Hangouts). You can either use your permanent private meeting room, or schedule a specific meeting with a password and meeting-specific URL.</p>
<p>Coordinating student meeting times can be a hassle and you&rsquo;ll want to avoid the inevitable e-mail tag that happens when trying to schedule stuff. I&rsquo;ve found it easiest to use a free online service like <a href="https://calendly.com/">Calendly</a> or <a href="https://youcanbook.me/">YouCanBook.me</a>. These connect to your Google or Outlook calendars and let you set aside times that you are available. Students can then sign up for times to meet with you during those available slots. If you schedule other things during those times, those slots will become unavailable and people won&rsquo;t be able to schedule meetings then.</p>
<p>You can see what this looks like here: <a href="https://calendly.com/andrewheiss/meeting/">https://calendly.com/andrewheiss/meeting/</a>. I&rsquo;ve had enormous success with this under non-pandemic conditions—I don&rsquo;t typically have set office hours during the week (like Mondays from 11-1 or something); instead, I have several chunks of time available for students and GRAs to schedule meetings, and they choose whatever slots are most convenient for them.</p>
<h2 id="asynchronous-teaching">Asynchronous teaching</h2>
<p>At this point, given that we&rsquo;re halfway through the semester, it&rsquo;s unlikely that you&rsquo;ll need to switch to asynchronous teaching. Developing a fully asynchronous class is hard and time-consuming and expensive—there&rsquo;s a reason why we have an instructional designer on staff (Mya!) and why GSU offers immense support for developing online classes.</p>
<p>If you want to switch to a completely asynchronous class, consult with Mya!</p>
<p>If you want to have some asynchronous elements, like pre-recorded screencasts of how to do something in Excel, Stata, or R, or a miniature chunk of a lecture, or something similar, there are several useful resources:</p>
<ul>
<li><a href="https://cetl.gsu.edu/services/digital-environments-teaching-tools/kaltura-media-hosting/"><strong>Kaltura</strong></a>: GSU has a subscription to this software. This is essentially like Webex and allows you to record yourself or your screen. It does not stream the recording live, however—it&rsquo;s best for recording screencasts or recording yourself giving a lecture.</li>
<li><strong>PowerPoint</strong>: You can record yourself using PowerPoint and upload the resulting video file to iCollege</li>
<li><strong>QuickTime Player</strong>: On macOS, you can use the QuickTime Player app to record audio, video, or your screen if you don&rsquo;t want to use Kaltura</li>
</ul>
<p>If you want to edit or trim video that you create, you can use applications like these:</p>
<ul>
<li><strong>iMovie</strong>: macOS comes with the free iMovie, which lets you do basic video editing</li>
<li><strong>Photos</strong>: Windows 10 comes with the free Photos app, which <a href="https://www.howtogeek.com/355524/how-to-use-windows-10s-hidden-video-editor/">also lets you do basic video editing</a>.</li>
<li><a href="https://www.adobe.com/products/premiere.html"><strong>Adobe Premiere</strong></a> or <a href="https://www.adobe.com/products/premiere-rush.html"><strong>Adobe Premiere Rush</strong></a>: If you want to be extra fancy, you can use Adobe Premiere (which you have access to through Adobe Creative Cloud, <a href="https://technology.gsu.edu/technology-services/it-services/software-computer-purchase/software-download-and-purchase/adobe-creative-cloud/">which you get for free from GSU</a>)</li>
</ul>
%!s(MISSING)]]></content>
        <category term="teaching" />
        <category term="COVID-19" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Ways to close backdoors in DAGs]]></title>
        <link href="https://www.shagunjhaver.com/blog/2020/02/25/closing-backdoors-dags/" rel="alternate" />
        <published>2020-02-25T00:00:00+00:00</published>
        <updated>2020-02-25T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2020/02/25/closing-backdoors-dags/</id>
        <summary type="html"><![CDATA[Use regression, inverse probability weighting, and matching to close confounding backdoors and find causation in observational data]]></summary>
        <content type="html"><![CDATA[<p><span class="small">(<a href="https://github.com/andrewheiss/closing-backdoors-dags">See this notebook on GitHub</a>)</span></p>
<hr>
<p>I’ve been teaching <a href="https://evalsp20.classes.andrewheiss.com/">program evaluation</a> in the MPA/MPP program at GSU for the past semester and a half, and since I was given free rein over how to teach it, I decided to make it as modern and cutting edge as possible. To do this, I’ve infused the class with modern causal inference techniques (commonly known as the <a href="https://bigthink.com/errors-we-live-by/judea-pearls-the-book-of-why-brings-news-of-a-new-science-of-causes">“causal revolution”</a>), focused on the language of <a href="https://cran.r-project.org/web/packages/ggdag/vignettes/intro-to-dags.html">directed acyclic graphs (DAGs)</a>, <a href="https://www.inference.vc/untitled/">do-calculus</a>, confounding, colliding, and the rest of Judea Pearl’s world of finding causation in observational data.</p>
<p>However, I was never taught this approach in any of my doctoral classes, and I’m entirely self-taught. I read <a href="https://www.amazon.com/Book-Why-Science-Cause-Effect/dp/046509760X/"><em>The Book of Why</em></a> in March 2019, and I’ve thrown myself into every possible journal article, blog post, and online course I’ve come across in order to understand how to isolate and identify causal effects. It’s been hard, but thanks to an incredibly welcoming community of economists, epidemiologists, and political scientists on Twitter, I’m getting it! (And so are my students!)</p>
<p>The purpose of this post isn’t to introduce causal models and DAGs and confounders vs. colliders and all that. For that kind of introduction, consult any (or all!) of these resources:</p>
<ul>
<li>Nick Huntington-Klein&rsquo;s <a href="http://www.nickchk.com/econ305.html">ECON 305: Economics, Causality, and Analytics course</a> (especially lectures 13–18)</li>
<li>Julia M. Rohrer, “Thinking Clearly About Correlations and Causation: Graphical Causal Models for Observational Data,” Advances in Methods and Practices in <em>Psychological Science</em> 1, no. 1 (March 2018): 27–42, doi: <a href="https://doi.org/10.1177/2515245917745629">10.1177/2515245917745629</a></li>
<li>Miguel A. Hernán and James M. Robbins, <em>Causal Inference: What If</em> (CRC Press, 2020), <a href="https://www.hsph.harvard.edu/miguel-hernan/causal-inference-book/">https://www.hsph.harvard.edu/miguel-hernan/causal-inference-book/</a></li>
<li>Paul Hünermund and Elias Bareinboim, “Causal Inference and Data-Fusion in Econometrics,” December 19, 2019, arXiv: 1912.09104 [econ.EM], <a href="https://arxiv.org/abs/1912.09104">https://arxiv.org/abs/1912.09104</a></li>
<li>Felix Elwert, “Graphical Causal Models,” chap. 13 in <em>Handbook of Causal Analysis for Social Research</em>, ed. Stephen L. Morgan (New York: Springer, 2013), 245–273, doi: <a href="https://doi.org/10.1007/978-94-007-6094-3_13">10.1007/978-94-007-6094-3_13</a></li>
<li>Julian Schuessler and Peter Selb, “Graphical Causal Models for Survey Inference” (December 17, 2019), doi: <a href="https://doi.org/10.31235/osf.io/hbg3m">10.31235/osf.io/hbg3m</a>, <a href="https://osf.io/preprints/socarxiv/hbg3m/">https://osf.io/preprints/socarxiv/hbg3m/</a></li>
<li>Scott Cunningham, “Directed acyclical graphs” in <em>Causal Inference: The Mixtape</em> (2018), <a href="https://www.scunning.com/mixtape.html">https://www.scunning.com/mixtape.html</a></li>
<li>Paul Hünermund, “Causal Inference with Directed Acyclic Graphs,” <a href="https://www.udemy.com/course/causal-data-science/?referralCode=4FB57D92601437BEB794">Udemy</a></li>
<li>Jason A. Roy, “A Crash Course in Causality: Inferring Causal Effects from Observational Data,” <a href="https://www.coursera.org/learn/crash-course-in-causality/home/welcome">Coursera</a></li>
</ul>
<p>Instead, this post is a practical example of how exactly you can isolate causal effects by closing backdoor paths and adjusting for confounders in observational data. At its core, DAG-based causal inference involves isolating relationships—if some variable causes both your treatment and your outcome (thus confounding it), you can deal with that common cause in some statistical way and isolate the treatment–outcome effect. There’s no one right way to statistically deal with confounding, so here I show a few different ways to do it.</p>
<p>To make this more concrete and practical, I use simulated data from a hypothetical program, but I use actual variable names rather than the $x$, $y$, and $z$ variables that are common in tutorials and articles about DAGs. Here, our outcome $y$ is a final grade, $x$ is a special math camp, and $z$ is all the possible confounders of the effect of the math camp on the grade.</p>
<p>Like <a href="https://www.andrewheiss.com/blog/2019/01/29/diff-means-half-dozen-ways/">my post showing a bunch of different ways to test differences in means</a>, this is mostly a resource to my students and to future me. <a href="https://github.com/andrewheiss/closing-backdoors-dags/issues">Please feel free to comment and make corrections or additions at GitHub!</a></p>
<p>Here’s a tl;dr table of contents since this is a little long:</p>
<ul>
<li><a href="#example-program">Example program</a></li>
<li><a href="#simulated-data">Simulated data</a></li>
<li><a href="#incorrect-correlation-is-not-causation-estimate">Incorrect “correlation is not causation” estimate</a></li>
<li><a href="#adjustment-using-forbidden-unmeasured-variable">Adjustment using forbidden unmeasured variable</a></li>
<li><a href="#adjustment-using-educated-guess-based-naive-matching">Adjustment using educated-guess-based naive matching</a></li>
<li><a href="#brief-interlude-matching--slightly-simpler-dag">Brief interlude: Matching + slightly simpler DAG</a></li>
<li><a href="#adjustment-using-inverse-probability-weighting-ipw">Adjustment using inverse probability weighting (IPW)</a></li>
<li><a href="#adjustment-using-matching-with-mahalanobis-distance">Adjustment using matching (with Mahalanobis distance)</a></li>
<li><a href="#someday-when-im-smarter-do-calculus">Someday when I’m smarter: <em>do</em>-calculus</a></li>
<li><a href="#comparison-of-all-methods">Comparison of all methods</a></li>
</ul>
<h2 id="example-program">Example program</h2>
<p>We’ll refer to a hypothetical math camp program throughout all these examples. Many policy schools offer a brief math camp in the weeks before students begin their graduate degrees, with the hope that it will help students be more prepared in math-heavy classes like statistics and microeconomics. For these examples, we’re interested in answering one question: what is the causal effect of attending math camp on final student outcomes?</p>
<p>We can use <a href="https://cran.r-project.org/web/packages/ggdag/vignettes/intro-to-ggdag.html"><strong>ggdag</strong></a> to draw a simplified causal model that explains what causes final student outcomes (it’s probably wrong, but whatever). I added all the fancy bells and whistles to the graph object here just for the sake of reference. In reality, you don’t need labels or coordinates or the individual <code>geom_dag_*()</code> layers and you can just do <code>ggdag(math_camp_dag)</code> to get a basic graph, but for fun I’ve included everything you need for a publication-worthy graph.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">library</span>(tidyverse)  <span style="color:#75715e"># ggplot, dplyr, %&gt;%, and friends</span>
<span style="color:#a6e22e">library</span>(ggdag)  <span style="color:#75715e"># Make DAGs with ggplot</span>
<span style="color:#a6e22e">library</span>(dagitty)  <span style="color:#75715e"># Do basic DAG math</span>
<span style="color:#a6e22e">library</span>(broom)  <span style="color:#75715e"># For converting model output to data frames</span>

node_details <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">tribble</span>(
  <span style="color:#f92672">~</span>name, <span style="color:#f92672">~</span>label, <span style="color:#f92672">~</span>x, <span style="color:#f92672">~</span>y,
  <span style="color:#e6db74">&#34;math_camp&#34;</span>, <span style="color:#e6db74">&#34;Math camp&#34;</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">1</span>,
  <span style="color:#e6db74">&#34;final_grade&#34;</span>, <span style="color:#e6db74">&#34;Final grade&#34;</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">1</span>,
  <span style="color:#e6db74">&#34;needs_camp&#34;</span>, <span style="color:#e6db74">&#34;Needs camp&#34;</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>,
  <span style="color:#e6db74">&#34;gre_quant&#34;</span>, <span style="color:#e6db74">&#34;GRE quantitative&#34;</span>, <span style="color:#ae81ff">2.5</span>, <span style="color:#ae81ff">2</span>,
  <span style="color:#e6db74">&#34;gre_verbal&#34;</span>, <span style="color:#e6db74">&#34;GRE verbal&#34;</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">2</span>,
  <span style="color:#e6db74">&#34;background&#34;</span>, <span style="color:#e6db74">&#34;Background&#34;</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>,
  <span style="color:#e6db74">&#34;undergraduate_gpa&#34;</span>, <span style="color:#e6db74">&#34;Undergraduate GPA&#34;</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">3</span>
)

node_labels <span style="color:#f92672">&lt;-</span> node_details<span style="color:#f92672">$</span>label
<span style="color:#a6e22e">names</span>(node_labels) <span style="color:#f92672">&lt;-</span> node_details<span style="color:#f92672">$</span>name

math_camp_dag <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">dagify</span>(final_grade <span style="color:#f92672">~</span> math_camp <span style="color:#f92672">+</span> gre_quant <span style="color:#f92672">+</span> gre_verbal <span style="color:#f92672">+</span> 
                          undergraduate_gpa <span style="color:#f92672">+</span> background,
                        math_camp <span style="color:#f92672">~</span> needs_camp, 
                        needs_camp <span style="color:#f92672">~</span> background <span style="color:#f92672">+</span> undergraduate_gpa <span style="color:#f92672">+</span> gre_quant,
                        gre_quant <span style="color:#f92672">~</span> background <span style="color:#f92672">+</span> undergraduate_gpa,
                        gre_verbal <span style="color:#f92672">~</span> background <span style="color:#f92672">+</span> undergraduate_gpa,
                        undergraduate_gpa <span style="color:#f92672">~</span> background,
                        exposure <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;math_camp&#34;</span>,
                        outcome <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;final_grade&#34;</span>,
                        latent <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;background&#34;</span>,
                        coords <span style="color:#f92672">=</span> node_details,
                        labels <span style="color:#f92672">=</span> node_labels)

<span style="color:#75715e"># Turn DAG into a tidy data frame for plotting</span>
math_camp_dag_tidy <span style="color:#f92672">&lt;-</span> math_camp_dag <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">tidy_dagitty</span>() <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">node_status</span>()   <span style="color:#75715e"># Add column for exposure/outcome/latent</span>

status_colors <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">c</span>(exposure <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#0074D9&#34;</span>, outcome <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#FF4136&#34;</span>, latent <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;grey50&#34;</span>)

<span style="color:#75715e"># Fancier graph</span>
<span style="color:#a6e22e">ggplot</span>(math_camp_dag_tidy, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> y, xend <span style="color:#f92672">=</span> xend, yend <span style="color:#f92672">=</span> yend)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_edges</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_point</span>(<span style="color:#a6e22e">aes</span>(color <span style="color:#f92672">=</span> status)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_label_repel</span>(<span style="color:#a6e22e">aes</span>(label <span style="color:#f92672">=</span> label, fill <span style="color:#f92672">=</span> status), seed <span style="color:#f92672">=</span> <span style="color:#ae81ff">1234</span>,
                       color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;white&#34;</span>, fontface <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bold&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_color_manual</span>(values <span style="color:#f92672">=</span> status_colors, na.value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;grey20&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_fill_manual</span>(values <span style="color:#f92672">=</span> status_colors, na.value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;grey20&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">guides</span>(color <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>, fill <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>) <span style="color:#f92672">+</span> 
  <span style="color:#a6e22e">theme_dag</span>()
</code></pre></div><p><img src="load-libraries-make-dag-1.png" alt="DAG for math camp example"></p>
<p>We can tell a fairly complex story using this graph. Your final grade in the program is caused by a host of things, including your quantitative and verbal GRE scores (<a href="https://www.sciencemag.org/careers/2017/06/gres-dont-predict-grad-school-success-what-does">PROBABLY DEFINITELY NOT in real life</a>, but go with it), your undergraduate GPA, and your unmeasured background factors (age, parental income, math anxiety, level of interest in the program, etc.). Your undergraduate GPA is determined by your background, and your GRE scores are determined by both your undergraduate GPA and your background. Because this math camp program is open to anyone, there is self-selection in who chooses to do it. We can pretend that this is decided by your undergraduate GPA, your quantitative GRE score, and your background. If the program was need-based and only offered to people with low GRE scores, we could draw an arrow from GRE quantitative to math camp, but we don’t. Finally, needing the math camp causes people to do it.</p>
<p>There is a direct path between our treatment and outcome (math camp → final grade), but there is also some possible backdoor confounding. Both GRE quantitative and undergraduate GPA have arrows pointing to final grade and math camp (through “needs camp”), which means they’re a common cause, and background is both a confounder <em>and</em> unmeasurable. But we don’t need to give up! If we adjust or control for “needs camp,” we can block the association between background, GRE quantitative, and undergraduate GPA. With this backdoor closed, we’ve isolated the math camp → final grade relationship and can find the causal effect.</p>
<p>However, we don’t really have a measure for needing math camp—we can’t read peoples’ minds and see if they need the program—so while it’d be great to just include a <code>needs_camp</code> variable in a regression model, we’ll have to use other techniques to close the backdoor.</p>
<p>You can find the backdoors automatically with Dagitty (draw the DAG there and notice red arrows between the unblocked confounders), or with functions in the <a href="https://cran.r-project.org/package=dagitty"><strong>dagitty</strong> R package</a>. If you run <code>paths(math_camp_dag)</code>, you can see that the only node pointing back into <code>math_camp</code> is <code>needs_camp</code>, and if you run <code>adjustmentSets(math_camp_dag)</code>, you’ll see that <code>needs_camp</code> is the only required adjustment set:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">paths</span>(math_camp_dag)
<span style="color:#75715e">## $paths</span>
<span style="color:#75715e">##  [1] &#34;math_camp -&gt; final_grade&#34;</span>
<span style="color:#75715e">##  [2] &#34;math_camp &lt;- needs_camp &lt;- background -&gt; final_grade&#34;</span>
<span style="color:#75715e">##  [3] &#34;math_camp &lt;- needs_camp &lt;- background -&gt; gre_quant -&gt; final_grade&#34;</span>
<span style="color:#75715e">##  [4] &#34;math_camp &lt;- needs_camp &lt;- background -&gt; gre_quant &lt;- undergraduate_gpa -&gt; final_grade&#34;</span>
<span style="color:#75715e">##  [5] &#34;math_camp &lt;- needs_camp &lt;- background -&gt; gre_quant &lt;- undergraduate_gpa -&gt; gre_verbal -&gt; final_grade&#34;</span>
<span style="color:#75715e">##  [6] &#34;math_camp &lt;- needs_camp &lt;- background -&gt; gre_verbal -&gt; final_grade&#34;</span>
<span style="color:#75715e">##  ...</span>
<span style="color:#75715e">##</span>
<span style="color:#75715e">## $open</span>
<span style="color:#75715e">##  [1]  TRUE  TRUE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE</span>
<span style="color:#75715e">## [12]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE</span>
<span style="color:#75715e">## [23]  TRUE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE</span>

<span style="color:#a6e22e">adjustmentSets</span>(math_camp_dag)
<span style="color:#75715e">##  { needs_camp }</span>
</code></pre></div><h2 id="simulated-data">Simulated data</h2>
<p>Assuming this causal graph is correct (it’s probably not, but again, go with it), we can simulate data that reflects these causal relationships. There are a host of R packages for simulating data (like <a href="https://github.com/trinker/wakefield"><strong>wakefield</strong></a>, <a href="https://www.rdatagen.net/page/simstudy/"><strong>simstudy</strong></a>, and <a href="https://declaredesign.org/r/fabricatr/"><strong>fabricatr</strong></a>), but here I do it a little more manually using <code>MASS::mvrnorm()</code> to use a <a href="https://stats.stackexchange.com/a/164476/3025">multivariate normal distribution to generate continuous variables that have a specific mean, standard deviation, and relationship with other variables</a>.</p>
<p>Because data generation is beyond the scope of this post, the code below is heavily annotated. Importantly, the various <code>mutate()</code> commands that create the <code>math_camp</code> data below create relationships between the confounders, treatment, and outcome. We also create a <code>needs_camp</code> variable that is true if <strong>both</strong> a student’s quantitative GRE score is less than the average <em>and</em> if their undergraduate GPA is less than the average. We also build in some noncompliance: 80% of those who need math camp do it; 20% of those who don’t need it do it.</p>
<p>For the sake of simplicity, the outcome here (<code>final_grade</code>) isn’t GPA or anything—it’s an arbitrary number between 120 and 160 (though we could rescale it to something else).</p>
<p><strong>Most importantly</strong>, we force the math camp program to cause a <strong>10 point increase</strong> in students’ final grades. This is our baseline average treatment effect that we want to be able to find using different backdoor adjustment techniques.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Make these random draws the same every time</span>
<span style="color:#a6e22e">set.seed</span>(<span style="color:#ae81ff">1234</span>)

<span style="color:#75715e"># Create 2,000 rows</span>
num <span style="color:#f92672">&lt;-</span> <span style="color:#ae81ff">2000</span>

<span style="color:#75715e"># Create confounder variables that are related to each other</span>
mu <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">c</span>(undergrad_gpa <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>, gre_verbal <span style="color:#f92672">=</span> <span style="color:#ae81ff">160</span>, gre_quant <span style="color:#f92672">=</span> <span style="color:#ae81ff">145</span>)
stddev <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">c</span>(undergrad_gpa <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.5</span>, gre_verbal <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>, gre_quant <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>)

<span style="color:#75715e"># Correlation matrix: undergrad GPA and verbal GRE have a correlation of 0.8;</span>
<span style="color:#75715e"># undergrad GPA and quantitative GRE have a correlation of 0.6, and verbal GRE</span>
<span style="color:#75715e"># and quantitative GRE have a correlation of 0.4</span>
cor_matrix <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">matrix</span>(<span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">1.0</span>, <span style="color:#ae81ff">0.8</span>, <span style="color:#ae81ff">0.6</span>,
                       <span style="color:#ae81ff">0.8</span>, <span style="color:#ae81ff">1.0</span>, <span style="color:#ae81ff">0.4</span>,
                       <span style="color:#ae81ff">0.6</span>, <span style="color:#ae81ff">0.4</span>, <span style="color:#ae81ff">1.0</span>),
                     ncol <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>)

<span style="color:#75715e"># Convert correlation matrix to covariance matrix using fancy math</span>
cov_matrix <span style="color:#f92672">&lt;-</span> stddev <span style="color:#f92672">%*%</span> <span style="color:#a6e22e">t</span>(stddev) <span style="color:#f92672">*</span> cor_matrix

<span style="color:#75715e"># Draw random numbers</span>
confounders <span style="color:#f92672">&lt;-</span> MASS<span style="color:#f92672">::</span><span style="color:#a6e22e">mvrnorm</span>(n <span style="color:#f92672">=</span> num, mu <span style="color:#f92672">=</span> mu, Sigma <span style="color:#f92672">=</span> cov_matrix, empirical <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">as_tibble</span>() <span style="color:#f92672">%&gt;%</span>
  <span style="color:#75715e"># Truncate values so they&#39;re within 130-170 range for GRE and less than 4.0 for GPA</span>
  <span style="color:#a6e22e">mutate_at</span>(<span style="color:#a6e22e">vars</span>(gre_verbal, gre_quant),
            <span style="color:#f92672">~</span><span style="color:#a6e22e">case_when</span>(
              . <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">170</span> <span style="color:#f92672">~</span> <span style="color:#ae81ff">170</span>,
              . <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">130</span> <span style="color:#f92672">~</span> <span style="color:#ae81ff">130</span>,
              <span style="color:#66d9ef">TRUE</span> <span style="color:#f92672">~</span> .
            )) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(undergrad_gpa <span style="color:#f92672">=</span> <span style="color:#a6e22e">ifelse</span>(undergrad_gpa <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">4</span>, undergrad_gpa))

<span style="color:#75715e"># Make official dataset of simulated values</span>
math_camp <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">tibble</span>(id <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">:</span>num) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">bind_cols</span>(confounders) <span style="color:#f92672">%&gt;%</span>  <span style="color:#75715e"># Bring in confounders</span>
  <span style="color:#75715e"># People need math camp if their GRE and GPA is lower than the average</span>
  <span style="color:#a6e22e">mutate</span>(needs_camp <span style="color:#f92672">=</span> gre_quant <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">mean</span>(gre_quant) <span style="color:#f92672">&amp;</span> 
           undergrad_gpa <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">mean</span>(undergrad_gpa)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#75715e"># Build in some noncompliance: 80% of those who need math camp do it; 20% of</span>
  <span style="color:#75715e"># those who don&#39;t need it do it.</span>
  <span style="color:#a6e22e">mutate</span>(math_camp <span style="color:#f92672">=</span> <span style="color:#a6e22e">case_when</span>(
    needs_camp <span style="color:#f92672">==</span> <span style="color:#66d9ef">TRUE</span> <span style="color:#f92672">~</span> <span style="color:#a6e22e">rbinom</span>(<span style="color:#a6e22e">n</span>(), <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0.8</span>),
    needs_camp <span style="color:#f92672">==</span> <span style="color:#66d9ef">FALSE</span> <span style="color:#f92672">~</span> <span style="color:#a6e22e">rbinom</span>(<span style="color:#a6e22e">n</span>(), <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0.2</span>)
  )) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#75715e"># Create random error in grades</span>
  <span style="color:#a6e22e">mutate</span>(grade_noise <span style="color:#f92672">=</span> <span style="color:#a6e22e">rnorm</span>(num, <span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">5</span>)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#75715e"># Create final grade based on all the arrows going into the node in the DAG.</span>
  <span style="color:#75715e"># There&#39;s a 10 point causal effect</span>
  <span style="color:#a6e22e">mutate</span>(final_grade <span style="color:#f92672">=</span> (<span style="color:#ae81ff">0.3</span> <span style="color:#f92672">*</span> gre_verbal) <span style="color:#f92672">+</span> (<span style="color:#ae81ff">0.5</span> <span style="color:#f92672">*</span> gre_quant) <span style="color:#f92672">+</span> 
           (<span style="color:#ae81ff">0.4</span> <span style="color:#f92672">*</span> undergrad_gpa) <span style="color:#f92672">+</span> (<span style="color:#ae81ff">10</span> <span style="color:#f92672">*</span> math_camp) <span style="color:#f92672">+</span> grade_noise) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(math_camp <span style="color:#f92672">=</span> <span style="color:#a6e22e">as.logical</span>(math_camp))  <span style="color:#75715e"># Make true/false</span>
</code></pre></div><p>Phew. That’s a lot of code to make fake data, but it worked! We can look at the first few rows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">head</span>(math_camp)

<span style="color:#75715e">## # A tibble: 6 x 8</span>
<span style="color:#75715e">##      id undergrad_gpa gre_verbal gre_quant needs_camp math_camp grade_noise</span>
<span style="color:#75715e">##   &lt;int&gt;         &lt;dbl&gt;      &lt;dbl&gt;     &lt;dbl&gt; &lt;lgl&gt;      &lt;lgl&gt;           &lt;dbl&gt;</span>
<span style="color:#75715e">## 1     1          3.90       170       151. FALSE      FALSE            13.5</span>
<span style="color:#75715e">## 2     2          3.20       163.      143. FALSE      FALSE            13.2</span>
<span style="color:#75715e">## 3     3          2.83       162.      140. TRUE       TRUE             10.4</span>
<span style="color:#75715e">## 4     4          2.63       144.      154. FALSE      FALSE            17.0</span>
<span style="color:#75715e">## 5     5          3.24       170       148. FALSE      FALSE            16.4</span>
<span style="color:#75715e">## 6     6          2.95       167.      146. FALSE      FALSE            19.0</span>
<span style="color:#75715e">## # … with 1 more variable: final_grade &lt;dbl&gt;</span>
</code></pre></div><p>About 40% of the students participated in math camp:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">math_camp <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">count</span>(math_camp) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(prop <span style="color:#f92672">=</span> n <span style="color:#f92672">/</span> <span style="color:#a6e22e">sum</span>(n))

<span style="color:#75715e">## # A tibble: 2 x 3</span>
<span style="color:#75715e">##   math_camp     n  prop</span>
<span style="color:#75715e">##   &lt;lgl&gt;     &lt;int&gt; &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 FALSE      1182 0.591</span>
<span style="color:#75715e">## 2 TRUE        818 0.409</span>
</code></pre></div><h2 id="incorrect-correlation-is-not-causation-estimate">Incorrect “correlation is not causation” estimate</h2>
<p>We can take an initial stab at finding the causal effect of the program by comparing the average final grades for those who did math camp and those who didn’t. At first glance, it looks like math camp participants have a higher grade!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">math_camp <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">group_by</span>(math_camp) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">summarize</span>(avg <span style="color:#f92672">=</span> <span style="color:#a6e22e">mean</span>(final_grade))

<span style="color:#75715e">## # A tibble: 2 x 2</span>
<span style="color:#75715e">##   math_camp   avg</span>
<span style="color:#75715e">##   &lt;lgl&gt;     &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 FALSE      138.</span>
<span style="color:#75715e">## 2 TRUE       144.</span>
</code></pre></div><p>The distribution of scores is higher for those who did the program:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">ggplot</span>(math_camp, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> final_grade, fill <span style="color:#f92672">=</span> math_camp)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_histogram</span>(binwidth <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;white&#34;</span>) <span style="color:#f92672">+</span> 
  <span style="color:#a6e22e">guides</span>(fill <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">facet_wrap</span>(<span style="color:#a6e22e">vars</span>(math_camp), ncol <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_light</span>()
</code></pre></div><p><img src="plot-distributions-wrong-1.png" alt="Naive, wrong distributions"></p>
<p>We can run a simple linear regression model to estimate the exact effect:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">model_wrong <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lm</span>(final_grade <span style="color:#f92672">~</span> math_camp, data <span style="color:#f92672">=</span> math_camp)
<span style="color:#a6e22e">tidy</span>(model_wrong)

<span style="color:#75715e">## # A tibble: 2 x 5</span>
<span style="color:#75715e">##   term          estimate std.error statistic   p.value</span>
<span style="color:#75715e">##   &lt;chr&gt;            &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 (Intercept)     138.       0.185     744.  0.       </span>
<span style="color:#75715e">## 2 math_campTRUE     6.54     0.290      22.6 8.48e-101</span>
</code></pre></div><p>Based on this model, participating in the program is associated with 6.5 more points in your final grade. Neat.</p>
<p>This is wrong, though, since there are confounders at play that cause both attendance at math camp and final grade. We need to adjust for those to get the actual causal effect.</p>
<h2 id="adjustment-using-forbidden-unmeasured-variable">Adjustment using forbidden unmeasured variable</h2>
<p>The backdoor confounder we have to worry about is <code>needs_camp</code>. We created this variable when we generated the data, so for fun, we can include it in the regression model as a control variable to adjust for it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">model_adj_needs_camp <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lm</span>(final_grade <span style="color:#f92672">~</span> math_camp <span style="color:#f92672">+</span> needs_camp, data <span style="color:#f92672">=</span> math_camp)
<span style="color:#a6e22e">tidy</span>(model_adj_needs_camp)

<span style="color:#75715e">## # A tibble: 3 x 5</span>
<span style="color:#75715e">##   term           estimate std.error statistic   p.value</span>
<span style="color:#75715e">##   &lt;chr&gt;             &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 (Intercept)      139.       0.174     798.  0.       </span>
<span style="color:#75715e">## 2 math_campTRUE     10.2      0.320      31.9 2.79e-181</span>
<span style="color:#75715e">## 3 needs_campTRUE    -6.69     0.329     -20.3 1.28e- 83</span>
</code></pre></div><p>The coefficient for <code>math_campTRUE</code> is now ≈10, which is what it should be! Adjusting for needing math camp isolated the causal effect.</p>
<p>But we can’t do that in real life. We don’t know what needing math camp looks like in actual data, so we need to use other techniques.</p>
<h2 id="adjustment-using-educated-guess-based-naive-matching">Adjustment using educated-guess-based naive matching</h2>
<p>One possible approach to guessing the need for math camp is to create groups of students based on what we think might be driving the need for camp. We know from the causal model that quantitative GRE scores and undergraduate GPAs partially cause needing the program. We can assume that people with lower test scores or lower GPAs need the camp and create our own guess about what the threshold might be.</p>
<p>Let’s look at the distribution of GRE scores and see if there’s any pattern about why people may have chosen to do the program:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">ggplot</span>(math_camp, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> gre_quant, fill <span style="color:#f92672">=</span> math_camp)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_histogram</span>(binwidth <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;white&#34;</span>) <span style="color:#f92672">+</span> 
  <span style="color:#a6e22e">guides</span>(fill <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">facet_wrap</span>(<span style="color:#a6e22e">vars</span>(math_camp), ncol <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_light</span>()
</code></pre></div><p><img src="gre-math-camp-1.png" alt="Quantitative GRE score across math camp participation"></p>
<p>There’s a pretty noticable break in the distribution of GRE scores for those who did the program: lots of people who scored under 145ish did the program, while not a lot of people who scored over 145 did. Without knowing anything about what completely causes math camp need, we can pretend that 145 is some sort of threshold of need and use that as our confounder:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">math_camp_guessed_need <span style="color:#f92672">&lt;-</span> math_camp <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(maybe_needs_camp <span style="color:#f92672">=</span> gre_quant <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">145</span>)

model_adj_needs_camp_guess <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lm</span>(final_grade <span style="color:#f92672">~</span> math_camp <span style="color:#f92672">+</span> maybe_needs_camp, 
                                 data <span style="color:#f92672">=</span> math_camp_guessed_need)
<span style="color:#a6e22e">tidy</span>(model_adj_needs_camp_guess)

<span style="color:#75715e">## # A tibble: 3 x 5</span>
<span style="color:#75715e">##   term                 estimate std.error statistic   p.value</span>
<span style="color:#75715e">##   &lt;chr&gt;                   &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 (Intercept)            140.       0.197     708.  0.       </span>
<span style="color:#75715e">## 2 math_campTRUE            8.70     0.292      29.8 4.41e-162</span>
<span style="color:#75715e">## 3 maybe_needs_campTRUE    -5.33     0.287     -18.6 2.36e- 71</span>
</code></pre></div><p>After adjusting for our possible needing camp confounder, the causal effect is now 8.7, which is closer to 10! It’s still not entirely correct, but we’re getting closer.</p>
<h2 id="brief-interlude-matching--slightly-simpler-dag">Brief interlude: Matching + slightly simpler DAG</h2>
<p>We just attempted to guess what the “needs camp” node might be based on the nodes flowing into it. If you notice, though, the “needs camp” node is an intermediate node on the path between GPA and GRE scores and actually participating in the math camp program. If we can guess what causes people to enroll in the program, that’s roughly the same as predicting their need for the camp.</p>
<p>Additionally, predicting enrollment in the program directly (rather than the desire to enroll) lets us use better matching techniques. Our guess of needing camp was pretty naive—it’d be more accurate if we incorporated other variables (like GPA and background) into our manual grouping. But the intuition of trying to group manually was correct—we looked at the factors that caused needing math camp and guessed that some things make it more likely. We can make this process more formal by building an actual model that predicts the likelihood of treatment.</p>
<p>To do this, we can remove the “needs camp” node, since it wasn’t doing much in the model and since we can use confounders like GPA and quantitative GRE to estimate the probability of enrollment in math camp directly. Here’s a slightly simpler version without “needs camp” and “background”:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">node_details_simpler <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">tribble</span>(
  <span style="color:#f92672">~</span>name, <span style="color:#f92672">~</span>label, <span style="color:#f92672">~</span>x, <span style="color:#f92672">~</span>y,
  <span style="color:#e6db74">&#34;math_camp&#34;</span>, <span style="color:#e6db74">&#34;Math camp&#34;</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">1</span>,
  <span style="color:#e6db74">&#34;final_grade&#34;</span>, <span style="color:#e6db74">&#34;Final grade&#34;</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">1</span>,
  <span style="color:#e6db74">&#34;gre_quant&#34;</span>, <span style="color:#e6db74">&#34;GRE quantitative&#34;</span>, <span style="color:#ae81ff">2.5</span>, <span style="color:#ae81ff">2</span>,
  <span style="color:#e6db74">&#34;gre_verbal&#34;</span>, <span style="color:#e6db74">&#34;GRE verbal&#34;</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">2</span>,
  <span style="color:#e6db74">&#34;undergraduate_gpa&#34;</span>, <span style="color:#e6db74">&#34;Undergraduate GPA&#34;</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">3</span>
)

node_labels_simpler <span style="color:#f92672">&lt;-</span> node_details_simpler<span style="color:#f92672">$</span>label
<span style="color:#a6e22e">names</span>(node_labels_simpler) <span style="color:#f92672">&lt;-</span> node_details_simpler<span style="color:#f92672">$</span>name

math_camp_dag_simpler <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">dagify</span>(final_grade <span style="color:#f92672">~</span> math_camp <span style="color:#f92672">+</span> gre_quant <span style="color:#f92672">+</span> gre_verbal <span style="color:#f92672">+</span> 
                                  undergraduate_gpa,
                                math_camp <span style="color:#f92672">~</span> undergraduate_gpa <span style="color:#f92672">+</span> gre_quant,
                                gre_quant <span style="color:#f92672">~</span> undergraduate_gpa,
                                gre_verbal <span style="color:#f92672">~</span> undergraduate_gpa,
                                exposure <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;math_camp&#34;</span>,
                                outcome <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;final_grade&#34;</span>,
                                coords <span style="color:#f92672">=</span> node_details,
                                labels <span style="color:#f92672">=</span> node_labels)

<span style="color:#75715e"># Turn DAG into a tidy data frame for plotting</span>
math_camp_dag_simpler_tidy <span style="color:#f92672">&lt;-</span> math_camp_dag_simpler <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">tidy_dagitty</span>() <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">node_status</span>()   <span style="color:#75715e"># Add column for exposure/outcome</span>

status_colors <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">c</span>(exposure <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#0074D9&#34;</span>, outcome <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#FF4136&#34;</span>, latent <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;grey50&#34;</span>)

<span style="color:#75715e"># Fancier graph</span>
<span style="color:#a6e22e">ggplot</span>(math_camp_dag_simpler_tidy, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> y, xend <span style="color:#f92672">=</span> xend, yend <span style="color:#f92672">=</span> yend)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_edges</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_point</span>(<span style="color:#a6e22e">aes</span>(color <span style="color:#f92672">=</span> status)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_dag_label_repel</span>(<span style="color:#a6e22e">aes</span>(label <span style="color:#f92672">=</span> label, fill <span style="color:#f92672">=</span> status), seed <span style="color:#f92672">=</span> <span style="color:#ae81ff">1234</span>,
                       color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;white&#34;</span>, fontface <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bold&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_color_manual</span>(values <span style="color:#f92672">=</span> status_colors, na.value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;grey20&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_fill_manual</span>(values <span style="color:#f92672">=</span> status_colors, na.value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;grey20&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">guides</span>(color <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>, fill <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>) <span style="color:#f92672">+</span> 
  <span style="color:#a6e22e">theme_dag</span>()
</code></pre></div><p><img src="simpler-dag-1.png" alt="Simpler math camp DAG"></p>
<h2 id="adjustment-using-inverse-probability-weighting-ipw">Adjustment using inverse probability weighting (IPW)</h2>
<p>One common method for matching the assignment to treatment based on confounders that is quite popular in epidemiology is to use inverse probability weighting (IPW). To estimate causal effects with IPW, we follow a two-step process. In the first step, we use the confounders to estimate propensity scores for each observation, or the probability of that observation going to math camp given other characteristics.</p>
<p>A common way to generate propensity scores is to use logistic regression. Here we build a model estimating participation in math camp based on undergraduate GPA and quantitative GRE scores. We then use <code>augment()</code> to plug the GPA and GRE values for each observation into the model and generate a predicted probability:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">needs_camp_model <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">glm</span>(math_camp <span style="color:#f92672">~</span> undergrad_gpa <span style="color:#f92672">+</span> gre_quant, data <span style="color:#f92672">=</span> math_camp, 
                        family <span style="color:#f92672">=</span> <span style="color:#a6e22e">binomial</span>(link <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;logit&#34;</span>))

math_camp_propensities <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">augment</span>(needs_camp_model, math_camp, type.predict <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;response&#34;</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(p_camp <span style="color:#f92672">=</span> .fitted)  <span style="color:#75715e"># Rename column</span>

math_camp_propensities <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">select</span>(id, undergrad_gpa, gre_quant, math_camp, p_camp) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">head</span>()

<span style="color:#75715e">## # A tibble: 6 x 5</span>
<span style="color:#75715e">##      id undergrad_gpa gre_quant math_camp p_camp</span>
<span style="color:#75715e">##   &lt;int&gt;         &lt;dbl&gt;     &lt;dbl&gt; &lt;lgl&gt;      &lt;dbl&gt;</span>
<span style="color:#75715e">## 1     1          3.90      151. FALSE     0.0969</span>
<span style="color:#75715e">## 2     2          3.20      143. FALSE     0.371 </span>
<span style="color:#75715e">## 3     3          2.83      140. TRUE      0.554 </span>
<span style="color:#75715e">## 4     4          2.63      154. FALSE     0.291 </span>
<span style="color:#75715e">## 5     5          3.24      148. FALSE     0.258 </span>
<span style="color:#75715e">## 6     6          2.95      146. FALSE     0.371</span>
</code></pre></div><p>We have a new column <code>p_camp</code> that shows the probability of going to camp based on grades and test scores. Our first person has a high GPA and high GRE score, so they have a 9% chance of going to math camp, while person 3 has a low GPA and low test score, so they’re more likely to need it.</p>
<p>In the second step, we incorporate these predicted probabilities into our causal effect estimation by converting them into weights, which creates a pseduo-population of observations (i.e. some student observations are more important than others for estimating the causal effect). What this means practically is that people with a low likelihood of attending math camp who <em>do</em> attend it anyway should be treated as more important than those who follow expectations, since those with higher weights are more likely to influence the overall causal effect.</p>
<p>There are a whole bunch of different weighting techniques, and <a href="https://livefreeordichotomize.com/">Lucy D’Agostino McGowan</a> covers them in depth <a href="https://livefreeordichotomize.com/2019/01/17/understanding-propensity-score-weighting/">in her excellent blog post here</a> (see also <a href="https://www.rdatagen.net/post/potential-outcomes-confounding/">this</a>). For the sake of this example, we’ll calculate weights that are appropriate for estimating two different causal quantities. Here, $i$ represents an individual student, $e_i$ represents the propensity score for an individual needing/participating in math camp, or the treatment $Z_i$:</p>
<ul>
<li>Average treatment effect (ATE): overall average effect, or the difference in potential outcomes when the Z = 1 and Z = 0. Formula for weights: $\frac{Z_i}{e_i} + \frac{1 - Z_i}{1 - e_i}$</li>
<li>Average treatment effect among the overlap population (ATO): effect of math camp across observations that overlap (i.e. those who are both likely and unlikely to need math camp). Formula for weights: $(1-e_i)Z_i + e_i(1-Z_i)$</li>
</ul>
<!-- end list -->
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">math_camp_propensities <span style="color:#f92672">&lt;-</span> math_camp_propensities <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(w_ate <span style="color:#f92672">=</span> (math_camp <span style="color:#f92672">/</span> p_camp) <span style="color:#f92672">+</span> ((<span style="color:#ae81ff">1</span> <span style="color:#f92672">-</span> math_camp) <span style="color:#f92672">/</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">-</span> p_camp)),
         w_ato <span style="color:#f92672">=</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">-</span> p_camp) <span style="color:#f92672">*</span> math_camp <span style="color:#f92672">+</span> p_camp <span style="color:#f92672">*</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">-</span> math_camp))

math_camp_propensities <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">select</span>(id, p_camp, w_ate, w_ato) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">head</span>()

<span style="color:#75715e">## # A tibble: 6 x 4</span>
<span style="color:#75715e">##      id p_camp w_ate  w_ato</span>
<span style="color:#75715e">##   &lt;int&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;</span>
<span style="color:#75715e">## 1     1 0.0969  1.11 0.0969</span>
<span style="color:#75715e">## 2     2 0.371   1.59 0.371 </span>
<span style="color:#75715e">## 3     3 0.554   1.80 0.446 </span>
<span style="color:#75715e">## 4     4 0.291   1.41 0.291 </span>
<span style="color:#75715e">## 5     5 0.258   1.35 0.258 </span>
<span style="color:#75715e">## 6     6 0.371   1.59 0.371</span>
</code></pre></div><p>Finally, we can incorporate these weights into a regression model. Note how we’re using <code>math_camp</code> as the only explanatory variable. Because we used undergraduate GPA and quantitative GRE scores to estimate the propensity scores for needing camp (and receiving the program), including the weights should be enough to close the “needs camp” back door:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">model_ipw_ate <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lm</span>(final_grade <span style="color:#f92672">~</span> math_camp, 
                    data <span style="color:#f92672">=</span> math_camp_propensities, weights <span style="color:#f92672">=</span> w_ate)
<span style="color:#a6e22e">tidy</span>(model_ipw_ate)

<span style="color:#75715e">## # A tibble: 2 x 5</span>
<span style="color:#75715e">##   term          estimate std.error statistic   p.value</span>
<span style="color:#75715e">##   &lt;chr&gt;            &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 (Intercept)      137.      0.222     614.  0.       </span>
<span style="color:#75715e">## 2 math_campTRUE     10.9     0.308      35.3 8.75e-213</span>
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">model_ipw_ato <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lm</span>(final_grade <span style="color:#f92672">~</span> math_camp, 
                    data <span style="color:#f92672">=</span> math_camp_propensities, weights <span style="color:#f92672">=</span> w_ato)
<span style="color:#a6e22e">tidy</span>(model_ipw_ato)

<span style="color:#75715e">## # A tibble: 2 x 5</span>
<span style="color:#75715e">##   term          estimate std.error statistic   p.value</span>
<span style="color:#75715e">##   &lt;chr&gt;            &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 (Intercept)      136.      0.203     672.  0.       </span>
<span style="color:#75715e">## 2 math_campTRUE     10.0     0.286      35.0 1.02e-209</span>
</code></pre></div><p>Both of these causal estimates are pretty spot on, with the ATO providing an answer incredibly close to the true value of 10. Neat!</p>
<p>If we had other backdoors to adjust for, we could include them in the propensity score model as well. We can do all our backdoor adjustment in the logit model, generate propensity scores, generate inverse probability weights, and then use the weights in a simple regression model to find the actual causal effect.</p>
<h2 id="adjustment-using-matching-with-mahalanobis-distance">Adjustment using matching (with Mahalanobis distance)</h2>
<p>We can use other methods to find matches in the data to estimate the probability of attending math camp. There’s a whole world of other statistical methods for creating matches; inverse probability weights are just one method.</p>
<p>While matching based on propensity scores (i.e. building some model to generate predicted probabilities for the likelihood of treatment and matching observations that have similar propensities) is popular, it can cause problems when you use it for causal identification. Following <a href="https://www.youtube.com/watch?v=rBv39pK1iEs">Gary King’s suggestions</a>, we can match with other techniques. (Again, covering what all these do goes beyond the scope of this post, but there are some excellent resources out there, like <a href="https://www.youtube.com/watch?v=rBv39pK1iEs">this highly accessible video by Gary King</a>.)</p>
<p>One popular technique in political science is to match based on <a href="https://en.wikipedia.org/wiki/Mahalanobis_distance">Mahalanobis</a> (or <a href="https://en.wikipedia.org/wiki/Euclidean_distance">Euclidean</a>) distance. We can use <code>matchit()</code> from the <strong>MatchIt</strong> library to group students with similar needs. Instead of creating a new grouping variable like we did before for <code>needs_camp</code>, because we know that undergrad GPA and quantitative GRE scores cause needing math camp, and that needing math camp is the only path into actually doing the program, we can model the probability of treatment by using undergrad GPA and quantitative GRE.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">library</span>(MatchIt)  <span style="color:#75715e"># For matching stuff</span>

matched <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">matchit</span>(math_camp <span style="color:#f92672">~</span> undergrad_gpa <span style="color:#f92672">+</span> gre_quant, data <span style="color:#f92672">=</span> math_camp,
                   method <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;nearest&#34;</span>, distance <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;mahalanobis&#34;</span>, replace <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>)
matched

<span style="color:#75715e">## </span>
<span style="color:#75715e">## Call: </span>
<span style="color:#75715e">## matchit(formula = math_camp ~ undergrad_gpa + gre_quant, data = math_camp, </span>
<span style="color:#75715e">##     method = &#34;nearest&#34;, distance = &#34;mahalanobis&#34;, replace = TRUE)</span>
<span style="color:#75715e">## </span>
<span style="color:#75715e">## Sample sizes:</span>
<span style="color:#75715e">##           Control Treated</span>
<span style="color:#75715e">## All          1182     818</span>
<span style="color:#75715e">## Matched       366     818</span>
<span style="color:#75715e">## Unmatched     816       0</span>
<span style="color:#75715e">## Discarded       0       0</span>
</code></pre></div><p>By matching this way, we found 366 people who didn’t do math camp who look similar to those who did, which means we can arguably say that those who didn’t do it didn’t need to. If we want, we can see which observations were matched:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">head</span>(matched<span style="color:#f92672">$</span>match.matrix)

<span style="color:#75715e">##    1     </span>
<span style="color:#75715e">## 3  &#34;1864&#34;</span>
<span style="color:#75715e">## 7  &#34;646&#34; </span>
<span style="color:#75715e">## 9  &#34;586&#34; </span>
<span style="color:#75715e">## 12 &#34;83&#34;  </span>
<span style="color:#75715e">## 15 &#34;244&#34; </span>
<span style="color:#75715e">## 20 &#34;1815&#34;</span>
</code></pre></div><p>And we can extract the details from the match:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">math_camp_matched <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">match.data</span>(matched)
<span style="color:#a6e22e">head</span>(math_camp_matched)

<span style="color:#75715e">##    id undergrad_gpa gre_verbal gre_quant needs_camp math_camp grade_noise</span>
<span style="color:#75715e">## 3   3      2.828828   161.6843  140.4169       TRUE      TRUE    10.37564</span>
<span style="color:#75715e">## 5   5      3.244684   170.0000  147.9607      FALSE     FALSE    16.40707</span>
<span style="color:#75715e">## 7   7      3.757950   170.0000  151.4425      FALSE      TRUE    24.01470</span>
<span style="color:#75715e">## 9   9      3.085583   162.4533  149.3013      FALSE      TRUE    21.00359</span>
<span style="color:#75715e">## 12 12      3.300517   167.0163  152.7640      FALSE      TRUE    15.10616</span>
<span style="color:#75715e">## 15 15      3.809366   170.0000  141.3918      FALSE      TRUE    12.68628</span>
<span style="color:#75715e">##    final_grade distance   weights</span>
<span style="color:#75715e">## 3     140.2209       NA 1.0000000</span>
<span style="color:#75715e">## 5     142.6853       NA 0.4474328</span>
<span style="color:#75715e">## 7     162.2392       NA 1.0000000</span>
<span style="color:#75715e">## 9     155.6245       NA 1.0000000</span>
<span style="color:#75715e">## 12    152.9133       NA 1.0000000</span>
<span style="color:#75715e">## 15    145.9059       NA 1.0000000</span>
</code></pre></div><p>We have one new column in this data: <code>weights</code>. Observations are now weighted differently based on how distant they are from their matches—observations who attended math camp that are similar to those who didn’t have a higher weight. This weighting creates a pseudo-population of students (i.e. some student observations are more important than others for estimating the causal effect), just like we did with IPW.</p>
<p>We can incorporate these weights into a regression model. Note how we’re using <code>math_camp</code> as the only explanatory variable. Because we used matching to guess the likelihood of needing camp (and receiving the program), including the weights should be enough to close the “needs camp” back door:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">model_matched <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lm</span>(final_grade <span style="color:#f92672">~</span> math_camp, data <span style="color:#f92672">=</span> math_camp_matched, weights <span style="color:#f92672">=</span> weights)
<span style="color:#a6e22e">tidy</span>(model_matched)

<span style="color:#75715e">## # A tibble: 2 x 5</span>
<span style="color:#75715e">##   term          estimate std.error statistic   p.value</span>
<span style="color:#75715e">##   &lt;chr&gt;            &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 (Intercept)      134.      0.338     398.  0.       </span>
<span style="color:#75715e">## 2 math_campTRUE     10.0     0.407      24.7 7.68e-109</span>
</code></pre></div><p>And look at that! The coefficient for <code>math_campTRUE</code> is 10, which is what the true causal effect is.</p>
<p>Matching with Mahalanobis distance isn’t the only technique available—depending on the context of your actual data (and how complicated you want to get), you could use other algorithms like coarsened exact matching (CEM), optimal matching, or other techniques included in the <strong>MatchIt</strong> package.</p>
<p>One potential downside to matching is that it throws away data. Notice how there are only 1,184 rows in the <code>math_camp_matched</code> dataset, while using inverse probability weights let us use the full 2,000 rows in the original data.</p>
<h2 id="someday-when-im-smarter-do-calculus">Someday when I’m smarter: <em>do</em>-calculus</h2>
<p>Finally, Judea Pearl’s most important contribution to the world of causal inference is a <a href="https://plato.stanford.edu/entries/causal-models/do-calculus.html">complete set of three axioms</a> (or rules) that allow us to convert equations with a $do(\cdot)$ operator into something estimatable with observational data.</p>
<p><em>Very</em> briefly, the <em>do</em> operator lets us define interventions (like programs and policies) in mathematical formulas. For instance, in our ongoing example, we’re interested in $Pr(\text{Grade} | do(\text{Math camp}))$, or the probability distribution of final grades given that someone <em>does</em> math camp. Math camp is an intervention, and in a randomized controlled trial, we’d be able to control who got to <em>do</em> it, and thereby estimate the causal effect.</p>
<p>Given observational data, though, we’re left only with the ability to calculate $Pr(\text{Grade} | \text{Math camp})$, or the probability distribution of final grades given math camp. Because there’s no $do(\cdot)$ here, we can’t isolate the effect entirely if there are confounders like GRE and GPA. We tried that earlier in the “correlation isn’t causation” section and found an incorrect program effect.</p>
<p>The three rules of Pearl’s <em>do</em>-calculus allows us to chop up causal diagrams in systematic ways that can remove the $do(\cdot)$. The reason closing backdoors by adjusting for confounders works is because the approach follows one of the <em>do</em>-calculus rules that removes $do(\cdot)$ from $Pr(\text{Grade} | do(\text{Math camp}))$. For instance (and apologies for using X, Y, and Z instead of actual variables!), in a DAG with one confounder (Z)…</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">backdoor_dag <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">dagify</span>(Y <span style="color:#f92672">~</span> X <span style="color:#f92672">+</span> Z,
                       X <span style="color:#f92672">~</span> Z,
                       exposure <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;X&#34;</span>,
                       outcome <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Y&#34;</span>,
                       coords <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(x <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(X <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, Y <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>, Z <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>),
                                     y <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(X <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, Y <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, Z <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>)))

<span style="color:#a6e22e">ggdag</span>(backdoor_dag) <span style="color:#f92672">+</span> 
  <span style="color:#a6e22e">theme_dag</span>()
</code></pre></div><p><img src="do-calculus-tiny-dag-1.png" alt="Tiny XYZ DAG"></p>
<p>…the <em>do</em>-calculus version of backdoor adjustment is:</p>
<p>$$
P(Y | do(X)) = \sum_Z P(Y | X, Z) \times P(Z)
$$</p>
<p>In other words, we can remove the $do(\cdot)$ if we multiply the probability distribution of Y given both X and Z by the probability distribution of Z, and then add all those values up for every value of Z. If X, Y, and Z were all binary, we’d be able to write the $do$-free version of the causal effect like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># P(y|do(x=1)) = P(y|x=1, z=1)*P(z=1) + P(y|x=1, z=0)*P(z=0)</span>
<span style="color:#a6e22e">mean</span>(y[x <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;</span> z <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>]) <span style="color:#f92672">*</span> <span style="color:#a6e22e">mean</span>(z <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span> <span style="color:#a6e22e">mean</span>(y[x <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;</span> z <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>]) <span style="color:#f92672">*</span> <span style="color:#a6e22e">mean</span>(z <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>)
</code></pre></div><p>There are fancy algorithms that can determine the exact adjustment formula for a given DAG, and the <strong>causaleffect</strong> package lets you use these algorithms in R. Here’s the <em>do</em>-calculus version of our math camp example. Unfortunately we have to rewrite the DAG with a different syntax for it to work:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">library</span>(causaleffect)
<span style="color:#a6e22e">library</span>(igraph)

math_dag <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">graph.formula</span>(grade <span style="color:#f92672">+-</span> undergradGPA, 
                          grade <span style="color:#f92672">+-</span> GREquant, 
                          grade <span style="color:#f92672">+-</span> GREverbal,
                          grade <span style="color:#f92672">+-</span> mathcamp,
                          mathcamp <span style="color:#f92672">+-</span> GREquant,
                          mathcamp <span style="color:#f92672">+-</span> undergradGPA,
                          GREquant <span style="color:#f92672">+-</span> undergradGPA,
                          GREverbal <span style="color:#f92672">+-</span> undergradGPA,
                      simplify <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>)
<span style="color:#75715e"># plot(math_dag)  # Plot this</span>

<span style="color:#75715e"># expr returns a LaTeX formula; simp simplifies the formula through repeated</span>
<span style="color:#75715e"># application of the rules of do-calculus</span>
do_calc_formula <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">causal.effect</span>(y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;grade&#34;</span>, x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;mathcamp&#34;</span>,
                                 G <span style="color:#f92672">=</span> math_dag, expr <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>, simp <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>)
</code></pre></div><p>This produces the following <em>do</em>-calculus-based adjustment formula:</p>
<div style="font-size: 60%;">
$$
\sum_{GREquant,undergradGPA}P(grade|undergradGPA,GREquant,mathcamp)P(GREquant|undergradGPA)P(undergradGPA)
$$
</div>
<p>Neat! We still need to adjust for GRE quantitative scores and undergrad GPA, and if we somehow multiply the three probability distributions (final grade given GPA, GRE, and mathcamp, GRE given GPA, and GPA), we’ll have a $do(\cdot)$-free version of the causal effect.</p>
<p><strong>Unfortunately I have absolutely no idea how to do this with R.</strong> Continuous variables blow up the math in <em>do</em>-calculus equations and I don&rsquo;t know how to deal with that.</p>
<h2 id="comparison-of-all-methods">Comparison of all methods</h2>
<p>Phew. We just used naive matching, inverse probability weighting, and Mahalanobis matching to estimate the causal effect of a hypothetical math camp program on final grades using only observational data. How’d we do?!</p>
<p>Here are all the estimates we have, along with a blue dotted line for the truth. Adjusting for backdoor confounders allows us to get far more accurate and identified causal results than when we leave things unadjusted, and we get the most accurate results when we explicitly attempt to match treated and untreated observations (as with do with the IPW ATO and with Mahalanobis matching). That’s likely not always the case—lots of these methods depend on the relationships between the different nodes in the graph, and it’s possible that they don’t work when there are non-linear relationships.</p>
<p>But in this case, at least, we can prove causation with observational data, which is really neat!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">library</span>(ggstance)

all_models <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">tribble</span>(
  <span style="color:#f92672">~</span>method, <span style="color:#f92672">~</span>model,
  <span style="color:#e6db74">&#34;Wrong correlation-not-causation&#34;</span>, model_wrong,
  <span style="color:#e6db74">&#34;Forbidden needs camp&#34;</span>, model_adj_needs_camp,
  <span style="color:#e6db74">&#34;Educated guess needs camp&#34;</span>, model_adj_needs_camp_guess,
  <span style="color:#e6db74">&#34;Inverse probability weighting ATE&#34;</span>, model_ipw_ate,
  <span style="color:#e6db74">&#34;Inverse probability weighting ATO&#34;</span>, model_ipw_ato,
  <span style="color:#e6db74">&#34;Mahalanobis matching&#34;</span>, model_matched
) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># Extract coefficient for math_camp from each model</span>
  <span style="color:#a6e22e">mutate</span>(tidied <span style="color:#f92672">=</span> <span style="color:#a6e22e">map</span>(model, <span style="color:#f92672">~</span><span style="color:#a6e22e">tidy</span>(., conf.int <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>)),
         effect <span style="color:#f92672">=</span> <span style="color:#a6e22e">map</span>(tidied, <span style="color:#f92672">~</span><span style="color:#a6e22e">filter</span>(., term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;math_campTRUE&#34;</span>))) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">unnest</span>(effect) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">select</span>(<span style="color:#f92672">-</span>model, <span style="color:#f92672">-</span>tidied) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(method <span style="color:#f92672">=</span> <span style="color:#a6e22e">fct_inorder</span>(method))

<span style="color:#a6e22e">ggplot</span>(all_models, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> estimate, y <span style="color:#f92672">=</span> <span style="color:#a6e22e">fct_rev</span>(method), color <span style="color:#f92672">=</span> method)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_vline</span>(xintercept <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, linetype <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;dashed&#34;</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#0074D9&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_pointrangeh</span>(<span style="color:#a6e22e">aes</span>(xmin <span style="color:#f92672">=</span> conf.low, xmax <span style="color:#f92672">=</span> conf.high), size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_color_viridis_d</span>(option <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;plasma&#34;</span>, end <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.9</span>, guide <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Causal effect&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>, caption <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Dotted line shows true effect&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_light</span>()
</code></pre></div><p><img src="compare-everything-1.png" alt="Comparison of all causal effects"></p>
%!s(MISSING)]]></content>
        <category term="r" />
        <category term="ggplot" />
        <category term="tidyverse" />
        <category term="DAGs" />
        <category term="causal inference" />
        <category term="do calculus" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Automatically zip up subdirectories with Make]]></title>
        <link href="https://www.shagunjhaver.com/blog/2020/01/10/makefile-subdirectory-zips/" rel="alternate" />
        <published>2020-01-10T00:00:00+00:00</published>
        <updated>2020-01-10T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2020/01/10/makefile-subdirectory-zips/</id>
        <summary type="html"><![CDATA[Use a Makefile to automatically zip up all subdirectories in a given folder *while also* accounting for dependencies]]></summary>
        <content type="html"><![CDATA[<p><a href="https://github.com/andrewheiss/makefile-subdirectory-zips">See this notebook on GitHub</a>. You can (and should) download the project from there if you want to follow along and try this out.</p>
<hr>
<p><a href="#tldr-final-makefile">tl;dr: Skip to the completed example.</a></p>
<hr>
<p>I use <a href="https://bookdown.org/yihui/blogdown"><strong>blogdown</strong></a> to generate the websites for <a href="https://www.andrewheiss.com/teaching/">all the courses I teach</a>, and it’s delightful to not have to worry about databases and server configurations. I use a <a href="https://www.gnu.org/software/make/"><code>Makefile</code></a> to run the requisite commands with <code>make deploy</code>, which creates a magical incantation: R, <a href="https://bookdown.org/yihui/blogdown"><strong>blogdown</strong></a>, and <a href="https://gohugo.io/">Hugo</a> parse <a href="https://rmarkdown.rstudio.com/">R Markdown</a> files and generate a complete HTML site, which then gets synced <a href="https://evalsp20.classes.andrewheiss.com/">to my server</a>, all with minimal input from me.</p>
<p>There are occasional points of friction, though. One that I’ve suffered through for the past few years is the creation and distribution of zipped files. I teach students R, and R projects rarely consist of a single file. To make it easier to distribute problem sets and projects to students, I zip these subfolders into single files like <code>problem_set_1.zip</code>, so they just have to download one thing. Creating <code>.zip</code> files on macOS is trivial—right click on a folder, choose “Compress {foldername}”, and you’re done.</p>
<p>But it’s tedious when you have lots of folders to zip, and even more tedious to remember to rezip folders where you’ve made changes. SO MANY TIMES I’ve fixed errors in R scripts or data but then have forgotten to rezip the project, and students end up downloading the uncorrected version of projects. Moreover, macOS includes hidden <code>.DS_Store</code> files when it zips up folders, and R and RStudio create their own invisible files and folders, like <code>.Rhistory</code> and <code>.Rproj.user/</code>. To avoid shipping these out to students, I typically go to the terminal, manually delete the unwanted invisible files, and <em>then</em> zip up the directory. But once again, I regularly forget to do this and end up including unwanted files.</p>
<p>I figured that since I’m already using a <code>Makefile</code> to generate and upload the course website, I’d try to use the magical power of Make to automatically zip up project folders as I build the site <em>and</em> update them only if there are any changes. And it turns out that it’s possible, though the end result looks really cryptic (as do all <code>Makefiles</code>, really).</p>
<p>What follows here is a step-by-step didactic explanation of how I built a set of <code>Makefile</code> recipes to automatically zip up all the directories within a given directory, excluding invisible files (i.e. any file or directory that begins with a <code>.</code>), and only zipping up directories that have been modified since the last time Make was run. <a href="#tldr-final-makefile">You can also skip to the end to see the finished <code>Makefile</code>.</a></p>
<h2 id="folder-structure">Folder structure</h2>
<p>The example here assumes the project subdirectories live in a folder called <code>static/projects/</code>, since that mimics <strong>blogdown</strong>/Hugo (any files in the <code>static/</code> directory do not get processed by knitr when you build the site). Here’s the example folder structure with three problem set projects:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">static
└── projects
    ├── problem_set_1
    │   ├── data
    │   │   └── stuff.csv
    │   ├── problem_set_1.Rproj
    │   └── work.Rmd
    ├── problem_set_2
    │   ├── data
    │   │   └── other_stuff.csv
    │   ├── problem_set_2.Rproj
    │   └── work.Rmd
    └── problem_set_3
        ├── code.R
        ├── data
        │   └── more_stuff.csv
        ├── problem_set_3.Rproj
        └── work.Rmd
</code></pre></div><p>In the end, what I want is something like this, with <code>.zip</code> files for each of the problem set folders (starred):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">static
└── projects
    ├── problem_set_1
    │   ├── data
    │   │   └── stuff.csv
    │   ├── problem_set_1.Rproj
    │   └── work.Rmd
    ├── ⭐️ problem_set_1.zip
    ├── problem_set_2
    │   ├── data
    │   │   └── other_stuff.csv
    │   ├── problem_set_2.Rproj
    │   └── work.Rmd
    ├── ⭐️ problem_set_2.zip
    ├── problem_set_3
    │   ├── code.R
    │   ├── data
    │   │   └── more_stuff.csv
    │   ├── problem_set_3.Rproj
    │   └── work.Rmd
    └── ⭐️ problem_set_3.zip
</code></pre></div><h2 id="basic-approach">Basic approach</h2>
<p>The basic syntax for <code>Makefile</code> recipes is fairly simple:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-make" data-lang="make"><span style="color:#a6e22e">file_to_create</span><span style="color:#f92672">:</span> dependencies
    stuff to run to create file using dependencies
</code></pre></div><p>If I want to create a zipped file of one problem set project, I can add this to a file named <code>Makefile</code> (no extension), and then run <code>make static/projects/problem_set_1.zip</code> from the terminal:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-make" data-lang="make"><span style="color:#a6e22e">static/projects/problem_set_1.zip</span><span style="color:#f92672">:</span>
    zip -r static/projects/problem_set_1.zip static/projects/problem_set_1
</code></pre></div><p>The <code>-r</code> flag means that all subdirectories in <code>static/projects/problem_set_1</code> will be included. If I type <code>make static/projects/problem_set_1.zip</code> from the terminal, it should compress the folder and all its subfolders into a single <code>.zip</code> file.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">&gt; make static/projects/problem_set_1.zip

zip -r static/projects/problem_set_1.zip static/projects/problem_set_1
  adding: static/projects/problem_set_1/ (stored 0%)
  adding: static/projects/problem_set_1/work.Rmd (stored 0%)
  adding: static/projects/problem_set_1/.DS_Store (deflated 97%)
  adding: static/projects/problem_set_1/problem_set_1.Rproj (deflated 28%)
  adding: static/projects/problem_set_1/data/ (stored 0%)
  adding: static/projects/problem_set_1/data/stuff.csv (stored 0%)
</code></pre></div><h2 id="problems-with-the-basic-approach">Problems with the basic approach</h2>
<p>However, there are a few issues:</p>
<ol>
<li>If I run this again, <code>zip</code> will add files to the <code>.zip</code>. If any were deleted from the actual folder, they’ll stay inside the <code>.zip</code> file (i.e. the folder and the <code>.zip</code> file won’t be synchronized).</li>
<li>This will include files and folders that begin with <code>.</code> (like <code>.Rhistory</code> and <code>.Rproj.user/</code>), and I don’t want those.</li>
<li>The command will include all the parent folders in the zipped file. After I extract it, the actual files will be nested inside <code>static/projects/</code>.</li>
<li>There are no dependencies, so this will happen every time I run <code>make static/projects/problem_set_1.zip</code>, even if nothing changed.</li>
<li>This is for a single target only. In theory, I’d need to manually add separate entries for each folder in <code>static/projects</code>, and that’s tedious.</li>
</ol>
<h2 id="tweaking-the-zip-recipe">Tweaking the <code>zip</code> recipe</h2>
<p>We can fix the first two issues with some adjustments to the <code>zip</code> command. Adding the <code>-FS</code> flag (<em>f</em>ile <em>s</em>ync) will ensure that <code>zip</code> syncs the files between the source directory and the zipped files, and including the <code>-x</code> flag allows us to exclude patterns of files from the zipped file. Doing this will both sync files and exclude files/folders with a <code>.</code> prefix:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-make" data-lang="make"><span style="color:#a6e22e">static/projects/problem_set_1.zip</span><span style="color:#f92672">:</span>
    zip -FSr static/projects/problem_set_1.zip static/projects/problem_set_1 -x static/projects/problem_set_1/.<span style="color:#ae81ff">\*</span>
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">&gt; make static/projects/problem_set_1.zip

zip -FSr static/projects/problem_set_1.zip static/projects/problem_set_1 -x static/projects/problem_set_1/.\*
  adding: static/projects/problem_set_1/ (stored 0%)
  adding: static/projects/problem_set_1/work.Rmd (stored 0%)
  adding: static/projects/problem_set_1/problem_set_1.Rproj (deflated 28%)
  adding: static/projects/problem_set_1/data/ (stored 0%)
  adding: static/projects/problem_set_1/data/stuff.csv (stored 0%)
</code></pre></div><p>The third issue with parent folders can’t be solved directly with <code>zip</code>. The problem occurs because we’re running <code>make</code> from the root of the project, so it’s including the whole nested file structure. To solve this, we can have <code>make</code> navigate to <code>static/projects</code> before zipping anything, which then simplifies the filenames in the command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-make" data-lang="make"><span style="color:#a6e22e">static/projects/problem_set_1.zip</span><span style="color:#f92672">:</span>
    cd static/projects <span style="color:#f92672">&amp;&amp;</span> zip -FSr problem_set_1.zip problem_set_1 -x problem_set_1/.<span style="color:#ae81ff">\*</span>
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">&gt; make static/projects/problem_set_1.zip

cd static/projects &amp;&amp; zip -FSr problem_set_1.zip problem_set_1 -x problem_set_1/.\*
  adding: problem_set_1/ (stored 0%)
  adding: problem_set_1/work.Rmd (stored 0%)
  adding: problem_set_1/problem_set_1.Rproj (deflated 28%)
  adding: problem_set_1/data/ (stored 0%)
  adding: problem_set_1/data/stuff.csv (stored 0%)
</code></pre></div><p>No more nested parent folders!</p>
<h2 id="adding-dependencies">Adding dependencies</h2>
<p>Right now, there are no dependencies, which means that <code>make</code> will run <code>zip</code> regardless of whether it needs to. Even if nothing is changed in the <code>problem_set_1</code> folder, a new <code>.zip</code> file will get created (and it’ll get reuploaded to the server because it’ll have a new creation date, which means there will be a lot of unnecessary uploading of potentially large files).</p>
<p>Normally, we’d have to define dependencies like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-make" data-lang="make"><span style="color:#a6e22e">static/projects/problem_set_1.zip</span><span style="color:#f92672">:</span> {DEPENDENT FILES}
    cd static/projects <span style="color:#f92672">&amp;&amp;</span> zip -FSr problem_set_1.zip problem_set_1 -x problem_set_1/.<span style="color:#ae81ff">\*</span>
</code></pre></div><p>There’s no way to use a folder as a dependency, which means we need to list all the possible files in the project:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-make" data-lang="make"><span style="color:#a6e22e">static/projects/problem_set_1.zip</span><span style="color:#f92672">:</span> static/projects/problem_set_1/work.Rmd static/projects/problem_set_1/problem_set_1.Rproj static/projects/problem_set_1/data/stuff.csv
    cd static/projects <span style="color:#f92672">&amp;&amp;</span> zip -FSr problem_set_1.zip problem_set_1 -x problem_set_1/.<span style="color:#ae81ff">\*</span>
</code></pre></div><p>And that’s horrifically long and awful.</p>
<p>Instead of manually typing out all the dependencies, we can use a little <code>bash</code> trick to get a list of all the files in the folder and generate the list of dependencies using <a href="https://www.gnu.org/software/make/manual/html_node/Shell-Function.html"><code>$(shell ...)</code></a>. To see this in action more easily, it’s helpful to assign this shell command to a variable and create a new temporary target to show it</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-make" data-lang="make">FILES_IN_FOLDER <span style="color:#f92672">=</span> <span style="color:#66d9ef">$(</span>shell find static/projects/problem_set_1 -type f<span style="color:#66d9ef">)</span>

<span style="color:#a6e22e">debug</span><span style="color:#f92672">:</span>
    @echo <span style="color:#66d9ef">$(</span>FILES_IN_FOLDER<span style="color:#66d9ef">)</span>
</code></pre></div><p>Now if you run <code>make debug</code>, you should see a list of all the files in the given folder (since that list was stored as <code>FILES_IN_FOLDER</code>; the <code>@</code> in front of <code>echo</code> suppresses the actual call to <code>echo</code>, so you should just see the output of the command).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">&gt; make debug

static/projects/problem_set_1/work.Rmd static/projects/problem_set_1/.DS_Store static/projects/problem_set_1/problem_set_1.Rproj static/projects/problem_set_1/data/stuff.csv
</code></pre></div><p>You might see that it found invisible files like <code>static/projects/problem_set_1/.DS_Store</code>. We don’t want to include those as dependencies (especially files in <code>.Rproj.user</code>, since those get modified every time you do anything in RStudio), so we can modify the <code>find</code> command to exclude files that start with <code>.</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-make" data-lang="make">FILES_IN_FOLDER <span style="color:#f92672">=</span> <span style="color:#66d9ef">$(</span>shell find static/projects/problem_set_1 -type f ! -path <span style="color:#e6db74">&#34;static/projects/problem_set_1/.*&#34;</span><span style="color:#66d9ef">)</span>

<span style="color:#a6e22e">debug</span><span style="color:#f92672">:</span>
    @echo <span style="color:#66d9ef">$(</span>FILES_IN_FOLDER<span style="color:#66d9ef">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">&gt; make debug

static/projects/problem_set_1/work.Rmd static/projects/problem_set_1/problem_set_1.Rproj static/projects/problem_set_1/data/stuff.csv
</code></pre></div><p>With that <code>$(shell ...)</code> magic working, we can include it in the recipe as a dependency:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-make" data-lang="make"><span style="color:#a6e22e">static/projects/problem_set_1.zip</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">$(</span>shell find static/projects/problem_set_1 -type f ! -path &#34;static/projects/problem_set_1/.*&#34;<span style="color:#66d9ef">)</span>
    cd static/projects <span style="color:#f92672">&amp;&amp;</span> zip -FSr problem_set_1.zip problem_set_1 -x problem_set_1/.<span style="color:#ae81ff">\*</span>
</code></pre></div><p>HOWEVER, this still won’t quite work. Put simply (and likely incorrectly, but it makes sense) <code>make</code> expands <code>$()</code> variables after it determines dependency rules, so it will treat <code>$(shell ...)</code> like an actual dependency instead of treating the <em>output</em> of <code>$(shell ...)</code> as dependencies. To get around this, we can enable <a href="http://www.gnu.org/software/make/manual/make.html#Secondary-Expansion">secondary expansion</a> (<a href="https://stackoverflow.com/a/21950971/120898">see also</a>), which delays the creation of dependency rules until after <code>$(shell ...)</code> is run. To enable it, include <code>.SECONDEXPANSION:</code> somewhere and then use <code>$$()</code> instead of <code>$()</code> when expanding variables:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-make" data-lang="make"><span style="color:#a6e22e">.SECONDEXPANSION</span><span style="color:#f92672">:</span>

<span style="color:#a6e22e">static/projects/problem_set_1.zip</span><span style="color:#f92672">:</span> $<span style="color:#66d9ef">$(</span>shell find static/projects/problem_set_1 -type f ! -path &#34;static/projects/problem_set_1/.*&#34;<span style="color:#66d9ef">)</span>
    cd static/projects <span style="color:#f92672">&amp;&amp;</span> zip -FSr problem_set_1.zip problem_set_1 -x problem_set_1/.<span style="color:#ae81ff">\*</span>
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">&gt; make static/projects/problem_set_1.zip

cd static/projects &amp;&amp; zip -FSr problem_set_1.zip problem_set_1 -x problem_set_1/.\*
  adding: problem_set_1/ (stored 0%)
  adding: problem_set_1/work.Rmd (stored 0%)
  adding: problem_set_1/problem_set_1.Rproj (deflated 28%)
  adding: problem_set_1/data/ (stored 0%)
  adding: problem_set_1/data/stuff.csv (stored 0%)
</code></pre></div><p>Phew. Now all the non-invisible files inside <code>problem_set_1/</code> are dependencies. If I run it again without changing anything, nothing should get zipped:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">&gt; make static/projects/problem_set_1.zip

make: `static/projects/problem_set_1.zip&#39; is up to date.
</code></pre></div><h2 id="automatic-variables">Automatic variables</h2>
<p>Everything’s working great so far! We’ve addressed <a href="#problems-with-the-basic-approach">the first 4 of the 5 issues we found before</a>. The only thing we have left is automating this so we don’t have to make another target recipe for <code>static/projects/problem_set_2.zip</code> and <code>static/projects/problem_set_3.zip</code> and so on. In the end, we want to be able to type <code>make zip_projects</code> and have <code>make</code> compress each of the subfolders automatically, based on changes in dependencies. To do this, we can use <a href="http://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html">automatic variables</a> (<a href="https://stackoverflow.com/a/3220288/120898">see also</a>) to generate targets on the fly. Here’s how we do this.</p>
<p>First, we can generate a list of all the subdirectories we want to compress, and then modify that list so that it becomes a list of all the targets we want to create (i.e. <code>problem_set_1.zip</code>, <code>problem_set_2.zip</code>, and so on). We’ll use some built-in <code>make</code> functions for manipulating text and searching for files to create some variables. Again, it’s easiest to see what these variables actually are if you create a temporary target like debug. Check the documentation for <a href="https://www.gnu.org/software/make/manual/html_node/Text-Functions.html"><code>$(filter ...)</code></a>, <a href="https://www.gnu.org/software/make/manual/html_node/File-Name-Functions.html"><code>$(wildcard ...)</code></a>, <a href="https://www.gnu.org/software/make/manual/html_node/Text-Functions.html"><code>$(patsubst ...)</code></a>, and <a href="https://www.gnu.org/software/make/manual/html_node/File-Name-Functions.html"><code>$(addsuffix ...)</code></a> for more details about what these functions do.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-make" data-lang="make">TO_ZIP_DIRS <span style="color:#f92672">=</span> <span style="color:#66d9ef">$(</span>filter %/, <span style="color:#66d9ef">$(</span>wildcard static/projects/*/<span style="color:#66d9ef">))</span>  <span style="color:#75715e"># Find all directories in static/projects</span>
TO_ZIP_NAMES <span style="color:#f92672">=</span> <span style="color:#66d9ef">$(</span>patsubst %/,%,<span style="color:#66d9ef">$(</span>TO_ZIP_DIRS<span style="color:#66d9ef">))</span>  <span style="color:#75715e"># Remove trailing /</span>
ZIP_TARGETS <span style="color:#f92672">=</span> <span style="color:#66d9ef">$(</span>addsuffix .zip,<span style="color:#66d9ef">$(</span>TO_ZIP_NAMES<span style="color:#66d9ef">))</span>  <span style="color:#75715e"># Add .zip</span>

<span style="color:#a6e22e">debug</span><span style="color:#f92672">:</span>
    @echo <span style="color:#66d9ef">$(</span>TO_ZIP_DIRS<span style="color:#66d9ef">)</span>
    @echo <span style="color:#66d9ef">$(</span>TO_ZIP_NAMES<span style="color:#66d9ef">)</span>
    @echo <span style="color:#66d9ef">$(</span>ZIP_TARGETS<span style="color:#66d9ef">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">&gt; make debug

static/projects/problem_set_1/ static/projects/problem_set_2/ static/projects/problem_set_3/
static/projects/problem_set_1 static/projects/problem_set_2 static/projects/problem_set_3
static/projects/problem_set_1.zip static/projects/problem_set_2.zip static/projects/problem_set_3.zip
</code></pre></div><p>Neat. <code>$(ZIP_TARGETS)</code> now has a list of zipped files that we want to create. We can use that list as an actual target in a recipe. For now, we’ll just use <code>echo</code> so we can see what’s going on with the variable names. Note how I created a new target called <code>zip_projects</code>—this is what we’ll actually run in the terminal. It will look at the list in <code>$(ZIP_TARGETS)</code> and run the appropriate recipe for each one (which for now means it’ll just print the name of the file). Also notice the <code>$@</code>. This represents the name of the target that is passed to the recipe. Run <code>make zip_projects</code> and you should see a list of future filenames:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-make" data-lang="make"><span style="color:#a6e22e">$(ZIP_TARGETS)</span><span style="color:#f92672">:</span>
    @echo $@

<span style="color:#a6e22e">zip_projects</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">$(</span>ZIP_TARGETS<span style="color:#66d9ef">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">&gt; make zip_projects

static/projects/problem_set_1.zip
static/projects/problem_set_2.zip
static/projects/problem_set_3.zip
</code></pre></div><p>Next we need to modify the big hairy <code>cd static/projects &amp;&amp; zip -FSr problem_set_1.zip problem_set_1 -x problem_set_1/.\*</code> command to use the automatic names in <code>$(ZIP_TARGETS)</code>. We have access to the full target name (<code>static/projects/problem_set_1.zip</code>) as the special <code>$@</code> variable. We can use other built-in functions to extract pieces of that string. Specifically, we need these things:</p>
<ul>
<li><code>static/projects</code>, or the level below the base name of the future <code>.zip</code> file</li>
<li><code>problem_set_1.zip</code>, or the parent-directory-less name of the future <code>.zip</code> file</li>
<li><code>problem_set_1</code>, or the parent-directory-less and extension-less name of the future <code>.zip</code> file</li>
</ul>
<p>We can extract each of those with different <a href="https://www.gnu.org/software/make/manual/html_node/File-Name-Functions.html">file name functions</a>:</p>
<ul>
<li><code>$(basename $@)</code> will lead to <code>static/projects/problem_set_1</code>. We can navigate to this folder with <code>cd</code> and then move back a level with <code>..</code> to get <code>static/projects</code></li>
<li><code>$(notdir $@)</code> will lead to <code>problem_set_1.zip</code></li>
<li><code>$(notdir $(basename $@))</code> will lead to <code>problem_set_1</code></li>
</ul>
<p>You can check all these by adding them to the recipe temporarily:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-make" data-lang="make"><span style="color:#a6e22e">$(ZIP_TARGETS)</span><span style="color:#f92672">:</span>
    @echo $@
    @echo <span style="color:#66d9ef">$(</span>basename $@<span style="color:#66d9ef">)</span>
    @echo <span style="color:#66d9ef">$(</span>notdir $@<span style="color:#66d9ef">)</span>
    @echo <span style="color:#66d9ef">$(</span>notdir <span style="color:#66d9ef">$(</span>basename $@<span style="color:#66d9ef">))</span>

<span style="color:#a6e22e">zip_projects</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">$(</span>ZIP_TARGETS<span style="color:#66d9ef">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">&gt; make zip_projects

static/projects/problem_set_1.zip
static/projects/problem_set_1
problem_set_1.zip
problem_set_1
static/projects/problem_set_2.zip
static/projects/problem_set_2
problem_set_2.zip
problem_set_2
static/projects/problem_set_3.zip
static/projects/problem_set_3
problem_set_3.zip
problem_set_3
</code></pre></div><p>With all those pieces of filenames, we can replace the hardcoded values of our hairy <code>zip</code> command with automatic versions:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-make" data-lang="make"><span style="color:#a6e22e">$(ZIP_TARGETS)</span><span style="color:#f92672">:</span>
    cd <span style="color:#66d9ef">$(</span>basename $@<span style="color:#66d9ef">)</span>/.. <span style="color:#f92672">&amp;&amp;</span> zip -FSr <span style="color:#66d9ef">$(</span>notdir $@<span style="color:#66d9ef">)</span> <span style="color:#66d9ef">$(</span>notdir <span style="color:#66d9ef">$(</span>basename $*<span style="color:#66d9ef">))</span> -x <span style="color:#66d9ef">$(</span>notdir <span style="color:#66d9ef">$(</span>basename $*<span style="color:#66d9ef">))</span>/.<span style="color:#ae81ff">\*</span>
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">&gt; make zip_projects

cd static/projects/problem_set_1/.. &amp;&amp; zip -FSr problem_set_1.zip problem_set_1 -x problem_set_1/.\*
  adding: problem_set_1/ (stored 0%)
  adding: problem_set_1/work.Rmd (stored 0%)
  adding: problem_set_1/problem_set_1.Rproj (deflated 28%)
  adding: problem_set_1/data/ (stored 0%)
  adding: problem_set_1/data/stuff.csv (stored 0%)
cd static/projects/problem_set_2/.. &amp;&amp; zip -FSr problem_set_2.zip problem_set_2 -x problem_set_2/.\*
  adding: problem_set_2/ (stored 0%)
  adding: problem_set_2/work.Rmd (stored 0%)
  adding: problem_set_2/problem_set_2.Rproj (deflated 28%)
  adding: problem_set_2/data/ (stored 0%)
  adding: problem_set_2/data/other_stuff.csv (stored 0%)
cd static/projects/problem_set_3/.. &amp;&amp; zip -FSr problem_set_3.zip problem_set_3 -x problem_set_3/.\*
  adding: problem_set_3/ (stored 0%)
  adding: problem_set_3/work.Rmd (stored 0%)
  adding: problem_set_3/code.R (stored 0%)
  adding: problem_set_3/problem_set_3.Rproj (deflated 28%)
  adding: problem_set_3/data/ (stored 0%)
  adding: problem_set_3/data/more_stuff.csv (stored 0%)
</code></pre></div><p>Holy moly! It zipped each individual folder! We’re almost done! The only thing we’re missing is dependencies—right now, if we run this again, it’ll rezip everything again, which we don’t want. We need to add our <code>$$(shell ..)</code> incantation as a dependency, but we need to make it specific to each target: i.e. it needs to generate a list of dependent files for each of the future zip files (only the contents of <code>problem_set_1</code> when making <code>problem_set_1.zip</code>, etc.). To make that work, we can use a <code>%</code> wildcard in the dependency definition:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-make" data-lang="make"><span style="color:#a6e22e">$(ZIP_TARGETS)</span><span style="color:#f92672">:</span> %.zip : $<span style="color:#66d9ef">$(</span>shell find % -type f ! -path &#34;%/.*&#34;<span style="color:#66d9ef">)</span>
    cd <span style="color:#66d9ef">$(</span>basename $@<span style="color:#66d9ef">)</span>/.. <span style="color:#f92672">&amp;&amp;</span> zip -FSr <span style="color:#66d9ef">$(</span>notdir $@<span style="color:#66d9ef">)</span> <span style="color:#66d9ef">$(</span>notdir <span style="color:#66d9ef">$(</span>basename $@<span style="color:#66d9ef">))</span> -x <span style="color:#66d9ef">$(</span>notdir <span style="color:#66d9ef">$(</span>basename $@<span style="color:#66d9ef">))</span>/.<span style="color:#ae81ff">\*</span>
</code></pre></div><p>If we manually delete any zipped files and run <code>make zip_projects</code>, it’ll generate them as expected. Where this is magical, though, is if I edit one of the files (like <code>word.Rmd</code> in <code>problem_set_1</code>) and then rerun <code>make zip_projects</code>, it will <em>only</em> rezip that project:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">&gt; make zip_projects

cd static/projects/problem_set_1/.. &amp;&amp; zip -FSr problem_set_1.zip problem_set_1 -x problem_set_1/.\*
updating: problem_set_1/work.Rmd (stored 0%)
</code></pre></div><p>And that’s it! We’re done!</p>
<p>The final recipe is <em>extraordinarily</em> cryptic, but because we built it up slowly, we should know what each of the pieces (<code>$@</code>, <code>%</code>, <code>$(ZIP_TARGETS)</code>, <code>$(basename $@)</code>, etc.) are.</p>
<h3 id="tldr-final-makefile">tl;dr final <code>Makefile</code></h3>
<p>Here’s the complete final <code>Makefile</code> without all the intermediate steps:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-make" data-lang="make">TO_ZIP_DIRS <span style="color:#f92672">=</span> <span style="color:#66d9ef">$(</span>filter %/, <span style="color:#66d9ef">$(</span>wildcard static/projects/*/<span style="color:#66d9ef">))</span>  <span style="color:#75715e"># Find all directories in static/projects</span>
TO_ZIP_NAMES <span style="color:#f92672">=</span> <span style="color:#66d9ef">$(</span>patsubst %/,%,<span style="color:#66d9ef">$(</span>TO_ZIP_DIRS<span style="color:#66d9ef">))</span>  <span style="color:#75715e"># Remove trailing /</span>
ZIP_TARGETS <span style="color:#f92672">=</span> <span style="color:#66d9ef">$(</span>addsuffix .zip,<span style="color:#66d9ef">$(</span>TO_ZIP_NAMES<span style="color:#66d9ef">))</span>  <span style="color:#75715e"># Add .zip</span>

<span style="color:#a6e22e">.SECONDEXPANSION</span><span style="color:#f92672">:</span>

<span style="color:#a6e22e">$(ZIP_TARGETS)</span><span style="color:#f92672">:</span> %.zip : $<span style="color:#66d9ef">$(</span>shell find % -type f ! -path &#34;%/.*&#34;<span style="color:#66d9ef">)</span>
    cd <span style="color:#66d9ef">$(</span>basename $@<span style="color:#66d9ef">)</span>/.. <span style="color:#f92672">&amp;&amp;</span> zip -FSr <span style="color:#66d9ef">$(</span>notdir $@<span style="color:#66d9ef">)</span> <span style="color:#66d9ef">$(</span>notdir <span style="color:#66d9ef">$(</span>basename $@<span style="color:#66d9ef">))</span> -x <span style="color:#66d9ef">$(</span>notdir <span style="color:#66d9ef">$(</span>basename $@<span style="color:#66d9ef">))</span>/.<span style="color:#ae81ff">\*</span>

<span style="color:#a6e22e">zip_projects</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">$(</span>ZIP_TARGETS<span style="color:#66d9ef">)</span>
</code></pre></div><p>You can incorporate this into any other <code>Makefile</code>, <a href="https://github.com/andrewheiss/evalsp20.classes.andrewheiss.com/blob/master/Makefile">like this one that I use for building a course website</a>. There, the <code>zip_projects</code> target is a dependency of the <code>build</code> target, so I just have to run <code>make build</code> to automatically zip everything up <em>and</em> build the site with <strong>blogdown</strong>.</p>
<p>Perfection. Any subfolder in <code>static/projects/</code> will automatically be zipped up with no input from me. No more accidentally forgetting to zip up things or include invisible files!</p>
%!s(MISSING)]]></content>
        <category term="blogdown" />
        <category term="r" />
        <category term="rmarkdown" />
        <category term="markdown" />
        <category term="make" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Create a dynamic dashboard with R, flexdashboard, and Shiny]]></title>
        <link href="https://www.shagunjhaver.com/blog/2020/01/01/flexdashboard-dynamic-data/" rel="alternate" />
        <published>2020-01-01T00:00:00+00:00</published>
        <updated>2020-01-01T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2020/01/01/flexdashboard-dynamic-data/</id>
        <summary type="html"><![CDATA[Use R Markdown, flexdashboard, and Shiny to create a dashboard that automatically loads data from a Google Sheet]]></summary>
        <content type="html"><![CDATA[<p>Now that I&rsquo;m on the tenure track, I&rsquo;ve been looking for a way to keep track of my different research projects so I can get them all finished and published. <a href="https://doi.org/10.1017/S1049096516000160">Matt Lebo&rsquo;s &ldquo;Managing Your Research Pipeline&rdquo;</a> presents a neat way of quantifying and tracking the progress of your research, and I recently adopted it for my own stuff. I even made a fancy <a href="https://rmarkdown.rstudio.com/">R Markdown</a> + <a href="https://rmarkdown.rstudio.com/flexdashboard/"><strong>flexdashboard</strong></a> <a href="https://twitter.com/andrewheiss/status/1201892963451842562">dashboard to show the status of the pipeline</a> interactively. I manage the data for the dashboard in a Google Sheet, knit the dashboard, and create an HTML file with the latest statistics.</p>
<p>The combination of <a href="https://rmarkdown.rstudio.com/">R Markdown</a> + <a href="https://rmarkdown.rstudio.com/flexdashboard/"><strong>flexdashboard</strong></a> + <a href="https://plot.ly/ggplot2/"><strong>ggplotly</strong></a> makes it incredibly easy to create interactive dashboards, but you have to reknit and recompile the dashboard any time any data changes, which I&rsquo;m not a fan of doing. Wouldn&rsquo;t it be amazing if there was a way to get the latest data into a dashboard document without any reknitting?</p>
<p>Fortunately there <em>is</em> a way! <a href="https://rmarkdown.rstudio.com/flexdashboard/shiny.html"><strong>flexdashboard</strong>’s integration with Shiny</a> makes it possible!</p>
<p>Here&rsquo;s a minimal working example of feeding data from a Google Sheet into a Shiny-based flexdashboard. It has to be hosted on a Shiny server somewhere (like <a href="https://www.shinyapps.io/">shinyapps.io</a> or on your own server), but you shouldn&rsquo;t have to reknit ever again!</p>
<h2 id="step-1-create-a-google-sheet">Step 1: Create a Google Sheet</h2>
<p>Go to Google Drive, create a new spreadsheet, and put this data in it:</p>





<table class="pure-table pure-table-horizontal">
<thead>
<tr>
<th style="text-align:center">Category</th>
<th style="text-align:center">Count</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">A</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">B</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">C</td>
<td style="text-align:center">8</td>
</tr>
<tr>
<td style="text-align:center">D</td>
<td style="text-align:center">2</td>
</tr>
</tbody>
</table>


<p>You can keep it private, but then you have to deal with OAuth tokens to get it to work with a Shiny server, so it&rsquo;s easiest here to make it publicly accessible. If you want to work with private data, check the <a href="https://googlesheets4.tidyverse.org/#auth"><strong>googlesheets4</strong> documentation on authentication</a>. Click on the &ldquo;Share&rdquo; button in the top right corner and make the document accessible via a link. You should also make the sheet public by going to File &gt; Publish to the web and publish as a CSV. You can also just use <a href="https://docs.google.com/spreadsheets/d/1RKNn84xVLUanhGyX8DPvDSd8zt4GX_eBmK2ZX2nf0BI/edit">this sheet here</a> if you don&rsquo;t want to create your own (but this is read only and you won&rsquo;t be able to edit it and see your changes live).</p>
<h2 id="step-2-build-a-static-dashboard">Step 2: Build a static dashboard</h2>
<p>We&rsquo;ll make a barebones dashboard with a couple big numbers at the top showing a count of categories and the sum of the category counts, and an interactive bar chart at the bottom showing the counts in each category. Check the fantastic documentation for <a href="https://rmarkdown.rstudio.com/flexdashboard/"><strong>flexdashboard</strong></a> for more details and examples.</p>
<p>Save this as an R Markdown file and knit it—the resulting HTML file is a complete self-contained dashboard.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">---
title: &#34;Example dashboard with static data from Google&#34;
output:
  flexdashboard::flex_dashboard:
    orientation: rows
    theme: yeti
---


```{r setup, include=FALSE}
library(tidyverse)
library(googlesheets4)
library(flexdashboard)
library(plotly)

# Make googlesheets4 not try to authenticate, since we&#39;re using a public sheet
sheets_deauth()
```

```{r get-data, message=FALSE, include=FALSE}
# The 1RKNn84xVLUanhGyX8DPvDSd8zt4GX_eBmK2ZX2nf0BI comes from the shared link
# URL from Google Sheets. You can also refer to sheets by name if you&#39;re
# authenticated into your account. See the googlesheets4 documentation for more
# details
remote_data &lt;- read_sheet(&#34;1RKNn84xVLUanhGyX8DPvDSd8zt4GX_eBmK2ZX2nf0BI&#34;)
```

## Row

### Categories {.value-box}

```{r}
# Find the number of unique categories
n_categories &lt;- remote_data %&gt;% distinct(Category) %&gt;% nrow()

# Show the number in a special valueBox (note the {.value-box} CSS class
# above—that applies the CSS class to the HTML output and makes it render
# correctly)
valueBox(value = n_categories, icon = &#34;fas fa-users&#34;)
```

### Total {.value-box}

```{r}
# Get a total of all the counts
total &lt;- sum(remote_data$Count)

# Show the number in a valueBox
valueBox(value = total, icon = &#34;fas fa-cubes&#34;)
```

## Row

###

```{r}
# Make a basic column plot
my_plot &lt;- ggplot(remote_data, aes(x = Category, y = Count)) +
  geom_col(aes(text = Count)) +
  theme_minimal()

# Show the plot with plotly
ggplotly(my_plot, tooltip = &#34;text&#34;)
```
</code></pre></div><h2 id="step-3-make-static-dashboard-dynamic">Step 3: Make static dashboard dynamic</h2>
<p>The only problem with this dashboard is that it&rsquo;s now the same every time you visit it. If you update the data in the Google Sheet, those changes won&rsquo;t be reflected in the dashboard unless you reknit the document.</p>
<p>We can make the dashboard dynamic with some basic shinyfication: we can put the data reading into a function that gets rerun when the page is reloaded, and we can put <code>valueBox()</code> and <code>ggplotly()</code> inside functions that connect them to the more dynamic data. This only requires a few changes—here&rsquo;s the same static dashboard with the Shiny bits added.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">---
title: &#34;Example dashboard with dynamic data from Google&#34;
output:
  flexdashboard::flex_dashboard:
    orientation: rows
runtime: shiny  # Make this use a Shiny backend
---


```{r setup, include=FALSE}
library(tidyverse)
library(googlesheets4)
library(flexdashboard)
library(plotly)

# Make googlesheets4 not try to authenticate, since we&#39;re using a public sheet
sheets_deauth()
```

```{r get-data, message=FALSE, include=FALSE}
# Create a function that reads the data from Google. I&#39;ve seen other examples
# that make this a reactive(), but I don&#39;t really know what that is since I
# rarely use Shiny :shrug:
#
# I&#39;m also not completely sold that this is the right approach, since this feels
# kind of roundabout (create a function, run the function), but it doesn&#39;t work
# if you just do remote_data &lt;- read_sheet(). Also :shrug: for now.
#
# ALSO flexdashboard can use a special global chunk to speed up expensive data
# loading (https://rmarkdown.rstudio.com/flexdashboard/shiny.html#loading_data),
# which I assume also includes loading data remotely from Google, but if you
# name this chunk global, the dynamic data loading stops working. Once again,
# big :shrug:.
load_remote_data &lt;- function() {
  read_sheet(&#34;1RKNn84xVLUanhGyX8DPvDSd8zt4GX_eBmK2ZX2nf0BI&#34;)
}

remote_data &lt;- load_remote_data()
```

## Row

### Categories {.value-box}

```{r}
n_categories &lt;- remote_data %&gt;% distinct(Category) %&gt;% nrow()

# Put valueBox() inside renderValueBox({})
renderValueBox({
  valueBox(value = n_categories, icon = &#34;fas fa-users&#34;)
})
```


### Total {.value-box}

```{r}
total &lt;- sum(remote_data$Count)

# Put valueBox() inside renderValueBox({})
renderValueBox({
  valueBox(value = total, icon = &#34;fas fa-cubes&#34;)
})
```

## Row

###

```{r}
my_plot &lt;- ggplot(remote_data, aes(x = Category, y = Count)) +
  geom_col(aes(text = Count)) +
  theme_minimal()

# Put ggplotly() inside renderPlotly({})
renderPlotly({
  ggplotly(my_plot, tooltip = &#34;text&#34;)
})
```
</code></pre></div><h2 id="step-4-check-the-dynamicness">Step 4: Check the dynamicness</h2>
<p>Edit the Google Sheet, refresh the Shiny app, and you should see everything change in real time!</p>
<h2 id="step-5-publish-somewhere">Step 5: Publish somewhere</h2>
<p>The easiest way to publish the Shiny-based dashboard is to click on the &ldquo;Publish&rdquo; menu in the top right corner of the RStudio preview window and then go through the menus to publish the document at shinyapps.io. <a href="https://andrewheiss.shinyapps.io/dynamic-flexdashboard/">Here&rsquo;s mine.</a></p>
<p><img src="shiny.png" alt="flexdashboard-based Shiny app on shinyapps.io"></p>
<hr>
<p>And that&rsquo;s it! An R Markdown-based flexdashboard that dynamically loads data from a Google Sheet. There are probably better ways to load the data (like somehow using the <code>global</code> chunk?), but this works well enough!</p>
%!s(MISSING)]]></content>
        <category term="rmarkdown" />
        <category term="shiny" />
        <category term="r" />
        <category term="google sheets" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Convert Markdown to rich text (with syntax highlighting!) in any macOS app]]></title>
        <link href="https://www.shagunjhaver.com/blog/2019/10/09/convert-md-rtf-macos-services/" rel="alternate" />
        <published>2019-10-09T00:00:00+00:00</published>
        <updated>2019-10-09T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2019/10/09/convert-md-rtf-macos-services/</id>
        <summary type="html"><![CDATA[Create a macOS Automator service to convert Markdown to rich text from any app in macOS]]></summary>
        <content type="html"><![CDATA[<p>GSU uses Microsoft&rsquo;s Office365 for e-mail, which is fine. My previous institutions—Duke and BYU—both use it too, and it&rsquo;s pretty standard. GSU also enforces 2-factor authentication (2FA) with Duo, which is also fine. Everybody should use some sort of 2FA for all their important accounts!</p>
<p>However, for whatever reason, GSU&rsquo;s version of Duo&rsquo;s 2FA doesn&rsquo;t allow you to generate app-specific passwords for things like e-mail. Instead, any e-mail client I use has to have support for Microsoft&rsquo;s special <a href="https://docs.microsoft.com/en-us/office365/enterprise/office-365-client-support-modern-authentication">Modern Authentication</a> system, which opens up a popup window to handle the 2FA and logging in and everything. The issue with this is that very few e-mail clients support Modern Authentication. In the macOS world, the only program that supports it is Apple Mail. That&rsquo;s all.</p>
<p>This means I&rsquo;ve had to move away from my favorite e-mail client ever: <a href="https://airmailapp.com/">Airmail</a>. Airmail is fast, looks nice, and has great search features. Most importantly for me, though, is that it let you write e-mails in Markdown and then converted the Markdown text to HTML when you clicked send. This is the coolest thing ever if you use Markdown everywhere normally, but it&rsquo;s even better when teaching code-heavy classes. I could respond to student questions by typing stuff like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Oh, I see! You have an error in the 3rd line there. Try changing it to:

```r
ggplot(mtcars, aes(x = wt, y = mpg)) +
  geom_point() +
  theme_bw()
```
</code></pre></div><p>…and Airmail would convert that to nicely formatted HTML. So convenient!</p>
<p>Apple Mail can&rsquo;t do this.</p>
<p>However, through the magic of macOS services, Bash scripting, and AppleScript, I&rsquo;ve found a way to convert Markdown text to richly formatted text, and it&rsquo;s delightful!</p>
<p>Here&rsquo;s how to do it.</p>
<h2 id="macos-services">macOS services</h2>
<p>macOS comes with Automator, a program that lets you create workflows for repeated tasks. One kind of workflow is called a Service (or Quick Action), which can take text (or a file), do stuff to it, and spit out new text. Here&rsquo;s a super basic example that takes selected text, converts it to uppercase with the <code>tr</code> bash command, copies it to the system-wide clipboard using the <code>pbcopy</code> shell script, gets the contents of the clipboard, and then replaces the selected text:</p>
<p><img src="make-uppercase.png" alt="Workflow to make text uppercase"></p>
<p>If you save this as a Quick Action, macOS will put it in a folder named <code>~/Library/Services</code>. Once it&rsquo;s there, it&rsquo;ll be accessible in any program that lets you type, like TextEdit or Mail. Type some text in TextEdit, select it, and go to the TextEdit → Services menu. You should see the &ldquo;Make uppercase&rdquo; service. If you click on it, your text will be converted to uppercase. Magic.</p>
<p><img src="services-menu.png" alt="Services menu in TextEdit"></p>
<p>You can make these easier to run by assigning them keyboard shortcuts. Go to System Preferences → Keyboard → Shortcuts → Services, scroll down the list until you find the &ldquo;Make uppercase&rdquo; service, and add a shortcut for it. Now you can convert text to upper case in any application by selecting it and pressing the keyboard shortcut. Super magic.</p>
<p><img src="add-shortcut.png" alt="Assigning a keyboard shortcut to a service"></p>
<h2 id="markdown-to-rtf-basic">Markdown to RTF, basic</h2>
<p>Rather than converting text to uppercase, we can make a service that pipes Markdown text through <a href="https://pandoc.org">pandoc</a>, converts it to nicely styled RTF, and replaces the selected text with the nicely styled text.</p>
<p>Make a new Quick Action in Automator that looks like this (I named it <strong>md2rtf</strong>):</p>
<p><img src="workflow-simple.png" alt="Simple md2rtf workflow"></p>
<p>The shell script should look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh"><span style="color:#75715e"># !/bin/bash</span>
export LC_CTYPE<span style="color:#f92672">=</span>UTF-8
/usr/local/bin/pandoc -t rtf -s | pbcopy
</code></pre></div><p>This will run your text through pandoc, convert it to RTF, and copy the results to the clipboard. The &ldquo;Get Contents of Clipboard&rdquo; will then grab the formatted text from the clipboard and replace the selected text with it.</p>
<p>Watch it in action here:</p>
<iframe src="https://player.vimeo.com/video/365343785" width="640" height="457" frameborder="0" allow="autoplay; fullscreen" allowfullscreen></iframe>
<p>With this service, I can type in Markdown in Mail, convert it all to rich text, and then send, which is really convenient!</p>
<h2 id="markdown-to-rtf-with-syntax-highlighting">Markdown to RTF, with syntax highlighting</h2>
<p>However, it&rsquo;s not quite perfect. RTF doesn&rsquo;t support syntax highlighting, so if I convert any code, it&rsquo;ll format it in monospaced Courier font (which is good!) that is just plain black (which is less good!). HTML output does support syntax highlighting, though, so it&rsquo;d be nice if there was a way to take Markdown text and replace it with converted HTML.</p>
<p>Just changing the pandoc script to <code>/usr/local/bin/pandoc -t html -s | pbcopy</code> won&rsquo;t work, though. It&rsquo;ll convert the file to HTML, as expected, but it&rsquo;ll replace your text with all the HTML tags instead of rendered HTML, which is less than ideal.</p>
<p><img src="wrong-html.png" alt="Incorrect unrendered raw HTML"></p>
<p>So instead, we need to convert to HTML, somehow render that HTML to rich text, and then replace the text with that instead. Fortunately someone asked a <a href="https://stackoverflow.com/a/11089226">similar question on StackOverflow in 2012</a>, and there&rsquo;s a solution we can adapt! We basically convert HTML to raw hex code, then convert the hex code to HTML with AppleScript, which renders the HTML correctly. It seems (and is) convoluted, but it works!</p>
<p>Change the shell script in the Automator workflow to this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh"><span style="color:#75715e"># !/bin/bash</span>
export LC_CTYPE<span style="color:#f92672">=</span>UTF-8
hex<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>/usr/local/bin/pandoc -t html -s --highlight-style pygments | hexdump -ve <span style="color:#e6db74">&#39;1/1 &#34;%.2x&#34;&#39;</span><span style="color:#e6db74">`</span>
osascript -e <span style="color:#e6db74">&#34;set the clipboard to «data HTML</span><span style="color:#e6db74">${</span>hex<span style="color:#e6db74">}</span><span style="color:#e6db74">»&#34;</span>
</code></pre></div><p><img src="workflow-better.png" alt="Better md2rtf workflow"></p>
<p>This will take the selected text, convert it to HTML, convert the raw HTML to hex codes, convert the hex code to <em>rendered</em> HTML, and replace the selected text with that.</p>
<p>Here&rsquo;s what it looks like:</p>
<iframe src="https://player.vimeo.com/video/365343809" width="640" height="466" frameborder="0" allow="autoplay; fullscreen" allowfullscreen></iframe>
<p>This is almost perfect! The only minor issue is that the non-code text switched from Helvetica (TextEdit&rsquo;s and Apple Mail&rsquo;s default) to Times New Roman, which isn&rsquo;t great. It&rsquo;d be fantastic if the converted HTML used Helvetica instead of Times.</p>
<p>Fortunately there&rsquo;s a way to fix that. The text is getting converted to Times because the rendered HTML defaults to Times in the absence of any CSS styles telling it to be something else. If we can insert some custom CSS into the converted HTML file with pandoc, we should be able to get the correct font.</p>
<p>There&rsquo;s an argument for pandoc that lets you insert files into the head of the HTML, <code>-H</code>. (There&rsquo;s also a <code>--css</code> argument, but <a href="https://devilgate.org/blog/2012/07/02/tip-using-pandoc-to-create-truly-standalone-html-files/">it doesn&rsquo;t play well with standalone HTML files</a>, so it&rsquo;s easier to insert stuff directly into the converted HTML). Create an HTML file somewhere on your computer with this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">style</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text/css&#34;</span>&gt;
<span style="color:#f92672">body</span> {
    <span style="color:#66d9ef">font-family</span>: Helvetica, <span style="color:#66d9ef">sans-serif</span>;
}
&lt;/<span style="color:#f92672">style</span>&gt;
</code></pre></div><p>(This isn&rsquo;t raw CSS—it&rsquo;s CSS wrapped in HTML. We have to do that because pandoc will take that whole file and insert it as HTML in the converted document, so we have to treat it as HTML.)</p>
<p>Change your Automator workflow one last time so that it injects the custom CSS:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh"><span style="color:#75715e"># !/bin/bash</span>
export LC_CTYPE<span style="color:#f92672">=</span>UTF-8
hex<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>/usr/local/bin/pandoc -t html -s --highlight-style pygments -H ~/path/to/your/css/thing/md2rtf_styles.html | hexdump -ve <span style="color:#e6db74">&#39;1/1 &#34;%.2x&#34;&#39;</span><span style="color:#e6db74">`</span>
osascript -e <span style="color:#e6db74">&#34;set the clipboard to «data HTML</span><span style="color:#e6db74">${</span>hex<span style="color:#e6db74">}</span><span style="color:#e6db74">»&#34;</span>
</code></pre></div><p><img src="workflow-best.png" alt="Best md2rtf workflow"></p>
<p>With that addition, the workflow will now take your selected text, convert it to HTML that is styled with Helvetica, convert <em>that</em> to hex code, convert <em>that</em> to rendered HTML, and finally replace your text with impeccable style:</p>
<iframe src="https://player.vimeo.com/video/365343828" width="640" height="471" frameborder="0" allow="autoplay; fullscreen" allowfullscreen></iframe>
<p>I&rsquo;ve added <strong>⌘⌥^⇧P</strong> as the shortcut for this (so I essentially mash down the whole bottom left corner of my keyboard and hit P), and it makes using Apple Mail with Markdown and code quite convenient!</p>
%!s(MISSING)]]></content>
        <category term="pandoc" />
        <category term="macos" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Chidi's budget and utility: doing algebra and calculus with R and yacas]]></title>
        <link href="https://www.shagunjhaver.com/blog/2019/02/16/algebra-calculus-r-yacas/" rel="alternate" />
        <published>2019-02-16T00:00:00+00:00</published>
        <updated>2019-02-16T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2019/02/16/algebra-calculus-r-yacas/</id>
        <summary type="html"><![CDATA[Use algebra and calculus with R and yacas to find Chidi's optimal level of pizza and frozen yogurt consumption given his budget and utility function.]]></summary>
        <content type="html"><![CDATA[<p><span class="small">(<a href="https://github.com/andrewheiss/algebra-calculus-r-yacas">See this notebook on GitHub</a>)</span></p>
<hr>
<p>A year ago, <a href="blog/2018/02/15/derivatives-r-fun/">I wrote about how to use R to solve a typical microeconomics problem</a>: finding the optimal price and quantity of some product given its demand and cost. Doing this involves setting the first derivatives of two functions equal to each other and using algebra to find where they cross. I showed how to use neat functions like <code>Deriv::Deriv()</code> and <code>splinefun()</code> and make fancy plots showing supply and demand and it’s pretty cool. I wrote it mostly because I was teaching an introductory microeconomics course and wanted an easy, generalizable, and manual math-less way to make these plots for my students’ exercises and problem sets, and it works great.</p>
<p>I’m teaching microeconomics again this year and decided to tackle a trickier problem that involves curvier curves, more variables, and more math. And the results are even cooler and open the door for more doing math and symbolic algebra directly with R.</p>
<p>Another typical microeconomics problem is to find the optimal level of consumption of two goods, given their prices, your budget, and your preferences for those goods. It involves (1) constructing a budget line that shows the feasible level of consumption, (2) drawing indifference curves that show the combination of goods that give you the same amount of happiness, or utility, or utils, and (3) finding which indifference curve is tangent line and where that happens. The point where the budget matches the indifference curve is the optimal utility maximizing point. The more mathy approach is that we need to find where the slope of the budget line, or <em>marginal rate of transformation</em> (MRT) is equal to the slope of the indifference curve, or <em>marginal rate of substitution</em> (MRS).</p>
<p>For this situation, imagine a mild-mannered professor named <a href="https://thegoodplace.fandom.com/wiki/Chidi_Anagonye">Chidi Anagonye</a> who is crippled with decision anxiety (he is also dead). He has to choose the best combination of pizza and frozen yogurt, but doesn’t know what to do! Here’s the information he has:</p>
<ul>
<li>He has a budget of $45 and must spend it all.</li>
<li>Slices of Hawaiian pizza cost $3. We’ll abbreviate this as \(x\).</li>
<li>Bowls of frozen yogurt cost $1.50. We’ll abbreviate this as \(y\).</li>
<li>The happiness Chidi gets from eating pizza and frozen yogurt can be modeled with this utility function:</li>
</ul>
<p>$$
U(x, y) = x^2\ 0.25y
$$</p>
<p>Armed with only this information, we can find the optimal number of pizza slices and bowls of yogurt. So buckle up, <a href="https://www.youtube.com/watch?v=2c-AawAKZ14">my little chili babies</a>. Let’s do this with R!</p>
<ul>
<li><a href="#step-0-a-brief-note-about-math-in-r">Step 0: A brief note about math in R</a></li>
<li><a href="#step-1-plot-a-budget-line">Step 1: Plot a budget line</a></li>
<li><a href="#step-2-plot-utility-and-indifference-curves">Step 2: Plot utility and indifference curves</a></li>
<li><a href="#step-3-find-where-the-indifference-curve-and-budget-line-are-tangent">Step 3: Find where the indifference curve and budget line are tangent</a></li>
<li><a href="#tldr-complete-example">tl;dr complete example</a></li>
</ul>
<h2 id="step-0-a-brief-note-about-math-in-r">Step 0: A brief note about math in R</h2>
<p>R is phenomenal software for statistics and graphics and all sorts of other things, but it was not invented to do higher level algebra and calculus. Expensive programs like <a href="https://en.wikipedia.org/wiki/MATLAB">MATLAB</a> and <a href="https://en.wikipedia.org/wiki/Wolfram_Mathematica">Mathematica</a> were invented for this kind of complicated numerical computing (and Wolfram Alpha is really neat! Try searching for <a href="https://www.wolframalpha.com/input/?i=derive+3x%5E2">“derive 3x^2”</a> there and see what happens!). There are also a bunch of open source <a href="https://en.wikipedia.org/wiki/Computer_algebra_system">computer algebra systems</a> (CAS) that let you do mathy things with formulas, like <a href="https://en.wikipedia.org/wiki/SageMath">SageMath</a>, <a href="https://en.wikipedia.org/wiki/SymPy">SymPy</a>, and <a href="http://www.yacas.org/">Yacas</a>.</p>
<p>Many of these CAS libraries have interfaces with R, like <a href="https://cran.r-project.org/web/packages/rSymPy/index.html"><strong>rSymPy</strong></a> and <a href="https://cran.r-project.org/web/packages/Ryacas/index.html"><strong>Ryacas</strong></a>. However, they’re fairly undocumented and <strong>rSymPy</strong> hasn’t been updated since 2010. Additionally, <strong>rSymPy</strong> requires <strong>rJava</strong> (for whatever reason), which is a gigantic headache to install. <strong>Ryacas</strong>, on the other hand, doesn’t have a ton of dependencies, is actively maintained, and is <em>slightly</em> better documented.</p>
<p>There are like <a href="https://cran.r-project.org/web/packages/Ryacas/vignettes/getting-started.html">a billion examples of how to use <strong>Ryacas</strong> here</a> or <a href="https://stackoverflow.com/questions/47474121/how-to-rearrange-the-complex-algebraic-equation-in-r">on StackOverflow</a>, but here are just a few tiny examples to show what it can do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">library</span>(Ryacas)

<span style="color:#75715e"># Define some variables to work with</span>
x <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">Sym</span>(<span style="color:#e6db74">&#34;x&#34;</span>)
y <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">Sym</span>(<span style="color:#e6db74">&#34;y&#34;</span>)

<span style="color:#75715e"># Write a formula as a string or R expression</span>
<span style="color:#a6e22e">yacas</span>(<span style="color:#e6db74">&#34;x^2 + 5&#34;</span>)
<span style="color:#75715e">## expression(x^2 + 5)</span>

<span style="color:#a6e22e">yacas</span>(x^2 <span style="color:#f92672">+</span> <span style="color:#ae81ff">5</span>)
<span style="color:#75715e">## expression(x^2 + 5)</span>

<span style="color:#75715e"># Find the derivative of a complicated formula</span>
<span style="color:#a6e22e">yacas</span>(<span style="color:#a6e22e">deriv</span>(x^2 <span style="color:#f92672">*</span> (<span style="color:#ae81ff">5</span><span style="color:#f92672">*</span>y)^3), x)
<span style="color:#75715e">## expression(2 * (x * (5 * y)^3))</span>

<span style="color:#75715e"># Find the derivative of an R function (!!!)</span>
neat_function <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">function</span>(x, y) x^2 <span style="color:#f92672">*</span> (<span style="color:#ae81ff">5</span><span style="color:#f92672">*</span>y)^3
<span style="color:#a6e22e">yacas</span>(<span style="color:#a6e22e">deriv</span>(<span style="color:#a6e22e">neat_function</span>(x, y), x))  <span style="color:#75715e"># d/dx</span>
<span style="color:#75715e">## expression(2 * (x * (5 * y)^3))</span>

<span style="color:#a6e22e">yacas</span>(<span style="color:#a6e22e">deriv</span>(<span style="color:#a6e22e">neat_function</span>(x, y), y))  <span style="color:#75715e"># d/dy</span>
<span style="color:#75715e">## expression(x^2 * (15 * (5 * y)^2))</span>

<span style="color:#75715e"># Solve a complicated formula</span>
<span style="color:#a6e22e">Solve</span>(x^2 <span style="color:#f92672">+</span> (<span style="color:#ae81ff">5</span><span style="color:#f92672">*</span>y) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>, y)
<span style="color:#75715e">## Yacas vector:</span>
<span style="color:#75715e">## [1] y == -(x^2/5)</span>

<span style="color:#75715e"># Write these yacas things as LaTeX</span>
<span style="color:#a6e22e">cat</span>(<span style="color:#a6e22e">TeXForm</span>(<span style="color:#a6e22e">yacas</span>(<span style="color:#a6e22e">neat_function</span>(x, y))))
<span style="color:#75715e">## x ^{2} \left( 5 y\right)  ^{3}</span>
</code></pre></div><p>What’s really neat about <strong>Ryacas</strong> is that because it returns expressions, you can use them as pseudo functions within R using <code>Eval()</code>. You can even build wrapper functions with <code>Eval()</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">deriv_neat_function <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">function</span>(my_y, my_x) {
  derived <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">yacas</span>(<span style="color:#a6e22e">deriv</span>(<span style="color:#a6e22e">neat_function</span>(x, y), x))
  <span style="color:#a6e22e">Eval</span>(derived, <span style="color:#a6e22e">list</span>(x <span style="color:#f92672">=</span> my_x, y <span style="color:#f92672">=</span> my_y))
}

<span style="color:#a6e22e">deriv_neat_function</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>)
<span style="color:#75715e">## [1] 500</span>
</code></pre></div><p>Again, this is just scratching the surface of what <strong>Ryacas</strong> can do. There are also more powerful CAS libraries, like Python’s <a href="https://www.sympy.org/en/index.html">SymPy</a>, though it doesn’t currently have a nice interface with R (but you could theoretically use <a href="https://rstudio.github.io/reticulate/"><strong>reticulate</strong></a> to feed R objects directly to Python, do mathy things with them, and return them to R).</p>
<h2 id="step-1-plot-a-budget-line">Step 1: Plot a budget line</h2>
<p>With that mathy stuff out of the way, we can finally start figuring out Chidi’s optimal level of consumption. First, we’ll load our libraries, create a custom ggplot theme, and set up some variables to work with <strong>Ryacas</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">library</span>(tidyverse)
<span style="color:#a6e22e">library</span>(Ryacas)

<span style="color:#75715e"># Make a few minor adjustments to theme_classic()</span>
<span style="color:#75715e"># I&#39;m using Encode Sans Condensed: https://fonts.google.com/specimen/Encode+Sans+Condensed</span>
theme_econ <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">function</span>() {
  <span style="color:#a6e22e">theme_classic</span>(base_family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Encode Sans Condensed&#34;</span>) <span style="color:#f92672">+</span> 
    <span style="color:#a6e22e">theme</span>(axis.title.x <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_text</span>(margin <span style="color:#f92672">=</span> <span style="color:#a6e22e">margin</span>(t <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>)),
          axis.title.y <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_text</span>(margin <span style="color:#f92672">=</span> <span style="color:#a6e22e">margin</span>(r <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>)),
          axis.title <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_text</span>(family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Encode Sans Condensed Medium&#34;</span>))
}

<span style="color:#75715e"># Make all labels automatically use Encode Sans</span>
<span style="color:#a6e22e">update_geom_defaults</span>(<span style="color:#e6db74">&#34;label&#34;</span>, <span style="color:#a6e22e">list</span>(family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Encode Sans Condensed Bold&#34;</span>))

<span style="color:#75715e"># Yacas variables</span>
x <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">Sym</span>(<span style="color:#e6db74">&#34;x&#34;</span>)
y <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">Sym</span>(<span style="color:#e6db74">&#34;y&#34;</span>)
U <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">Sym</span>(<span style="color:#e6db74">&#34;U&#34;</span>)
</code></pre></div><p>To build the budget line, we need to figure out how many pizzas and yogurts Chidi would buy if he spent all his money on each item. We can do this with some simple math:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">total_budget <span style="color:#f92672">&lt;-</span> <span style="color:#ae81ff">45</span>
price_x <span style="color:#f92672">&lt;-</span> <span style="color:#ae81ff">3</span>
price_y <span style="color:#f92672">&lt;-</span> <span style="color:#ae81ff">1.5</span>

n_pizza <span style="color:#f92672">&lt;-</span> total_budget <span style="color:#f92672">/</span> price_x
n_pizza
<span style="color:#75715e">## [1] 15</span>

n_yogurt <span style="color:#f92672">&lt;-</span> total_budget <span style="color:#f92672">/</span> price_y
n_yogurt
<span style="color:#75715e">## [1] 30</span>

slope <span style="color:#f92672">&lt;-</span> <span style="color:#f92672">-</span>n_yogurt <span style="color:#f92672">/</span> n_pizza
slope
<span style="color:#75715e">## [1] -2</span>
</code></pre></div><p>That’s 15 pizzas or 30 yogurts. We can use this information to build a formula. Since we can draw a line using the $y = mx + b$ form, we need to figure out the slope ($m$) and y-intercept ($b$). The y-intercept here is 30, or the number of yogurts he’d eat if x is 0, and the slope is the number of yogurts divided by the number of pizzas, or -2. That means the budget line is:</p>
<p>$$
y = -2x + 30
$$</p>
<p>We’ll write this as an R function, and then we can use <code>stat_function()</code> in <strong>ggplot2</strong> to plot it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">budget <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">function</span>(x) (slope <span style="color:#f92672">*</span> x) <span style="color:#f92672">+</span> n_yogurt

<span style="color:#a6e22e">ggplot</span>() <span style="color:#f92672">+</span> 
  <span style="color:#75715e"># Draw the line</span>
  <span style="color:#a6e22e">stat_function</span>(data <span style="color:#f92672">=</span> <span style="color:#a6e22e">tibble</span>(x <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">:</span><span style="color:#ae81ff">15</span>), <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x),
                fun <span style="color:#f92672">=</span> budget, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#638ccc&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.5</span>) <span style="color:#f92672">+</span>
  <span style="color:#75715e"># Add a label</span>
  <span style="color:#a6e22e">annotate</span>(geom <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;label&#34;</span>, x <span style="color:#f92672">=</span> <span style="color:#ae81ff">2.5</span>, y <span style="color:#f92672">=</span> <span style="color:#a6e22e">budget</span>(<span style="color:#ae81ff">2.5</span>), 
           label <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Budget&#34;</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#638ccc&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Slices of pizza&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Bowls of frozen yogurt&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#75715e"># Make the axes go all the way to zero</span>
  <span style="color:#a6e22e">scale_x_continuous</span>(expand <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>), breaks <span style="color:#f92672">=</span> <span style="color:#a6e22e">seq</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">5</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_y_continuous</span>(expand <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>), breaks <span style="color:#f92672">=</span> <span style="color:#a6e22e">seq</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">30</span>, <span style="color:#ae81ff">10</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">coord_cartesian</span>(xlim <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">16</span>), ylim <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">32</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_econ</span>()
</code></pre></div><figure><img src="plot-budget-1.png"
         alt="Budget line"/>
</figure>

<p>Any point along that line will use up Chidi’s entire budget. He can’t afford any point above the line, and he’s not efficiently spending his money if he chooses any point below the line (like 5 pizzas and 10 yogurts, for instance).</p>
<h2 id="step-2-plot-utility-and-indifference-curves">Step 2: Plot utility and indifference curves</h2>
<p>Like we said at the beginning, Chidi gets utility (or happiness points) from his consumption of pizza and yogurt, based on this formula:</p>
<p>$$
U(x, y) = x^2\ 0.25y
$$</p>
<p>We can write this as an R function and use it to figure out how happy he’d be with any given amount of pizza and yogurt:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">utility_u <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">function</span>(x, y) x^2 <span style="color:#f92672">*</span> (<span style="color:#ae81ff">0.25</span> <span style="color:#f92672">*</span> y)

<span style="color:#75715e"># 5 pizzas, 5 yogurt</span>
<span style="color:#a6e22e">utility_u</span>(<span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">5</span>)
<span style="color:#75715e">## [1] 31.25</span>
</code></pre></div><p>He gets 31.25 happiness points from 5 slices of pizza and 5 bowls of frozen yogurt. Neat.</p>
<p>If we rearrange this utility formula to be in terms of $y$, we can plot the function to show the combinations of pizza and yogurt that would provide the same level of happiness. Ordinarily, you have to do this by hand with algebra, but the tediousness of that is <a href="https://twitter.com/andrewheiss/status/1096537965784748032">what led me down this mathy rabbit hole</a>. We can use <strong>Ryacas</strong> to rearrange this for us! With the <code>Solve()</code> function, we can set Chidi’s utility function to $U$ and solve for $y$ and yacas will rearrange everything for us:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">utility_solved <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">Solve</span>(<span style="color:#a6e22e">utility_u</span>(x, y) <span style="color:#f92672">==</span> U, y)
utility_solved
<span style="color:#75715e">## Yacas vector:</span>
<span style="color:#75715e">## [1] y == U/(0.25 * x^2)</span>
</code></pre></div><p>$$
\left( y = \frac{U}{0.25 x ^{2}} \right)
$$</p>
<p>And with <code>Eval()</code>, we can use this as a function and figure out values of $y$ given different $x$s and $U$s. It’s even vectorized so you can feed it lots of numbers:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">Eval</span>(utility_solved, <span style="color:#a6e22e">list</span>(x <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>, U <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>))
<span style="color:#75715e">## [1] &#34;( y == 1.6 )&#34;</span>

<span style="color:#75715e"># It&#39;s already vectorized</span>
<span style="color:#a6e22e">Eval</span>(utility_solved, <span style="color:#a6e22e">list</span>(x <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#ae81ff">5</span>, U <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>))
<span style="color:#75715e">## [1] &#34;( y == 40 )&#34;               &#34;( y == 10 )&#34;              </span>
<span style="color:#75715e">## [3] &#34;( y == 4.44444444444444 )&#34; &#34;( y == 2.5 )&#34;             </span>
<span style="color:#75715e">## [5] &#34;( y == 1.6 )&#34;</span>
</code></pre></div><p>We can make this more general by wrapping a function around it, which lets us pass any $x$ or $U$ we want. More importantly, we convert the text that <code>Eval()</code> returns into a number with <code>str_extract()</code>, which uses a regular expression to pull out the number in the string (including decimals and negative signs).</p>
<p>Note how the arguments for the function aren’t just <code>x</code> and <code>U</code>, but <code>my_x</code> and <code>my_u</code> instead. That’s because of environment issues—using the same <code>x</code> and <code>U</code> variable names causes conflicts, since it’s not clear if the arguments or the global <code>x</code> and <code>U</code> we set earlier get passed to <code>Solve()</code> or <code>Eval()</code>. To avoid this namespace clash, we rename the arguments.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">utility_y <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">function</span>(my_x, my_U) {
  solved <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">Solve</span>(<span style="color:#a6e22e">utility_u</span>(x, y) <span style="color:#f92672">==</span> U, y)
  solution <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">Eval</span>(solved, <span style="color:#a6e22e">list</span>(x <span style="color:#f92672">=</span> my_x, U <span style="color:#f92672">=</span> my_U))
  <span style="color:#75715e"># Regex incantation to extract numbers</span>
  <span style="color:#a6e22e">as.numeric</span>(<span style="color:#a6e22e">str_extract</span>(solution, <span style="color:#e6db74">&#34;-?[0-9]\\d*(\\.\\d+)?&#34;</span>))
}

<span style="color:#75715e"># We could avoid regexes by digging into the deeply nested list that yacas()</span>
<span style="color:#75715e"># returns, but doing that doesn&#39;t handle negatives very well</span>
<span style="color:#75715e"># See https://stackoverflow.com/q/8480778/120898</span>
<span style="color:#75715e"># unlist(as.list(yacas(solution)$text[[1]][[3]]))</span>

<span style="color:#a6e22e">utility_y</span>(<span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">10</span>)
<span style="color:#75715e">## [1] 1.6</span>

<span style="color:#75715e"># Still vectorized</span>
<span style="color:#a6e22e">utility_y</span>(<span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">10</span>)
<span style="color:#75715e">## [1] 40.000000 10.000000  4.444444  2.500000  1.600000</span>
</code></pre></div><p>Now that we’ve created this y-based function, we can plot it with <code>stat_function()</code>. Here are a few different indifference curves for different levels of utility:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">ggplot</span>() <span style="color:#f92672">+</span> 
  <span style="color:#75715e"># Budget line</span>
  <span style="color:#a6e22e">stat_function</span>(data <span style="color:#f92672">=</span> <span style="color:#a6e22e">tibble</span>(x <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">:</span><span style="color:#ae81ff">15</span>), <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x),
                fun <span style="color:#f92672">=</span> budget, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#638ccc&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.5</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">annotate</span>(geom <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;label&#34;</span>, x <span style="color:#f92672">=</span> <span style="color:#ae81ff">2.5</span>, y <span style="color:#f92672">=</span> <span style="color:#a6e22e">budget</span>(<span style="color:#ae81ff">2.5</span>), 
           label <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Budget&#34;</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#638ccc&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#75715e"># U = 10</span>
  <span style="color:#a6e22e">stat_function</span>(data <span style="color:#f92672">=</span> <span style="color:#a6e22e">tibble</span>(x <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#ae81ff">15</span>), <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x),
                fun <span style="color:#f92672">=</span> utility_y, args <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(my_U <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>),
                color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#ab62c0&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.5</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">annotate</span>(geom <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;label&#34;</span>, x <span style="color:#f92672">=</span> <span style="color:#ae81ff">2.5</span>, y <span style="color:#f92672">=</span> <span style="color:#a6e22e">utility_y</span>(<span style="color:#ae81ff">2.5</span>, <span style="color:#ae81ff">10</span>), 
           label <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;U = 10&#34;</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#ab62c0&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#75715e"># U = 100</span>
  <span style="color:#a6e22e">stat_function</span>(data <span style="color:#f92672">=</span> <span style="color:#a6e22e">tibble</span>(x <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#ae81ff">15</span>), <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x),
                fun <span style="color:#f92672">=</span> utility_y, args <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(my_U <span style="color:#f92672">=</span> <span style="color:#ae81ff">100</span>),
                color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#ca5670&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.5</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">annotate</span>(geom <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;label&#34;</span>, x <span style="color:#f92672">=</span> <span style="color:#ae81ff">7</span>, y <span style="color:#f92672">=</span> <span style="color:#a6e22e">utility_y</span>(<span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">100</span>), 
           label <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;U = 100&#34;</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#ca5670&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#75715e"># U = 500</span>
  <span style="color:#a6e22e">stat_function</span>(data <span style="color:#f92672">=</span> <span style="color:#a6e22e">tibble</span>(x <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#ae81ff">15</span>), <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x),
                fun <span style="color:#f92672">=</span> utility_y, args <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(my_U <span style="color:#f92672">=</span> <span style="color:#ae81ff">500</span>),
                color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#c57c3c&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.5</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">annotate</span>(geom <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;label&#34;</span>, x <span style="color:#f92672">=</span> <span style="color:#ae81ff">12.5</span>, y <span style="color:#f92672">=</span> <span style="color:#a6e22e">utility_y</span>(<span style="color:#ae81ff">12.5</span>, <span style="color:#ae81ff">500</span>), 
           label <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;U = 500&#34;</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#c57c3c&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Slices of pizza&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Bowls of frozen yogurt&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_x_continuous</span>(expand <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>), breaks <span style="color:#f92672">=</span> <span style="color:#a6e22e">seq</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">5</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_y_continuous</span>(expand <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>), breaks <span style="color:#f92672">=</span> <span style="color:#a6e22e">seq</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">30</span>, <span style="color:#ae81ff">10</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">coord_cartesian</span>(xlim <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">16</span>), ylim <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">32</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_econ</span>()
</code></pre></div><figure><img src="plot-indifference-1.png"
         alt="Three indifference curves"/>
</figure>

<p>Every combination of pizza and yogurt on these indifference curves generates the same level of utility. Cool cool cool.</p>
<h2 id="step-3-find-where-the-indifference-curve-and-budget-line-are-tangent">Step 3: Find where the indifference curve and budget line are tangent</h2>
<p>However, we still don’t know what the best level of consumption is. To find that, we need to figure out the point where an indifference curve is tangent to the budget line. Based on the graph, it’s a combination of $x$ and $y$ that yields somewhere between 100 and 500 utils, but that’s a wide range. The mathy way to find this point is to set the slope of the budget line (the marginal rate of transformation) equal to the slope of the indifference curve (the marginal rate of substitution) and solve for $x$ and $y$. In economics, “marginal” means slope, or first derivative, so we need to differentiate our formulas.</p>
<p>In addition to rearranging formulas, we can use <strong>Ryacas</strong> to derive functions. <a href="https://www.andrewheiss.com/blog/2018/02/15/derivatives-r-fun/">Last year I showed how to use the <strong>Deriv</strong> package to calculate the derivative of a function in R</a>. Those formulas only had one variable to worry about. This utility function has two, which means we need to take the partial derivative with respect to $x$ ($\partial u / \partial x$) and divide it by the partial derivative with respect to $y$ ($\partial u / \partial y$).</p>
<p>From my minimal tinkering, neither the base R derivative functions nor <code>Deriv::Deriv()</code> can handle partial derivatives well, but <code>Ryacas::deriv()</code> does. Also, since it returns expressions, we can do math (like division!) with the partial derivatives. Here I find each of the partial derivatives and then use <code>Simplify()</code> to clean up their ratio:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Partial derivative with respect to x</span>
mu_x <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">deriv</span>(<span style="color:#a6e22e">utility_u</span>(x, y), x)
mu_x
<span style="color:#75715e">## expression(2 * (x * (0.25 * y)))</span>
</code></pre></div><p>$$
\partial u / \partial x = 2 x 0.25 y
$$</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Partial derivative with respect to y</span>
mu_y <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">deriv</span>(<span style="color:#a6e22e">utility_u</span>(x, y), y)
mu_y
<span style="color:#75715e">## expression(0.25 * x^2)</span>
</code></pre></div><p>$$
\partial u / \partial y = 0.25 x ^{2}
$$</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Cleaned up version</span>
<span style="color:#a6e22e">Simplify</span>(mu_x <span style="color:#f92672">/</span> mu_y)
<span style="color:#75715e">## expression(0.5 * y/(0.25 * x))</span>
</code></pre></div><p>$$
\frac{\partial u / \partial x}{\partial u / \partial y} = \frac{2 x 0.25 y}{0.25 x ^{2}} = \frac{0.5 y}{0.25 x}
$$</p>
<p>This marginal rate of substitution is the slope of the indifference curve at any combination of $x$ and $y$, but it doesn’t incorporate any information about the prices. Before we can find where happiness meets the budget, we have to incorporate prices into the marginal utility, or marginal rate of substitution. Because of calculus proofs that are beyond my skill, the marginal rate of substitution can also be written as a ratio of prices, or $\frac{\text{Price}_x}{\text{Price}_y}$. If we set marginal utility equal to this price ratio and rearrange the formula to be in terms of y, we’ll have the official price-attuned marginal rate of substitution (or slope of the indifference curve).</p>
<p>To do this with R, we can use <code>Solve()</code> again, only this time we can set the equation equal to the price ratio:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># For unknown reasons, yacas works better with (3 / 1.5) instead of 2, so we</span>
<span style="color:#75715e"># build the string with price_x and price_y instead of price_x/price_y</span>
<span style="color:#a6e22e">Solve</span>(<span style="color:#a6e22e">paste</span>(<span style="color:#a6e22e">Simplify</span>(mu_x <span style="color:#f92672">/</span> mu_y), <span style="color:#e6db74">&#34;==&#34;</span>, price_x, <span style="color:#e6db74">&#34;/&#34;</span>, price_y), y)
<span style="color:#75715e">## Yacas vector:</span>
<span style="color:#75715e">## [1] y == -(-0.75 * x/0.75)</span>
</code></pre></div><p>$$
\left( y =  - \frac{-0.75 x}{0.75} \right)
$$</p>
<p>As before, we can turn this solved formula into a function so that we can find the slope of the indifference curve at any x.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">marginal_utility <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">function</span>(my_x) {
  mux_muy <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">Simplify</span>(<span style="color:#a6e22e">deriv</span>(<span style="color:#a6e22e">utility_u</span>(x, y), x) <span style="color:#f92672">/</span> <span style="color:#a6e22e">deriv</span>(<span style="color:#a6e22e">utility_u</span>(x, y), y))
  mux_muy_price <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">Solve</span>(<span style="color:#a6e22e">paste</span>(mux_muy, <span style="color:#e6db74">&#34;==&#34;</span>, price_x, <span style="color:#e6db74">&#34;/&#34;</span>, price_y), y)
  solution <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">Eval</span>(mux_muy_price, <span style="color:#a6e22e">list</span>(x <span style="color:#f92672">=</span> my_x))
  <span style="color:#a6e22e">as.numeric</span>(<span style="color:#a6e22e">str_extract</span>(solution, <span style="color:#e6db74">&#34;-?[0-9]\\d*(\\.\\d+)?&#34;</span>))
}
</code></pre></div><p>If we set this formula equal to the budget line and solve for x and y individually, we’ll find the optimal mix of pizza and yogurt. Instead of doing this by hand with algebra, we can use the built-in <code>uniroot()</code> function to see where the two functions are the same. We have to feed <code>uniroot()</code> a range to look in—here I chose 0–100. There’s probably a way to do this with <strong>Ryacas</strong>, but I didn’t want to figure it out. And besides, I already made the <code>marginal_utility()</code> function be an official R function, so I figured I could use it like one here.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Find best x</span>
optimal_x <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">uniroot</span>(<span style="color:#a6e22e">function</span>(x) <span style="color:#a6e22e">budget</span>(x) <span style="color:#f92672">-</span> <span style="color:#a6e22e">marginal_utility</span>(x), <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">100</span>))<span style="color:#f92672">$</span>root
optimal_x
<span style="color:#75715e">## [1] 10</span>

<span style="color:#75715e"># Plug best x into the budget function to find best y</span>
optimal_y <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">budget</span>(optimal_x)  <span style="color:#75715e"># or marginal_utility(optimal_x)</span>
optimal_y
<span style="color:#75715e">## [1] 10</span>

<span style="color:#75715e"># Plug optimal x and y into utility function to find maximum utils given the budget</span>
max_utility <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">utility_u</span>(optimal_x, optimal_y)
max_utility
<span style="color:#75715e">## [1] 250</span>
</code></pre></div><p>There! We have an answer. The optimal level of consumption is 10 slices of pizza and 10 bowls of frozen yogurt, which yields 250 utils of happiness.</p>
<p>With these final numbers and derived functions, we can combine all this information into a final plot, which shows that the indifference curve for 250 utils is exactly tangent to the budget line at (10, 10). MAGIC.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">ggplot</span>() <span style="color:#f92672">+</span> 
  <span style="color:#75715e"># Budget line</span>
  <span style="color:#a6e22e">stat_function</span>(data <span style="color:#f92672">=</span> <span style="color:#a6e22e">tibble</span>(x <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">:</span><span style="color:#ae81ff">15</span>), <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x),
                fun <span style="color:#f92672">=</span> budget, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#638ccc&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.5</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">annotate</span>(geom <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;label&#34;</span>, x <span style="color:#f92672">=</span> <span style="color:#ae81ff">2.5</span>, y <span style="color:#f92672">=</span> <span style="color:#a6e22e">budget</span>(<span style="color:#ae81ff">2.5</span>), 
           label <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Budget&#34;</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#638ccc&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#75715e"># Best indifference curve</span>
  <span style="color:#a6e22e">stat_function</span>(data <span style="color:#f92672">=</span> <span style="color:#a6e22e">tibble</span>(x <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#ae81ff">15</span>), <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x),
                fun <span style="color:#f92672">=</span> utility_y, args <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(my_U <span style="color:#f92672">=</span> max_utility),
                color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#ca5670&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.5</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">annotate</span>(geom <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;label&#34;</span>, x <span style="color:#f92672">=</span> <span style="color:#ae81ff">7</span>, y <span style="color:#f92672">=</span> <span style="color:#a6e22e">utility_y</span>(<span style="color:#ae81ff">7</span>, max_utility), 
           label <span style="color:#f92672">=</span> <span style="color:#a6e22e">paste0</span>(<span style="color:#e6db74">&#34;U = &#34;</span>, max_utility), color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#ca5670&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#75715e"># Dotted lines to show x and y</span>
  <span style="color:#a6e22e">annotate</span>(geom <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;segment&#34;</span>, x <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, y <span style="color:#f92672">=</span> optimal_y, xend <span style="color:#f92672">=</span> optimal_x, yend <span style="color:#f92672">=</span> optimal_y,
           linetype <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;dashed&#34;</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;grey50&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.5</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">annotate</span>(geom <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;segment&#34;</span>, x <span style="color:#f92672">=</span> optimal_x, y <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, xend <span style="color:#f92672">=</span> optimal_x, yend <span style="color:#f92672">=</span> optimal_y,
           linetype <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;dashed&#34;</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;grey50&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.5</span>) <span style="color:#f92672">+</span>
  <span style="color:#75715e"># Dot at optimal point</span>
  <span style="color:#a6e22e">annotate</span>(geom <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;point&#34;</span>, x <span style="color:#f92672">=</span> optimal_x, y <span style="color:#f92672">=</span> optimal_y, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Slices of pizza&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Bowls of frozen yogurt&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_x_continuous</span>(expand <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>), breaks <span style="color:#f92672">=</span> <span style="color:#a6e22e">seq</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">5</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_y_continuous</span>(expand <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>), breaks <span style="color:#f92672">=</span> <span style="color:#a6e22e">seq</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">30</span>, <span style="color:#ae81ff">10</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">coord_cartesian</span>(xlim <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">16</span>), ylim <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">32</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_econ</span>()
</code></pre></div><figure><img src="plot-everything-1.png"
         alt="Utility, budget, and optimal point"/>
</figure>

<p>And there we go. <a href="https://www.youtube.com/watch?v=2c-AawAKZ14&amp;feature=youtu.be&amp;t=128">You all get As. Or Fs. And there is no test. And you all failed it. And you all got As. Who cares. Goodbye.</a></p>
<h2 id="tldr-complete-example">tl;dr complete example</h2>
<p>That was a lot of annotated code. Here’s a complete example without all the explanation.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">library</span>(tidyverse)
<span style="color:#a6e22e">library</span>(Ryacas)

<span style="color:#a6e22e">update_geom_defaults</span>(<span style="color:#e6db74">&#34;label&#34;</span>, <span style="color:#a6e22e">list</span>(family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Encode Sans Condensed Bold&#34;</span>))

<span style="color:#75715e"># Define some variables to work with</span>
x <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">Sym</span>(<span style="color:#e6db74">&#34;x&#34;</span>)
y <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">Sym</span>(<span style="color:#e6db74">&#34;y&#34;</span>)
U <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">Sym</span>(<span style="color:#e6db74">&#34;U&#34;</span>)


<span style="color:#75715e"># Prices and budget -------------------------------------------------------</span>
total_budget <span style="color:#f92672">&lt;-</span> <span style="color:#ae81ff">45</span>
price_x <span style="color:#f92672">&lt;-</span> <span style="color:#ae81ff">3</span>
price_y <span style="color:#f92672">&lt;-</span> <span style="color:#ae81ff">1.5</span>

<span style="color:#75715e"># Build budget line</span>
n_pizza <span style="color:#f92672">&lt;-</span> total_budget <span style="color:#f92672">/</span> price_x
n_yogurt <span style="color:#f92672">&lt;-</span> total_budget <span style="color:#f92672">/</span> price_y
slope <span style="color:#f92672">&lt;-</span> <span style="color:#f92672">-</span>n_yogurt <span style="color:#f92672">/</span> n_pizza

budget <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">function</span>(x) (slope <span style="color:#f92672">*</span> x) <span style="color:#f92672">+</span> n_yogurt


<span style="color:#75715e"># Utility and indifference ------------------------------------------------</span>
<span style="color:#75715e"># U = x^2 0.25y</span>
utility_u <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">function</span>(x, y) x^2 <span style="color:#f92672">*</span> (<span style="color:#ae81ff">0.25</span> <span style="color:#f92672">*</span> y)

<span style="color:#75715e"># Rewrite as y = something</span>
utility_y <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">function</span>(my_x, my_U) {
  solved <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">Solve</span>(<span style="color:#a6e22e">utility_u</span>(x, y) <span style="color:#f92672">==</span> U, y)
  solution <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">Eval</span>(solved, <span style="color:#a6e22e">list</span>(x <span style="color:#f92672">=</span> my_x, U <span style="color:#f92672">=</span> my_U))
  <span style="color:#a6e22e">as.numeric</span>(<span style="color:#a6e22e">str_extract</span>(solution, <span style="color:#e6db74">&#34;-?[0-9]\\d*(\\.\\d+)?&#34;</span>))
}

<span style="color:#75715e"># Marginal rate of substitution</span>
marginal_utility <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">function</span>(my_x) {
  mux_muy <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">Simplify</span>(<span style="color:#a6e22e">deriv</span>(<span style="color:#a6e22e">utility_u</span>(x, y), x) <span style="color:#f92672">/</span> <span style="color:#a6e22e">deriv</span>(<span style="color:#a6e22e">utility_u</span>(x, y), y))
  mux_muy_price <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">Solve</span>(<span style="color:#a6e22e">paste</span>(mux_muy, <span style="color:#e6db74">&#34;==&#34;</span>, price_x, <span style="color:#e6db74">&#34;/&#34;</span>, price_y), y)
  solution <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">Eval</span>(mux_muy_price, <span style="color:#a6e22e">list</span>(x <span style="color:#f92672">=</span> my_x))
  <span style="color:#a6e22e">as.numeric</span>(<span style="color:#a6e22e">str_extract</span>(solution, <span style="color:#e6db74">&#34;-?[0-9]\\d*(\\.\\d+)?&#34;</span>))
}


<span style="color:#75715e"># Optimal points ----------------------------------------------------------</span>
<span style="color:#75715e"># Find best x</span>
optimal_x <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">uniroot</span>(<span style="color:#a6e22e">function</span>(x) <span style="color:#a6e22e">budget</span>(x) <span style="color:#f92672">-</span> <span style="color:#a6e22e">marginal_utility</span>(x), <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">100</span>))<span style="color:#f92672">$</span>root

<span style="color:#75715e"># Plug best x into the budget function to find best y</span>
optimal_y <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">budget</span>(optimal_x)

<span style="color:#75715e"># Plug optimal x and y into utility function to find maximum utils given the budget</span>
max_utility <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">utility_u</span>(optimal_x, optimal_y)


<span style="color:#75715e"># Plot everything ---------------------------------------------------------</span>
<span style="color:#a6e22e">ggplot</span>() <span style="color:#f92672">+</span> 
  <span style="color:#75715e"># Budget line</span>
  <span style="color:#a6e22e">stat_function</span>(data <span style="color:#f92672">=</span> <span style="color:#a6e22e">tibble</span>(x <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">:</span><span style="color:#ae81ff">15</span>), <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x),
                fun <span style="color:#f92672">=</span> budget, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#638ccc&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.5</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">annotate</span>(geom <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;label&#34;</span>, x <span style="color:#f92672">=</span> <span style="color:#ae81ff">2.5</span>, y <span style="color:#f92672">=</span> <span style="color:#a6e22e">budget</span>(<span style="color:#ae81ff">2.5</span>), 
           label <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Budget&#34;</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#638ccc&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#75715e"># Best indifference curve</span>
  <span style="color:#a6e22e">stat_function</span>(data <span style="color:#f92672">=</span> <span style="color:#a6e22e">tibble</span>(x <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#ae81ff">15</span>), <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x),
                fun <span style="color:#f92672">=</span> utility_y, args <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(my_U <span style="color:#f92672">=</span> max_utility),
                color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#ca5670&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.5</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">annotate</span>(geom <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;label&#34;</span>, x <span style="color:#f92672">=</span> <span style="color:#ae81ff">7</span>, y <span style="color:#f92672">=</span> <span style="color:#a6e22e">utility_y</span>(<span style="color:#ae81ff">7</span>, max_utility), 
           label <span style="color:#f92672">=</span> <span style="color:#a6e22e">paste0</span>(<span style="color:#e6db74">&#34;U = &#34;</span>, max_utility), color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#ca5670&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#75715e"># Dotted lines to show x and y</span>
  <span style="color:#a6e22e">annotate</span>(geom <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;segment&#34;</span>, x <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, y <span style="color:#f92672">=</span> optimal_y, xend <span style="color:#f92672">=</span> optimal_x, yend <span style="color:#f92672">=</span> optimal_y,
           linetype <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;dashed&#34;</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;grey50&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.5</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">annotate</span>(geom <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;segment&#34;</span>, x <span style="color:#f92672">=</span> optimal_x, y <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, xend <span style="color:#f92672">=</span> optimal_x, yend <span style="color:#f92672">=</span> optimal_y,
           linetype <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;dashed&#34;</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;grey50&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.5</span>) <span style="color:#f92672">+</span>
  <span style="color:#75715e"># Dot at optimal point</span>
  <span style="color:#a6e22e">annotate</span>(geom <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;point&#34;</span>, x <span style="color:#f92672">=</span> optimal_x, y <span style="color:#f92672">=</span> optimal_y, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Slices of pizza&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Bowls of frozen yogurt&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_x_continuous</span>(expand <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>), breaks <span style="color:#f92672">=</span> <span style="color:#a6e22e">seq</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">5</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_y_continuous</span>(expand <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>), breaks <span style="color:#f92672">=</span> <span style="color:#a6e22e">seq</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">30</span>, <span style="color:#ae81ff">10</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">coord_cartesian</span>(xlim <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">16</span>), ylim <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">32</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_classic</span>(base_family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Encode Sans Condensed&#34;</span>) <span style="color:#f92672">+</span> 
  <span style="color:#a6e22e">theme</span>(axis.title.x <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_text</span>(margin <span style="color:#f92672">=</span> <span style="color:#a6e22e">margin</span>(t <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>)),
        axis.title.y <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_text</span>(margin <span style="color:#f92672">=</span> <span style="color:#a6e22e">margin</span>(r <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>)),
        axis.title <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_text</span>(family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Encode Sans Condensed Medium&#34;</span>))
</code></pre></div><figure><img src="complete-example-1.png"
         alt="Complete example"/>
</figure>

%!s(MISSING)]]></content>
        <category term="r" />
        <category term="ggplot" />
        <category term="tidyverse" />
        <category term="yacas" />
        <category term="economics" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Half a dozen frequentist and Bayesian ways to measure the difference in means in two groups]]></title>
        <link href="https://www.shagunjhaver.com/blog/2019/01/29/diff-means-half-dozen-ways/" rel="alternate" />
        <published>2019-01-29T00:00:00+00:00</published>
        <updated>2019-01-29T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2019/01/29/diff-means-half-dozen-ways/</id>
        <summary type="html"><![CDATA[Learn how to run standard t-tests, simulations, and Bayesian difference in means tests with R and Stan]]></summary>
        <content type="html"><![CDATA[<p><span class="small">(<a href="https://github.com/andrewheiss/diff-means-half-dozen-ways">See this notebook on GitHub</a>)</span></p>
<hr>
<p>Taking a sample from two groups from a population and seeing if there’s a significant or substantial difference between them is a standard task in statistics. Measuring performance on a test before and after some sort of intervention, measuring average GDP in two different continents, measuring average height in two groups of flowers, etc.—we like to know if any group differences we see are attributable to chance / measurement error, or if they’re real.</p>
<p>Classical frequentist statistics typically measures the difference between groups with a <a href="https://en.wikipedia.org/wiki/Student%27s_t-test">t-test</a>, but t-tests are 100+ years old and statistical methods have advanced a lot since 1908. Nowadays, we can use simulation and/or Bayesian methods to get richer information about the differences between two groups without worrying so much about the assumptions and preconditions for classical t-tests.</p>
<p>Mostly as a resource to future me, here are a bunch of different ways to measure the difference in means in two groups. I’ve done them all in real life projects, but I’m tired of constantly searching my computer for the code to do them:)</p>
<p>These ways can all be adapted to different situations (i.e. difference in proportions, one-sample difference in means, etc.). The process for simulation and Bayesian approaches will be roughly the same, while for frequentist approaches, you’ll need to walk through a <a href="https://www.google.com/search?q=statistical+test+workflow&amp;tbm=isch">statistical test workflow</a> to find the appropriate test.</p>
<p>Also, this is long and really kind of meant as a general reference. Here’s a tl;dr table of contents:</p>
<ul>
<li><a href="#data">Data</a></li>
<li><a href="#classical-frequentist-t-tests">Classical frequentist t-tests</a>
<ul>
<li><a href="#t-test-assuming-equal-variances">t-test, assuming equal variances</a></li>
<li><a href="#t-test-assuming-unequal-variance">t-test, assuming unequal variance</a></li>
</ul>
</li>
<li><a href="#simulation-based-tests">Simulation-based tests</a></li>
<li><a href="#bayesian-regression">Bayesian regression</a>
<ul>
<li><a href="#regression-assuming-equal-variances">Regression, assuming equal variances</a></li>
<li><a href="#a-quick-digression-into-priors">A quick digression into priors</a></li>
<li><a href="#regression-assuming-unequal-variances">Regression, assuming unequal variances</a></li>
<li><a href="#regression-best">Regression, BEST</a></li>
</ul>
</li>
<li><a href="#bayesian-analysis-directly-with-stan">Bayesian analysis, directly with Stan</a></li>
<li><a href="#regression-best-with-priors-on-variables-instead-of-difference">Regression, BEST, with priors on variables instead of difference</a></li>
<li><a href="#comparing-all-methods">Comparing all methods</a></li>
</ul>
<h2 id="data">Data</h2>
<p>First we need some data to play with. We’ll use the <a href="https://cran.r-project.org/package=ggplot2movies"><strong>ggplot2movies</strong> package</a>, which contains information about almost 60,000 movies from IMDB from 1893 to 2005. For this example, we want to see if there is a significant/substantial/real difference in the average IMDB rating for action movies and comedies. Are people more likely to rate comedies higher than action movies?</p>
<p>Instead of working with all 20,407 action movies and comedies, we take a random sample of 200 each. (This is just so we can have some variation in the group averages—if we work with all 20,000, the confidence intervals for each group average basically disappear since there are so many observations.)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Load libraries</span>
<span style="color:#a6e22e">library</span>(tidyverse)  <span style="color:#75715e"># ggplot, dplyr, and friends</span>
<span style="color:#a6e22e">library</span>(ggridges)   <span style="color:#75715e"># Ridge plots</span>
<span style="color:#a6e22e">library</span>(ggstance)   <span style="color:#75715e"># Horizontal pointranges and bars</span>
<span style="color:#a6e22e">library</span>(patchwork)  <span style="color:#75715e"># Lay out multiple ggplot plots; install from https://github.com/thomasp85/patchwork</span>
<span style="color:#a6e22e">library</span>(scales)     <span style="color:#75715e"># Nicer formatting for numbers</span>
<span style="color:#a6e22e">library</span>(broom)      <span style="color:#75715e"># Convert model results to tidy data frames</span>
<span style="color:#a6e22e">library</span>(infer)      <span style="color:#75715e"># Statistical inference with simulation</span>
<span style="color:#a6e22e">library</span>(rstan)      <span style="color:#75715e"># R interface to Stan</span>
<span style="color:#a6e22e">library</span>(brms)       <span style="color:#75715e"># Run Stan-based models with standard R syntax</span>
<span style="color:#a6e22e">library</span>(ggplot2movies)  <span style="color:#75715e"># Lots of movies from IMDB</span>


<span style="color:#75715e"># Clean up data</span>
<span style="color:#a6e22e">set.seed</span>(<span style="color:#ae81ff">1234</span>)  <span style="color:#75715e"># Set seed so we get the same sampled rows every time</span>
movies_clean <span style="color:#f92672">&lt;-</span> movies <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># Make a binary column for genre</span>
  <span style="color:#a6e22e">select</span>(title, year, rating, Action, Comedy) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">filter</span>(<span style="color:#f92672">!</span>(Action <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;</span> Comedy <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(genre <span style="color:#f92672">=</span> <span style="color:#a6e22e">case_when</span>(Action <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">~</span> <span style="color:#e6db74">&#34;Action&#34;</span>,
                           Comedy <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">~</span> <span style="color:#e6db74">&#34;Comedy&#34;</span>,
                           <span style="color:#66d9ef">TRUE</span> <span style="color:#f92672">~</span> <span style="color:#e6db74">&#34;Neither&#34;</span>)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">filter</span>(genre <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;Neither&#34;</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#75715e"># Make a numeric version of genre, where action = 1, comedy = 2</span>
  <span style="color:#a6e22e">mutate</span>(genre_numeric <span style="color:#f92672">=</span> <span style="color:#a6e22e">as.numeric</span>(<span style="color:#a6e22e">factor</span>(genre))) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># Make genre a factor</span>
  <span style="color:#a6e22e">mutate</span>(genre <span style="color:#f92672">=</span> <span style="color:#a6e22e">factor</span>(genre)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">select</span>(<span style="color:#f92672">-</span>Action, <span style="color:#f92672">-</span>Comedy) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># Randomly select 200 movies in each genre</span>
  <span style="color:#a6e22e">group_by</span>(genre) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">sample_n</span>(<span style="color:#ae81ff">200</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">ungroup</span>()
</code></pre></div><p>To get a sense of the data, we’ll do some quick exploratory data analysis with a bunch of different graph types.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Make a custom theme</span>
<span style="color:#75715e"># I&#39;m using Asap Condensed; download from </span>
<span style="color:#75715e"># https://fonts.google.com/specimen/Asap+Condensed</span>
theme_fancy <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">function</span>() {
  <span style="color:#a6e22e">theme_minimal</span>(base_family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Asap Condensed&#34;</span>) <span style="color:#f92672">+</span>
    <span style="color:#a6e22e">theme</span>(panel.grid.minor <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>())
}

eda_boxplot <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(movies_clean, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> genre, y <span style="color:#f92672">=</span> rating, fill <span style="color:#f92672">=</span> genre)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_boxplot</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_fill_manual</span>(values <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;#0288b7&#34;</span>, <span style="color:#e6db74">&#34;#a90010&#34;</span>), guide <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>) <span style="color:#f92672">+</span> 
  <span style="color:#a6e22e">scale_y_continuous</span>(breaks <span style="color:#f92672">=</span> <span style="color:#a6e22e">seq</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">1</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Rating&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_fancy</span>()

eda_histogram <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(movies_clean, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> rating, fill <span style="color:#f92672">=</span> genre)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_histogram</span>(binwidth <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;white&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_fill_manual</span>(values <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;#0288b7&#34;</span>, <span style="color:#e6db74">&#34;#a90010&#34;</span>), guide <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>) <span style="color:#f92672">+</span> 
  <span style="color:#a6e22e">scale_x_continuous</span>(breaks <span style="color:#f92672">=</span> <span style="color:#a6e22e">seq</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">1</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Count&#34;</span>, x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Rating&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">facet_wrap</span>(<span style="color:#f92672">~</span> genre, nrow <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_fancy</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(panel.grid.major.x <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>())

eda_ridges <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(movies_clean, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> rating, y <span style="color:#f92672">=</span> <span style="color:#a6e22e">fct_rev</span>(genre), fill <span style="color:#f92672">=</span> genre)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">stat_density_ridges</span>(quantile_lines <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>, quantiles <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, scale <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;white&#34;</span>) <span style="color:#f92672">+</span> 
  <span style="color:#a6e22e">scale_fill_manual</span>(values <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;#0288b7&#34;</span>, <span style="color:#e6db74">&#34;#a90010&#34;</span>), guide <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>) <span style="color:#f92672">+</span> 
  <span style="color:#a6e22e">scale_x_continuous</span>(breaks <span style="color:#f92672">=</span> <span style="color:#a6e22e">seq</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">2</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Rating&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>,
       subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;White line shows median rating&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_fancy</span>()

(eda_boxplot <span style="color:#f92672">|</span> eda_histogram) <span style="color:#f92672">/</span> 
    eda_ridges <span style="color:#f92672">+</span> 
  <span style="color:#a6e22e">plot_annotation</span>(title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Do comedies get higher ratings than action movies?&#34;</span>,
                  subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Sample of 400 movies from IMDB&#34;</span>,
                  theme <span style="color:#f92672">=</span> <span style="color:#a6e22e">theme</span>(text <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_text</span>(family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Asap Condensed&#34;</span>),
                                plot.title <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_text</span>(face <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bold&#34;</span>,
                                                          size <span style="color:#f92672">=</span> <span style="color:#a6e22e">rel</span>(<span style="color:#ae81ff">1.5</span>))))
</code></pre></div><p><img src="eda-plots-1.png" alt="Exploratory data analysis"></p>
<p>Initially, it looks like there might be a difference in average rating. Comedies tend to have higher ratings. We can calculate the difference with some <strong>dplyr</strong> <code>group_by() %&gt;% summarize()</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">group_diffs <span style="color:#f92672">&lt;-</span> movies_clean <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">group_by</span>(genre) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">summarize</span>(avg_rating <span style="color:#f92672">=</span> <span style="color:#a6e22e">mean</span>(rating, na.rm <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(diff_means <span style="color:#f92672">=</span> avg_rating <span style="color:#f92672">-</span> <span style="color:#a6e22e">lead</span>(avg_rating))
group_diffs

<span style="color:#75715e">## # A tibble: 2 x 3</span>
<span style="color:#75715e">##   genre  avg_rating diff_means</span>
<span style="color:#75715e">##   &lt;fct&gt;       &lt;dbl&gt;      &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 Action       5.28     -0.682</span>
<span style="color:#75715e">## 2 Comedy       5.97     NA</span>
</code></pre></div><p>Yep. There’s a -0.6825 point difference in ratings. Action movies score 0.7 points lower than comedies, on average.</p>
<p>But how certain are we that that difference is real and not just due to sampling error? It’s time for inference!</p>
<h2 id="classical-frequentist-t-tests">Classical frequentist t-tests</h2>
<h3 id="t-test-assuming-equal-variances">t-test, assuming equal variances</h3>
<p>We can use a standard frequentist t-test to check if the group means are different. We can assume that the variances in the two groups are the same and run <code>t.test()</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Assume equal variances</span>
t_test_eq <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">t.test</span>(rating <span style="color:#f92672">~</span> genre, data <span style="color:#f92672">=</span> movies_clean, var.equal <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>)
t_test_eq

<span style="color:#75715e">## </span>
<span style="color:#75715e">##  Two Sample t-test</span>
<span style="color:#75715e">## </span>
<span style="color:#75715e">## data:  rating by genre</span>
<span style="color:#75715e">## t = -4.4753, df = 398, p-value = 0.000009977</span>
<span style="color:#75715e">## alternative hypothesis: true difference in means is not equal to 0</span>
<span style="color:#75715e">## 95 percent confidence interval:</span>
<span style="color:#75715e">##  -0.9823168 -0.3826832</span>
<span style="color:#75715e">## sample estimates:</span>
<span style="color:#75715e">## mean in group Action mean in group Comedy </span>
<span style="color:#75715e">##               5.2845               5.9670</span>
</code></pre></div><p>The default output is helpful—the p-value is really tiny, which means there’s a tiny chance that we’d see a difference that big in group means in a world where there’s no difference. However, in this format, it’s hard to extract any of these values for later use, like in plotting. We can use the <code>tidy()</code> function from the <strong>broom</strong> library to convert these t-test results to a nice data frame.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">t_test_eq_tidy <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">tidy</span>(t_test_eq) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># Calculate difference in means, since t.test() doesn&#39;t actually do that</span>
  <span style="color:#a6e22e">mutate</span>(estimate <span style="color:#f92672">=</span> estimate1 <span style="color:#f92672">-</span> estimate2) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#75715e"># Rearrange columns</span>
  <span style="color:#a6e22e">select</span>(<span style="color:#a6e22e">starts_with</span>(<span style="color:#e6db74">&#34;estimate&#34;</span>), <span style="color:#a6e22e">everything</span>())

t_test_eq_tidy

<span style="color:#75715e">## # A tibble: 1 x 10</span>
<span style="color:#75715e">##   estimate1 estimate2 estimate statistic p.value parameter conf.low</span>
<span style="color:#75715e">##       &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;</span>
<span style="color:#75715e">## 1      5.28      5.97   -0.682     -4.48 9.98e-6       398   -0.982</span>
<span style="color:#75715e">## # … with 3 more variables: conf.high &lt;dbl&gt;, method &lt;chr&gt;,</span>
<span style="color:#75715e">## #   alternative &lt;chr&gt;</span>
</code></pre></div><p>By default, though, R does not assume that the variance in the two groups’ populations is equal, which is probably a reasonable thing to do. There may be structural differences in how comedies and action movies are produced, which in turn leads to structural differences in how they’re rated.</p>
<p>There are several systematic ways to check if the two groups have equal variance. For all these tests, the null hypothesis is that the two groups have similar (homogeneous) variances. If the p-value is less than 0.05, we can assume that they have unequal or heterogeneous variances. (<a href="https://statistic-on-air.blogspot.com/2009/07/analysis-of-variance-anova-for-multiple.html">Here’s a helpful overview</a> of this process.)</p>
<ul>
<li>
<p><a href="https://en.wikipedia.org/wiki/Bartlett%27s_test"><strong>Bartlett test</strong></a>: Check homogeneity of variances based on the mean</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">bartlett.test</span>(rating <span style="color:#f92672">~</span> genre, data <span style="color:#f92672">=</span> movies_clean)

<span style="color:#75715e">## </span>
<span style="color:#75715e">##  Bartlett test of homogeneity of variances</span>
<span style="color:#75715e">## </span>
<span style="color:#75715e">## data:  rating by genre</span>
<span style="color:#75715e">## Bartlett&#39;s K-squared = 0.10006, df = 1, p-value = 0.7518</span>
</code></pre></div></li>
<li>
<p><a href="https://en.wikipedia.org/wiki/Levene%27s_test"><strong>Levene test</strong></a>: Check homogeneity of variances based on the median, so it’s more robust to outliers</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Install the car package first</span>
car<span style="color:#f92672">::</span><span style="color:#a6e22e">leveneTest</span>(rating <span style="color:#f92672">~</span> genre, data <span style="color:#f92672">=</span> movies_clean)

<span style="color:#75715e">## Levene&#39;s Test for Homogeneity of Variance (center = median)</span>
<span style="color:#75715e">##        Df F value Pr(&gt;F)</span>
<span style="color:#75715e">## group   1  0.4917 0.4836</span>
<span style="color:#75715e">##       398</span>
</code></pre></div></li>
<li>
<p><a href="https://biostats.w.uib.no/test-for-homogeneity-of-variances-levenes-test/"><strong>Fligner-Killeen test</strong></a>: Check homogeneity of variances based on the median, so it’s more robust to outliers</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">fligner.test</span>(rating <span style="color:#f92672">~</span> genre, data <span style="color:#f92672">=</span> movies_clean)

<span style="color:#75715e">## </span>
<span style="color:#75715e">##  Fligner-Killeen test of homogeneity of variances</span>
<span style="color:#75715e">## </span>
<span style="color:#75715e">## data:  rating by genre</span>
<span style="color:#75715e">## Fligner-Killeen:med chi-squared = 0.78337, df = 1, p-value = 0.3761</span>
</code></pre></div></li>
<li>
<p><a href="https://en.wikipedia.org/wiki/Kruskal%E2%80%93Wallis_one-way_analysis_of_variance"><strong>Kruskal-Wallis test</strong></a>: Check homogeneity of distributions nonparametrically</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">kruskal.test</span>(rating <span style="color:#f92672">~</span> genre, data <span style="color:#f92672">=</span> movies_clean)

<span style="color:#75715e">## </span>
<span style="color:#75715e">##  Kruskal-Wallis rank sum test</span>
<span style="color:#75715e">## </span>
<span style="color:#75715e">## data:  rating by genre</span>
<span style="color:#75715e">## Kruskal-Wallis chi-squared = 19.787, df = 1, p-value = 0.000008655</span>
</code></pre></div></li>
</ul>
<p>Phew. In all these tests except the Kruskall-Wallis test, we don’t have enough evidence to conclude that the variances are different, so we’re probably safe leaving <code>var.equal = TRUE</code> on.</p>
<h3 id="t-test-assuming-unequal-variance">t-test, assuming unequal variance</h3>
<p>We can run a t-test assuming that the two groups have unequal variances by setting <code>var.equal = FALSE</code>, or just leaving it off. I generally just do this instead of going through all the tests for equal variance.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Assume unequal variances</span>
t_test_uneq <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">t.test</span>(rating <span style="color:#f92672">~</span> genre, data <span style="color:#f92672">=</span> movies_clean)
t_test_uneq_tidy <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">tidy</span>(t_test_uneq) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(estimate <span style="color:#f92672">=</span> estimate1 <span style="color:#f92672">-</span> estimate2) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">select</span>(<span style="color:#a6e22e">starts_with</span>(<span style="color:#e6db74">&#34;estimate&#34;</span>), <span style="color:#a6e22e">everything</span>())
t_test_uneq_tidy

<span style="color:#75715e">## # A tibble: 1 x 10</span>
<span style="color:#75715e">##   estimate estimate1 estimate2 statistic p.value parameter conf.low</span>
<span style="color:#75715e">##      &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;</span>
<span style="color:#75715e">## 1   -0.682      5.28      5.97     -4.48 9.98e-6      398.   -0.982</span>
<span style="color:#75715e">## # … with 3 more variables: conf.high &lt;dbl&gt;, method &lt;chr&gt;,</span>
<span style="color:#75715e">## #   alternative &lt;chr&gt;</span>
</code></pre></div><h2 id="simulation-based-tests">Simulation-based tests</h2>
<p>Instead of dealing with all the assumptions of the data and finding the exact statistical test written by some dude in the 1940s, we can use the power of bootstrapping, permutation, and simulation to construct a null distribution and calculate confidence intervals. According to Allen Downey, <a href="http://allendowney.blogspot.com/2016/06/there-is-still-only-one-test.html">there is actually only one statistical test</a> and that at their core, all statistical tests follow the same universal pattern:</p>
<ul>
<li><strong>Step 1: Calculate a sample statistic, or $\delta$.</strong> This is the main measure you care about: the difference in means, the average, the median, the proportion, the difference in proportions, the chi-squared value, etc.</li>
<li><strong>Step 2: Use simulation to invent a world where $\delta$ is null.</strong> Simulate what the world would look like if there was no difference between two groups, or if there was no difference in proportions, or where the average value is a specific number.</li>
<li><strong>Step 3: Look at $\delta$ in the null world.</strong> Put the sample statistic in the null world and see if it fits well.</li>
<li><strong>Step 4: Calculate the probability that $\delta$ could exist in null world.</strong> This is the p-value, or the probability that you’d see a $\delta$ at least that high in a world where there’s no difference.</li>
<li><strong>Step 5: Decide if $\delta$ is statistically significant.</strong> Choose some evidentiary standard or threshold (like 0.05) for deciding if there’s sufficient proof for rejecting the null world.</li>
</ul>
<p>I have <a href="https://www.andrewheiss.com/blog/2018/12/05/test-any-hypothesis/">a fully commented example of how to do this with the <strong>infer</strong> package here</a>. Once you get the hang of it, the <a href="https://github.com/tidymodels/infer"><strong>infer</strong> workflow</a> is fairly intuitive and flexible and far more delightful than worrying about classical tests.</p>
<p>First we calculate the difference in means in the actual data:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Calculate the difference in means</span>
diff_means <span style="color:#f92672">&lt;-</span> movies_clean <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">specify</span>(rating <span style="color:#f92672">~</span> genre) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#75715e"># Order here means we subtract comedy from action (Action - Comedy)</span>
  <span style="color:#a6e22e">calculate</span>(<span style="color:#e6db74">&#34;diff in means&#34;</span>, order <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;Action&#34;</span>, <span style="color:#e6db74">&#34;Comedy&#34;</span>))
diff_means

<span style="color:#75715e">## # A tibble: 1 x 1</span>
<span style="color:#75715e">##     stat</span>
<span style="color:#75715e">##    &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 -0.682</span>
</code></pre></div><p>Then we can generate a bootstrapped distribution of the difference in means based on our sample and calculate the confidence interval:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">boot_means <span style="color:#f92672">&lt;-</span> movies_clean <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">specify</span>(rating <span style="color:#f92672">~</span> genre) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">generate</span>(reps <span style="color:#f92672">=</span> <span style="color:#ae81ff">1000</span>, type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bootstrap&#34;</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">calculate</span>(<span style="color:#e6db74">&#34;diff in means&#34;</span>, order <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;Action&#34;</span>, <span style="color:#e6db74">&#34;Comedy&#34;</span>))

boostrapped_confint <span style="color:#f92672">&lt;-</span> boot_means <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">get_confidence_interval</span>()

boot_means <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">visualize</span>() <span style="color:#f92672">+</span> 
  <span style="color:#a6e22e">shade_confidence_interval</span>(boostrapped_confint,
                            color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#8bc5ed&#34;</span>, fill <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#85d9d2&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_vline</span>(xintercept <span style="color:#f92672">=</span> diff_means<span style="color:#f92672">$</span>stat, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#77002c&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Bootstrapped distribution of differences in means&#34;</span>,
       x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Action − Comedy&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Count&#34;</span>,
       subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Red line shows observed difference; shaded area shows 95% confidence interval&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_fancy</span>()
</code></pre></div><p><img src="sim-boot-1.png" alt="Bootstrapped confidence interval"></p>
<p>Neat. We have a simulation-based confidence interval, and it doesn’t contain zero, so we can have some confidence that there’s a real difference between the two groups.</p>
<p>We can go through the testing process more thoroughly by following Downey’s process. We’ve already done step one (calculate $\delta$); next we generate a world where there’s no difference by shuffling all the action/comedy labels through permutation</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Step 2: Invent a world where δ is null</span>
genre_diffs_null <span style="color:#f92672">&lt;-</span> movies_clean <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">specify</span>(rating <span style="color:#f92672">~</span> genre) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">hypothesize</span>(null <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;independence&#34;</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">generate</span>(reps <span style="color:#f92672">=</span> <span style="color:#ae81ff">5000</span>, type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;permute&#34;</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">calculate</span>(<span style="color:#e6db74">&#34;diff in means&#34;</span>, order <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;Action&#34;</span>, <span style="color:#e6db74">&#34;Comedy&#34;</span>))

<span style="color:#75715e"># Step 3: Put actual observed δ in the null world and see if it fits</span>
genre_diffs_null <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">visualize</span>() <span style="color:#f92672">+</span> 
  <span style="color:#a6e22e">geom_vline</span>(xintercept <span style="color:#f92672">=</span> diff_means<span style="color:#f92672">$</span>stat, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#77002c&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_y_continuous</span>(labels <span style="color:#f92672">=</span> comma) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Simulated difference in average ratings (Action − Comedy)&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Count&#34;</span>,
       title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Simulation-based null distribution of differences in means&#34;</span>,
       subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Red line shows observed difference&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_fancy</span>()
</code></pre></div><p><img src="sim-generate-null-world-1.png" alt="Simulated p-value"></p>
<p>That red line is pretty far to the left and seems like it wouldn’t fit very well in a world where there’s no actual difference between the groups. We can calculate the probability of seeing that red line in a null world (step 4) with <code>get_p_value()</code> (and we can use the cool new <code>pvalue()</code> function in the <strong>scales</strong> library to format it as &lt; 0.001):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Step 4: Calculate probability that observed δ could exist in null world</span>
genre_diffs_null <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">get_p_value</span>(obs_stat <span style="color:#f92672">=</span> diff_means, direction <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;both&#34;</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(p_value_clean <span style="color:#f92672">=</span> <span style="color:#a6e22e">pvalue</span>(p_value))

<span style="color:#75715e">## # A tibble: 1 x 2</span>
<span style="color:#75715e">##   p_value p_value_clean</span>
<span style="color:#75715e">##     &lt;dbl&gt; &lt;chr&gt;        </span>
<span style="color:#75715e">## 1       0 &lt;0.001</span>
</code></pre></div><p>Because the p-value is so small, it passes pretty much all evidentiary thresholds (p &lt; 0.05, p &lt; 0.01, etc), so we can safely say that there’s a difference between the two groups. Action movies are rated lower, on average, than comedies.</p>
<h2 id="bayesian-regression">Bayesian regression</h2>
<p>Next we can leave the world of frequentist statistics and null hypothesis testing and do some Bayesian analysis. Frequentist null hypothesis significance testing (NHST) determines the <em>probability of the data given a null hypothesis</em> (i.e. $P(\text{data} | H)$, yielding results that are often unwieldy, phrased as the probability of rejecting the null if it is true (hence all that talk of “null worlds” earlier). In contrast, Bayesian analysis determines the <em>probability of a hypothesis given the data</em> (i.e.$P(H | \text{data})$), resulting in probabilities that are directly interpretable.</p>
<p>Bayesian analysis is way more computationally intensive and requires more upfront work (e.g prior specification). Because of this, R itself doesn’t have robust support for the actual Monte Carlo sampling and other computational heavy lifting involved in Bayesian stuff. Instead, it can connect to external sampling programs that are optimized for this kind of repetitive simulation work. <a href="https://en.wikipedia.org/wiki/Bayesian_inference_using_Gibbs_sampling">BUGS</a> and <a href="http://mcmc-jags.sourceforge.net/">JAGS</a> were popular sampling software tools, but nowadays all the cool kids are using <a href="https://mc-stan.org/">Stan</a>.</p>
<p>Writing Stan code by hand is tricky since it requires that you essentially learn another programming language. Fortunately, you technically can do Bayesian analysis without writing a single line of Stan code. There are two different packages that precompile Stan code for you:</p>
<ul>
<li><a href="https://mc-stan.org/users/interfaces/rstanarm"><strong>rstanarm</strong></a>: This is written by the Stan team itself and provides functions like <code>stan_lm()</code> and <code>stan_glm()</code> that are drop-in replacements for R’s standard <code>lm()</code> and <code>glm()</code>. The code is highly optimized and precompiled and runs really fast, but there’s no good way to inspect the underlying Stan code. Also, it’s more limited in the types of regression it supports.</li>
<li><a href="https://github.com/paul-buerkner/brms"><strong>brms</strong></a>: This provides a more universal front end for Stan and supports a wider variety of models. It doesn’t have drop-in <code>lm()</code> replacements, but the <code>brm()</code> function is fairly intuitive after poring through the documentation and examples. It’s slower than <strong>rstanarm</strong> because it has to compile the Stan scripts it generates with C++, but you can inspect the Stan code behind each of the models with <code>stancode()</code> and better see what’s going on behind the scenes.</li>
</ul>
<p>There aren’t really any cool front end packages for running non-regression analyses with Stan from R (there is <a href="http://www.sumsar.net/blog/2014/02/bayesian-first-aid-one-sample-t-test/">Rasmus Bååth’s Bayesian First Aid package</a>, but it uses JAGS and hasn’t been updated in a while and I want to use Stan like the cool kids), but you can actually calculate differences in means with regression, which means we can approximate frequentist t-tests without writing any Stan code.</p>
<p><a href="https://vuorre.netlify.com/post/2017/01/02/how-to-compare-two-groups-with-robust-bayesian-estimation-using-r-stan-and-brms/">This blog post by Matti Vuorre</a> is a masterpiece and clearly explains the rationale behind how and why you can use regression for t-tests. This code here is adapted from his stuff.</p>
<p>First, we’ll set a bunch of Monte Carlo parameters:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">CHAINS <span style="color:#f92672">&lt;-</span> <span style="color:#ae81ff">4</span>
ITER <span style="color:#f92672">&lt;-</span> <span style="color:#ae81ff">2000</span>
WARMUP <span style="color:#f92672">&lt;-</span> <span style="color:#ae81ff">1000</span>
BAYES_SEED <span style="color:#f92672">&lt;-</span> <span style="color:#ae81ff">1234</span>
<span style="color:#a6e22e">options</span>(mc.cores <span style="color:#f92672">=</span> parallel<span style="color:#f92672">::</span><span style="color:#a6e22e">detectCores</span>())  <span style="color:#75715e"># Use all cores</span>
</code></pre></div><h3 id="regression-assuming-equal-variances">Regression, assuming equal variances</h3>
<p>Then we can run the model. We set a couple priors for the intercept (normal, with a mean of 0 and standard deviation of 5) and the beta/slope (normal, with a mean of 0 and a standard deviation of 1). In this model, <code>rating ~ genre</code>, we assume equal variances between the groups.</p>
<p>We use <code>tidyMCMC</code> from <strong>broom</strong> to calculate the medians of the posterior distributions and create confidence intervals.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">brms_eq <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">brm</span>(
  <span style="color:#75715e"># bf() is an alias for brmsformula() and lets you specify model formulas</span>
  <span style="color:#a6e22e">bf</span>(rating <span style="color:#f92672">~</span> genre), 
  <span style="color:#75715e"># Reverse the levels of genre so that comedy is the base case</span>
  data <span style="color:#f92672">=</span> <span style="color:#a6e22e">mutate</span>(movies_clean, genre <span style="color:#f92672">=</span> <span style="color:#a6e22e">fct_rev</span>(genre)),
  prior <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#a6e22e">set_prior</span>(<span style="color:#e6db74">&#34;normal(0, 5)&#34;</span>, class <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Intercept&#34;</span>),
            <span style="color:#a6e22e">set_prior</span>(<span style="color:#e6db74">&#34;normal(0, 1)&#34;</span>, class <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;b&#34;</span>)),
  chains <span style="color:#f92672">=</span> CHAINS, iter <span style="color:#f92672">=</span> ITER, warmup <span style="color:#f92672">=</span> WARMUP, seed <span style="color:#f92672">=</span> BAYES_SEED,
  file <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;cache/brms_eq&#34;</span>
)
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">brms_eq_tidy <span style="color:#f92672">&lt;-</span> 
  <span style="color:#a6e22e">tidyMCMC</span>(brms_eq, conf.int <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>, conf.level <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.95</span>, 
           estimate.method <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;median&#34;</span>, conf.method <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;HPDinterval&#34;</span>)
brms_eq_tidy

<span style="color:#75715e">## # A tibble: 3 x 5</span>
<span style="color:#75715e">##   term          estimate std.error conf.low conf.high</span>
<span style="color:#75715e">##   &lt;chr&gt;            &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 b_Intercept      5.96     0.108     5.74      6.16 </span>
<span style="color:#75715e">## 2 b_genreAction   -0.666    0.152    -0.968    -0.374</span>
<span style="color:#75715e">## 3 sigma            1.53     0.0529    1.43      1.64</span>
</code></pre></div><p>Here the intercept represents the mean comedy score, while the coefficient for action represents the difference from that mean, or the effect that we care about. These findings match what we got with the frequentist work from earlier, only now we can change the interpretation: We’re 95% confident that the true population-level difference in rating is between -0.968 and -0.374, with a median of -0.666.</p>
<h3 id="a-quick-digression-into-priors">A quick digression into priors</h3>
<p>If you don’t explicitly set any priors, <strong>brms</strong> chooses sensible defaults for you. You can see what priors you can potentially set with <code>get_prior()</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">get_prior</span>(<span style="color:#a6e22e">bf</span>(rating <span style="color:#f92672">~</span> genre), data <span style="color:#f92672">=</span> movies_clean)

<span style="color:#75715e">##                 prior     class        coef group resp dpar nlpar bound</span>
<span style="color:#75715e">## 1                             b                                        </span>
<span style="color:#75715e">## 2                             b genreComedy                            </span>
<span style="color:#75715e">## 3 student_t(3, 6, 10) Intercept                                        </span>
<span style="color:#75715e">## 4 student_t(3, 0, 10)     sigma</span>
</code></pre></div><p>You can use this table to select which prior you want to set. For instance, to specify the prior distribution for the intercept, you can use <code>set_prior(&quot;normal(0, 5)&quot;, class = &quot;Intercept&quot;)</code>, which matches the table. More complicated formulas will have values in the <code>dpar</code> and <code>nlpar</code> columns, and you can use those to drill down to specific priors for those terms (e.g. <code>set_prior(&quot;cauchy(0, 1)&quot;, class = &quot;b&quot;, dpar = &quot;sigma&quot;)</code>).</p>
<p>Also, you can plot the different distributions to get a sense of their shapes with either base R or with ggplot:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Normal distribution: normal(0, 5)</span>
<span style="color:#a6e22e">curve</span>(expr <span style="color:#f92672">=</span> <span style="color:#a6e22e">dnorm</span>(x, mean <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, sd <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>), from <span style="color:#f92672">=</span> <span style="color:#ae81ff">-20</span>, to <span style="color:#f92672">=</span> <span style="color:#ae81ff">20</span>)
</code></pre></div><figure class="img-50"><img src="dist-base-norm-1.png"
         alt="Normal distribution"/>
</figure>

<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Cauchy distribution: cauchy(0, 1)</span>
<span style="color:#a6e22e">curve</span>(expr <span style="color:#f92672">=</span> <span style="color:#a6e22e">dcauchy</span>(x, location <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, scale <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>), from <span style="color:#f92672">=</span> <span style="color:#ae81ff">-5</span>, to <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>)
</code></pre></div><figure class="img-50"><img src="dist-base-cauchy-1.png"
         alt="Cauchy distribution"/>
</figure>

<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Or do this with ggplot</span>
norm_ggplot <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(data <span style="color:#f92672">=</span> <span style="color:#a6e22e">tibble</span>(x <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">-20</span>, <span style="color:#ae81ff">20</span>)), <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">stat_function</span>(fun <span style="color:#f92672">=</span> dnorm, n <span style="color:#f92672">=</span> <span style="color:#ae81ff">500</span>, args <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(mean <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, sd <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;normal(0, 5)&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_fancy</span>()

cauchy_ggplot <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(data <span style="color:#f92672">=</span> <span style="color:#a6e22e">tibble</span>(x <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">-5</span>, <span style="color:#ae81ff">5</span>)), <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">stat_function</span>(fun <span style="color:#f92672">=</span> dcauchy, n <span style="color:#f92672">=</span> <span style="color:#ae81ff">500</span>, args <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(location <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, scale <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;cauchy(0, 1)&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_fancy</span>()

norm_ggplot <span style="color:#f92672">/</span> cauchy_ggplot
</code></pre></div><figure class="img-75"><img src="dists-ggplot-1.png"
         alt="Normal and Cauchy distributions with ggplot"/>
</figure>

<h3 id="regression-assuming-unequal-variances">Regression, assuming unequal variances</h3>
<p>We can also use regression to estimate the difference in means under the assumption that group variances are different. Here, following <a href="https://vuorre.netlify.com/post/2017/01/02/how-to-compare-two-groups-with-robust-bayesian-estimation-using-r-stan-and-brms/#equal-variances-model">Matti Vuorre</a>, we need to model the variance (or sigma) in each group, and we need to specify a prior for that term (I chose <code>cauchy(0, 1</code>). We do this by specifying two formulas in <code>brm()</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">brms_uneq <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">brm</span>(
  <span style="color:#a6e22e">bf</span>(rating <span style="color:#f92672">~</span> genre, sigma <span style="color:#f92672">~</span> genre), 
  data <span style="color:#f92672">=</span> <span style="color:#a6e22e">mutate</span>(movies_clean, genre <span style="color:#f92672">=</span> <span style="color:#a6e22e">fct_rev</span>(genre)),
  prior <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#a6e22e">set_prior</span>(<span style="color:#e6db74">&#34;normal(0, 5)&#34;</span>, class <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Intercept&#34;</span>),
            <span style="color:#a6e22e">set_prior</span>(<span style="color:#e6db74">&#34;normal(0, 1)&#34;</span>, class <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;b&#34;</span>),
            <span style="color:#a6e22e">set_prior</span>(<span style="color:#e6db74">&#34;cauchy(0, 1)&#34;</span>, class <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;b&#34;</span>, dpar <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;sigma&#34;</span>)),
  chains <span style="color:#f92672">=</span> CHAINS, iter <span style="color:#f92672">=</span> ITER, warmup <span style="color:#f92672">=</span> WARMUP, seed <span style="color:#f92672">=</span> BAYES_SEED,
  file <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;cache/brms_uneq&#34;</span>
)
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">brms_uneq_tidy <span style="color:#f92672">&lt;-</span> 
  <span style="color:#a6e22e">tidyMCMC</span>(brms_uneq, conf.int <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>, conf.level <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.95</span>, 
           estimate.method <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;median&#34;</span>, conf.method <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;HPDinterval&#34;</span>)
brms_uneq_tidy

<span style="color:#75715e">## # A tibble: 4 x 5</span>
<span style="color:#75715e">##   term                estimate std.error conf.low conf.high</span>
<span style="color:#75715e">##   &lt;chr&gt;                  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 b_Intercept           5.96      0.111     5.73      6.17 </span>
<span style="color:#75715e">## 2 b_sigma_Intercept     0.433     0.0494    0.335     0.528</span>
<span style="color:#75715e">## 3 b_genreAction        -0.665     0.156    -0.979    -0.371</span>
<span style="color:#75715e">## 4 b_sigma_genreAction  -0.0199    0.0702   -0.161     0.113</span>
</code></pre></div><p>For mathy reasons (again, <a href="https://vuorre.netlify.com/post/2017/01/02/how-to-compare-two-groups-with-robust-bayesian-estimation-using-r-stan-and-brms/#unequal-variances-model">see Matti Vourre’s post</a>), the sigma terms are on a log scale, so we need to exponentiate them back to the scale of the data.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">brms_uneq_tidy <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate_at</span>(<span style="color:#a6e22e">vars</span>(estimate, std.error, conf.low, conf.high),
            <span style="color:#a6e22e">funs</span>(<span style="color:#a6e22e">ifelse</span>(<span style="color:#a6e22e">str_detect</span>(term, <span style="color:#e6db74">&#34;sigma&#34;</span>), <span style="color:#a6e22e">exp</span>(.), .)))

<span style="color:#75715e">## # A tibble: 4 x 5</span>
<span style="color:#75715e">##   term                estimate std.error conf.low conf.high</span>
<span style="color:#75715e">##   &lt;chr&gt;                  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 b_Intercept            5.96      0.111    5.73      6.17 </span>
<span style="color:#75715e">## 2 b_sigma_Intercept      1.54      1.05     1.40      1.70 </span>
<span style="color:#75715e">## 3 b_genreAction         -0.665     0.156   -0.979    -0.371</span>
<span style="color:#75715e">## 4 b_sigma_genreAction    0.980     1.07     0.851     1.12</span>
</code></pre></div><p>Here, the interpretation for the intercept and action coefficients are the same as before: the intercept the average comedy rating; the action coefficient is the change from the average comedy rating, or the effect we care about. The sigmas work similarly: the intercept sigma is the standard deviation for comedies; the intercept sigma + action sigma is the standard deviation for action movies.</p>
<h3 id="regression-best">Regression, BEST</h3>
<p>A more robust way of estimating group differences Bayesianly is to use John Kruschke’s <a href="https://psycnet.apa.org/doi/10.1037/a0029146">Bayesian Estimation Supersedes the t Test (BEST)</a> method. I’m 100% not going into the nitty gritty details of this (<a href="https://vuorre.netlify.com/post/2017/01/02/how-to-compare-two-groups-with-robust-bayesian-estimation-using-r-stan-and-brms/#robust-bayesian-estimation">Matti Vuorre has, though</a>). In the most simplest terms, the only difference between BEST and the unequal variance regression above is that we model the data with a t distribution, which means we have a new parameter, $\nu$ (nu), that changes the normality of the distribution (i.e. the degrees of freedom parameter in a t distribution). Kruschke uses an exponential prior with a rate of 1/29 in his paper, so we do too. It looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">ggplot</span>(data <span style="color:#f92672">=</span> <span style="color:#a6e22e">tibble</span>(x <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">100</span>)), <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">stat_function</span>(fun <span style="color:#f92672">=</span> dexp, n <span style="color:#f92672">=</span> <span style="color:#ae81ff">500</span>, args <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(rate <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">/</span><span style="color:#ae81ff">29</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;exponential(1/29)&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_fancy</span>()
</code></pre></div><figure class="img-75"><img src="dist-exp-1.png"
         alt="Exponential distribution"/>
</figure>

<p>Add <code>family = student</code> and set the prior for <code>nu</code> and we’re ready to go:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">brms_uneq_robust <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">brm</span>(
  <span style="color:#a6e22e">bf</span>(rating <span style="color:#f92672">~</span> genre, sigma <span style="color:#f92672">~</span> genre), 
  family <span style="color:#f92672">=</span> student,
  data <span style="color:#f92672">=</span> <span style="color:#a6e22e">mutate</span>(movies_clean, genre <span style="color:#f92672">=</span> <span style="color:#a6e22e">fct_rev</span>(genre)),
  prior <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#a6e22e">set_prior</span>(<span style="color:#e6db74">&#34;normal(0, 5)&#34;</span>, class <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Intercept&#34;</span>),
            <span style="color:#a6e22e">set_prior</span>(<span style="color:#e6db74">&#34;normal(0, 1)&#34;</span>, class <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;b&#34;</span>),
            <span style="color:#a6e22e">set_prior</span>(<span style="color:#e6db74">&#34;cauchy(0, 1)&#34;</span>, class <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;b&#34;</span>, dpar <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;sigma&#34;</span>),
            <span style="color:#a6e22e">set_prior</span>(<span style="color:#e6db74">&#34;exponential(1.0/29)&#34;</span>, class <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;nu&#34;</span>)),
  chains <span style="color:#f92672">=</span> CHAINS, iter <span style="color:#f92672">=</span> ITER, warmup <span style="color:#f92672">=</span> WARMUP, seed <span style="color:#f92672">=</span> BAYES_SEED,
  file <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;cache/brms_uneq_robust&#34;</span>
)
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">brms_uneq_robust_tidy <span style="color:#f92672">&lt;-</span> 
  <span style="color:#a6e22e">tidyMCMC</span>(brms_uneq_robust, conf.int <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>, conf.level <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.95</span>, 
           estimate.method <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;median&#34;</span>, conf.method <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;HPDinterval&#34;</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># Rescale sigmas</span>
  <span style="color:#a6e22e">mutate_at</span>(<span style="color:#a6e22e">vars</span>(estimate, std.error, conf.low, conf.high),
            <span style="color:#a6e22e">funs</span>(<span style="color:#a6e22e">ifelse</span>(<span style="color:#a6e22e">str_detect</span>(term, <span style="color:#e6db74">&#34;sigma&#34;</span>), <span style="color:#a6e22e">exp</span>(.), .)))
brms_uneq_robust_tidy

<span style="color:#75715e">## # A tibble: 5 x 5</span>
<span style="color:#75715e">##   term                estimate std.error conf.low conf.high</span>
<span style="color:#75715e">##   &lt;chr&gt;                  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 b_Intercept            5.98      0.104    5.77      6.17 </span>
<span style="color:#75715e">## 2 b_sigma_Intercept      1.47      1.06     1.31      1.66 </span>
<span style="color:#75715e">## 3 b_genreAction         -0.680     0.148   -0.966    -0.394</span>
<span style="color:#75715e">## 4 b_sigma_genreAction    0.999     1.08     0.860     1.16 </span>
<span style="color:#75715e">## 5 nu                    31.9      27.5      5.62     95.1</span>
</code></pre></div><p>Neato. Just like the other models, the coefficient for action shows us the difference in means (and it’s super similar to everything else). We can exponentiate the sigma coefficients and see the group standard deviations, and we have a coefficient for $\nu$, or the degrees of freedom for the underlying distribution.</p>
<h2 id="bayesian-analysis-directly-with-stan">Bayesian analysis, directly with Stan</h2>
<p><strong>Update</strong>: <a href="https://mikedecr.github.io/">Mike DeCrescenzo</a> made a <a href="https://twitter.com/mikedecr/status/1090416939917340672">fascinating point on Twitter</a> that relying on regression for t-test-like analysis with Bayesianism actually has important theoretical implications. When specifying a model as <code>y ~ a + bx</code> as we did above with <code>rating ~ genre</code>, the coefficient for genre (<code>b</code>) is actually the difference in means and doesn&rsquo;t directly reflect the rating itself. In theory, if we&rsquo;re thinking about two groups with two different variances, we should model the distribution of each group, not the distribution of the differences in groups. Analyzing the distributions of the two groups separately and <em>then</em> calculating the difference should yield more transparent results. And that&rsquo;s why we can/should do the analysis in Stan by hand like this.</p>
<p><strong>Another update</strong>: <a href="https://twitter.com/tjmahr/status/1090417050600816641?s=21">According to TJ Mahr</a>, you can get around this beta-for-the-difference issue by running a model like <code>rating ~ 0 + genre</code>, which suppresses the intercept and estimates coefficients for both groups directly. You have to calculate the difference in coefficients/group means by hand after, but at least you&rsquo;ll be estimating the right things.</p>
<p>Instead of using regression models and combining coefficients to figure out group means and differences, we can be brave and write actual Stan code that can return any value we want. We don’t have to be constrained by regression formulas, but we do have to figure out how to code in Stan, which is intimidating.</p>
<p>There are lots of resources out there for Stan (and Bayesianism in general), including <a href="https://xcelab.net/rm/statistical-rethinking/">Richard McElreath’s <em>Statistical Rethinking</em></a>, which has all its code in raw Stan <em>and</em> brms syntax. John Kruschke’s <em>Doing Bayesian Data Analysis</em> book includes code in both JAGS and Stan (click on <a href="https://sites.google.com/site/doingbayesiandataanalysis/software-installation">the link in step 5 here</a>; the code for BEST analysis is in the file named <code>Stan-Ymet-Xnom2grp-MrobustHet.R</code>).</p>
<p>But the resource that made the structure of Stan files (mostly) click for me was a recorded class (specifically <a href="https://www.youtube.com/watch?v=-mfeHHLcb1g">the session from 2017-01-30</a>) by <a href="https://github.com/mike-lawrence">Mike Lawrence</a> (a Canadian researcher) that <a href="https://discourse.mc-stan.org/t/what-would-be-a-good-resource-to-understand-the-method-of-two-sample-bayesian-hypothesis-testing/1492/6">I stumbled on</a> while searching the internet for ways to run BEST with Stan. Though the video is super long (you can skip around and/or watch at 2x speed; the two-sample example starts at minute 52), Mike clearly lays out the process for writing a Stan file and it’s the coolest thing ever. EVEN BETTER is the fact that he provides <a href="https://www.dropbox.com/sh/js0us2461w98bn7/AADcxczFADrCfnSA2qo8Gb2wa?dl=0">all the code from his class on Dropbox</a> (see the <a href="https://www.dropbox.com/sh/js0us2461w98bn7/AACjhob9JjkfncwkEjyI2-Pxa/2017-01-30?dl=0&amp;subfolder_nav_tracking=1">code from 2017-01-30</a> for t-test related stuff)</p>
<p>Through a combination of Mike Lawrence’s video, <a href="https://github.com/m-clark/Miscellaneous-R-Code/blob/master/ModelFitting/Bayesian/rstant_testBEST.R">Michael Clark’s BEST implementation here</a>, John Kruschke’s Stan code, and lots of debugging, <a href="imdb_best.stan">I created this Stan code</a>. Explaining the whole logic behind it goes way beyond the scope of this blog post, but I heavily commented it so it should be easy-ish to follow if you understand Stan files (which I still don’t completely ¯\_(ツ)_/¯).</p>
<p><a href="https://github.com/andrewheiss/diff-means-half-dozen-ways/blob/master/imdb_best.stan">Download <code>fancy-best.stan</code></a> and put it in the same folder as whatever script you’re typing in (or change the path to match wherever you put it). Note how the <code>data</code> argument in <code>sampling()</code> doesn’t just take a data frame like in <code>brm()</code>. We have to pass Stan specific pieces of data, all of which are specified in the <code>data{}</code> block in the Stan script.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">stan_best <span style="color:#f92672">&lt;-</span> 
  <span style="color:#a6e22e">sampling</span>(<span style="color:#a6e22e">stan_model</span>(<span style="color:#e6db74">&#34;imdb_best.stan&#34;</span>), 
           <span style="color:#75715e"># Make a list of data to send to Stan</span>
           data <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(N <span style="color:#f92672">=</span> <span style="color:#a6e22e">nrow</span>(movies_clean), 
                       n_groups <span style="color:#f92672">=</span> <span style="color:#a6e22e">length</span>(<span style="color:#a6e22e">unique</span>(movies_clean<span style="color:#f92672">$</span>genre)), 
                       group_id <span style="color:#f92672">=</span> movies_clean<span style="color:#f92672">$</span>genre_numeric, 
                       y <span style="color:#f92672">=</span> movies_clean<span style="color:#f92672">$</span>rating),
           chains <span style="color:#f92672">=</span> CHAINS, iter <span style="color:#f92672">=</span> ITER, warmup <span style="color:#f92672">=</span> WARMUP, seed <span style="color:#f92672">=</span> BAYES_SEED)
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">stan_best_tidy <span style="color:#f92672">&lt;-</span> 
  <span style="color:#a6e22e">tidyMCMC</span>(stan_best, conf.int <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>, conf.level <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.95</span>, 
           estimate.method <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;median&#34;</span>, conf.method <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;HPDinterval&#34;</span>)
stan_best_tidy

<span style="color:#75715e">## # A tibble: 8 x 5</span>
<span style="color:#75715e">##   term     estimate std.error conf.low conf.high</span>
<span style="color:#75715e">##   &lt;chr&gt;       &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 mu[1]       5.29     0.108     5.09      5.50 </span>
<span style="color:#75715e">## 2 mu[2]       5.99     0.104     5.79      6.19 </span>
<span style="color:#75715e">## 3 sigma[1]    1.47     0.0838    1.30      1.63 </span>
<span style="color:#75715e">## 4 sigma[2]    1.47     0.0885    1.30      1.65 </span>
<span style="color:#75715e">## 5 nu         29.0     20.1       6.35     76.2  </span>
<span style="color:#75715e">## 6 mu_diff    -0.693    0.147    -0.992    -0.422</span>
<span style="color:#75715e">## 7 cohen_d    -0.573    0.123    -0.825    -0.349</span>
<span style="color:#75715e">## 8 cles        0.343    0.0318    0.280     0.402</span>
</code></pre></div><p>One advantage of running the analysis with raw Stan instead of forcing it into regression form is that we can have Stan calculate all sorts of stuff for us. The averages for both groups get returned (<code>mu[1]</code> and <code>mu[2]</code>), along with <code>mu_diff</code>, so there&rsquo;s no need to combine slope and intercept terms. Also note how the <code>sigma</code> coefficients are already in the right scale. I also (following Kruschke and others) made it so that the Stan code returned information about effect sizes, including <a href="https://en.wikipedia.org/wiki/Effect_size#Cohen's_d">Cohen&rsquo;s d</a>, which is the standardized difference in means, and the <a href="https://janhove.github.io/reporting/2016/11/16/common-language-effect-sizes">common language effect size (CLES)</a>, which is the probability that a rating sampled at random from one group will be greater than a rating sampled from the other group.</p>
<p>Here, the difference in means is the same as all the other methods, but the effect size isn’t terribly huge. According to Cohen’s d, we have a medium effect size, and there’s a 34% chance that we could randomly select an action rating from the comedy distribution.</p>
<h2 id="regression-best-with-priors-on-variables-instead-of-difference">Regression, BEST, with priors on variables instead of difference</h2>
<p><em>(I added this section later)</em></p>
<p>In the Twitter discussion that followed this post, <a href="https://mikedecr.github.io/">Mike DeCrescenzo</a> made a <a href="https://twitter.com/mikedecr/status/1090416939917340672">fascinating point</a> that relying on regression for t-test-like analysis with Bayesianism actually has important theoretical implications.</p>
<p>When specifying a model as <code>y ~ a + bx</code> as we did above with <code>rating ~ genre</code>, the coefficient for genre (<code>b</code>) is actually the difference in means and doesn’t directly reflect the rating itself. In theory, if
we’re thinking about two groups with two different variances, we should model the distribution of each group, not the distribution of the differences in groups. Analyzing the distributions of the two groups separately and <em>then</em> calculating the difference should yield more transparent results. Plus it’s easier to think about setting priors on two variables that were measured in real life (e.g. ratings for comedies and action movies), rather than setting priors on whatever the difference between those looks like.</p>
<p>The raw Stan code above does this correctly by feeding two groups into the model rather than the difference in means. <a href="https://twitter.com/tjmahr/status/1090417050600816641?s=21">TJ Mahr</a> and <a href="https://github.com/ASKurz/Doing-Bayesian-Data-Analysis-in-brms-and-the-tidyverse">Solomon Kurz’s translation of Kruschke’s code into <strong>brms</strong></a> (<a href="https://github.com/ASKurz/Doing-Bayesian-Data-Analysis-in-brms-and-the-tidyverse/blob/master/16.Rmd">see near the bottom of chapter 16</a>) both show that we can do this with <strong>brms</strong> by changing the formula slightly. If we suppress the intercept by running a model like <code>ratiing ~ 0 + genre</code>, <strong>brms</strong> returns coefficients for each of the groups (no more base case!), and these coefficients represent group means.</p>
<p>Here’s an intercept-free version of the <strong>brms</strong>-based BEST regression from earlier. Note how we’re modeling both the rating and the group sigmas without intercepts (<code>rating ~ 0 + genre, sigma ~ 0 + genre</code>), and that we no longer specify a prior for the intercept (if we do, <code>brm()</code> yells at us). Also note that instead of modeling the beta coefficient as a normal distribution centered around zero (since that represented the difference in means), we specify the distribution of action and comedy ratings themselves. Because we’re dealing with actual ratings, we can make them fairly well informed and constrained. For instance, no movie is rated below 1 or above 10, and I’m guessing from past experience looking at ratings on Amazon and IMDB and elsewhere that people tend to inflate their ratings. I’d guess that the distribution of ratings looks something like this: normally distributed with a mean of 6, standard deviation of 2, and truncated at 1 and 10.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Cool extra thing I discovered: the msm library has rtnorm, dtnorm, and family</span>
<span style="color:#75715e"># which let you plot and draw from a truncated normal distribution</span>
<span style="color:#75715e"># msm::rtnorm(1000, mean = 6, sd = 2, lower = 1, upper = 10)</span>
<span style="color:#a6e22e">ggplot</span>(data <span style="color:#f92672">=</span> <span style="color:#a6e22e">tibble</span>(x <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">10</span>)), <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">stat_function</span>(fun <span style="color:#f92672">=</span> dnorm, n <span style="color:#f92672">=</span> <span style="color:#ae81ff">500</span>, args <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(mean <span style="color:#f92672">=</span> <span style="color:#ae81ff">6</span>, sd <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;normal(6, 2); truncated at 1 and 10&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_fancy</span>()
</code></pre></div><figure class="img-75"><img src="dist-ratings-1.png"
         alt="Normal distribution, truncated"/>
</figure>

<p>Now we can run the model like normal:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">brms_uneq_robust_groups <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">brm</span>(
  <span style="color:#a6e22e">bf</span>(rating <span style="color:#f92672">~</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">+</span> genre, sigma <span style="color:#f92672">~</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">+</span> genre), 
  family <span style="color:#f92672">=</span> student,
  data <span style="color:#f92672">=</span> <span style="color:#a6e22e">mutate</span>(movies_clean, genre <span style="color:#f92672">=</span> <span style="color:#a6e22e">fct_rev</span>(genre)),
  prior <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(
    <span style="color:#75715e"># Set group mean prior</span>
    <span style="color:#a6e22e">set_prior</span>(<span style="color:#e6db74">&#34;normal(6, 2)&#34;</span>, class <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;b&#34;</span>, lb <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, ub <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>),
    <span style="color:#75715e"># Ser group variance priors. We keep the less informative cauchy(0, 1).</span>
    <span style="color:#a6e22e">set_prior</span>(<span style="color:#e6db74">&#34;cauchy(0, 1)&#34;</span>, class <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;b&#34;</span>, dpar <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;sigma&#34;</span>),
    <span style="color:#a6e22e">set_prior</span>(<span style="color:#e6db74">&#34;exponential(1.0/29)&#34;</span>, class <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;nu&#34;</span>)),
  chains <span style="color:#f92672">=</span> CHAINS, iter <span style="color:#f92672">=</span> ITER, warmup <span style="color:#f92672">=</span> WARMUP, seed <span style="color:#f92672">=</span> BAYES_SEED,
  file <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;cache/brms_uneq_robust_groups&#34;</span>
)
</code></pre></div><p>We still need to exponentiate the sigma coefficients when we’re done.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">brms_uneq_robust_groups_tidy <span style="color:#f92672">&lt;-</span> 
  <span style="color:#a6e22e">tidyMCMC</span>(brms_uneq_robust_groups, conf.int <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>, conf.level <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.95</span>, 
           estimate.method <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;median&#34;</span>, conf.method <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;HPDinterval&#34;</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># Rescale sigmas</span>
  <span style="color:#a6e22e">mutate_at</span>(<span style="color:#a6e22e">vars</span>(estimate, std.error, conf.low, conf.high),
            <span style="color:#a6e22e">funs</span>(<span style="color:#a6e22e">ifelse</span>(<span style="color:#a6e22e">str_detect</span>(term, <span style="color:#e6db74">&#34;sigma&#34;</span>), <span style="color:#a6e22e">exp</span>(.), .)))
brms_uneq_robust_groups_tidy

<span style="color:#75715e">## # A tibble: 5 x 5</span>
<span style="color:#75715e">##   term                estimate std.error conf.low conf.high</span>
<span style="color:#75715e">##   &lt;chr&gt;                  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 b_genreComedy           5.99     0.109     5.77      6.19</span>
<span style="color:#75715e">## 2 b_genreAction           5.30     0.107     5.09      5.50</span>
<span style="color:#75715e">## 3 b_sigma_genreComedy     1.47     1.06      1.30      1.65</span>
<span style="color:#75715e">## 4 b_sigma_genreAction     1.47     1.06      1.31      1.62</span>
<span style="color:#75715e">## 5 nu                     29.9     28.1       6.00     92.7</span>
</code></pre></div><p>Because we calculated the group means themselves, we need to do an extra few steps to get the difference in means. It’s fairly easy: we extract the posterior samples for each of the groups, subtract them from each other, and then calculate the credible interval.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">brms_uneq_robust_groups_post <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">posterior_samples</span>(brms_uneq_robust_groups) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># We can exponentiate here!</span>
  <span style="color:#a6e22e">mutate_at</span>(<span style="color:#a6e22e">vars</span>(<span style="color:#a6e22e">contains</span>(<span style="color:#e6db74">&#34;sigma&#34;</span>)), <span style="color:#a6e22e">funs</span>(exp)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># For whatever reason, we need to log nu?</span>
  <span style="color:#a6e22e">mutate</span>(nu <span style="color:#f92672">=</span> <span style="color:#a6e22e">log10</span>(nu)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(diff_means <span style="color:#f92672">=</span> b_genreAction <span style="color:#f92672">-</span> b_genreComedy,
         diff_sigma <span style="color:#f92672">=</span> b_sigma_genreAction <span style="color:#f92672">-</span> b_sigma_genreComedy) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># Calculate effect sizes, just for fun</span>
  <span style="color:#a6e22e">mutate</span>(cohen_d <span style="color:#f92672">=</span> diff_means <span style="color:#f92672">/</span> <span style="color:#a6e22e">sqrt</span>((b_sigma_genreAction <span style="color:#f92672">+</span> b_sigma_genreComedy)<span style="color:#f92672">/</span><span style="color:#ae81ff">2</span>),
         cles <span style="color:#f92672">=</span> <span style="color:#a6e22e">dnorm</span>(diff_means <span style="color:#f92672">/</span> <span style="color:#a6e22e">sqrt</span>((b_sigma_genreAction <span style="color:#f92672">+</span> b_sigma_genreComedy)), <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>))

brms_uneq_robust_groups_tidy_fixed <span style="color:#f92672">&lt;-</span> 
  <span style="color:#a6e22e">tidyMCMC</span>(brms_uneq_robust_groups_post, conf.int <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>, conf.level <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.95</span>, 
           estimate.method <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;median&#34;</span>, conf.method <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;HPDinterval&#34;</span>)
brms_uneq_robust_groups_tidy_fixed

<span style="color:#75715e">## # A tibble: 9 x 5</span>
<span style="color:#75715e">##   term                estimate std.error conf.low conf.high</span>
<span style="color:#75715e">##   &lt;chr&gt;                  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 b_genreComedy        5.99       0.109     5.77      6.19 </span>
<span style="color:#75715e">## 2 b_genreAction        5.30       0.107     5.09      5.50 </span>
<span style="color:#75715e">## 3 b_sigma_genreComedy  1.47       0.0882    1.30      1.64 </span>
<span style="color:#75715e">## 4 b_sigma_genreAction  1.47       0.0826    1.31      1.62 </span>
<span style="color:#75715e">## 5 nu                   1.48       0.287     0.963     2.04 </span>
<span style="color:#75715e">## 6 diff_means          -0.690      0.151    -1.01     -0.415</span>
<span style="color:#75715e">## 7 diff_sigma           0.00100    0.111    -0.212     0.217</span>
<span style="color:#75715e">## 8 cohen_d             -0.571      0.126    -0.818    -0.327</span>
<span style="color:#75715e">## 9 cles                 0.368      0.0132    0.341     0.391</span>
</code></pre></div><p>And voila! Difference in means based on priors on individual group means rather than differences in groups!</p>
<h2 id="comparing-all-methods">Comparing all methods</h2>
<p>Holy cow, that’s a lot of code. We can compare the output from all these different methods in a single plot. In this case, since both groups are pretty normally distributed already and there were no outliers, there isn’t much variation at all in the results—all the different methods show essentially the same thing. We can legally interpret the Bayesian results using credible intervals and probabilities; with the classical t-tests, we still have to talk about null hypotheses. But in the end, the results are nearly identical (but that’s definitely not always the case).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Make a bunch of data frames that have three columns: </span>
<span style="color:#75715e"># estimate, conf.low, and conf.high</span>

<span style="color:#75715e"># Extract t-test results</span>
t_test_eq_small <span style="color:#f92672">&lt;-</span> t_test_eq_tidy <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">select</span>(estimate, conf.low, conf.high)

t_test_uneq_small <span style="color:#f92672">&lt;-</span> t_test_uneq_tidy <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">select</span>(estimate, conf.low, conf.high)

<span style="color:#75715e"># Extract simulation results</span>
infer_simulation <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">tibble</span>(estimate <span style="color:#f92672">=</span> diff_means<span style="color:#f92672">$</span>stat,
                           conf.low <span style="color:#f92672">=</span> boostrapped_confint<span style="color:#f92672">$</span>`2.5%`,
                           conf.high <span style="color:#f92672">=</span> boostrapped_confint<span style="color:#f92672">$</span>`97.5%`)

<span style="color:#75715e"># Extract brms regression results</span>
brms_eq_small <span style="color:#f92672">&lt;-</span> brms_eq_tidy <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">filter</span>(term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;b_genreAction&#34;</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">select</span>(estimate, conf.low, conf.high)

brms_uneq_small <span style="color:#f92672">&lt;-</span> brms_uneq_tidy <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">filter</span>(term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;b_genreAction&#34;</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">select</span>(estimate, conf.low, conf.high)

brms_uneq_robust_small <span style="color:#f92672">&lt;-</span> brms_uneq_robust_tidy <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">filter</span>(term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;b_genreAction&#34;</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">select</span>(estimate, conf.low, conf.high)

brms_uneq_robust_groups_small <span style="color:#f92672">&lt;-</span> brms_uneq_robust_groups_tidy_fixed <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">filter</span>(term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;diff_means&#34;</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">select</span>(estimate, conf.low, conf.high)

<span style="color:#75715e"># Extract Stan results</span>
stan_best_small <span style="color:#f92672">&lt;-</span> stan_best_tidy <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">filter</span>(term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;mu_diff&#34;</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">select</span>(estimate, conf.low, conf.high)

<span style="color:#75715e"># Put all these mini dataframes into a list column, then unnest</span>
meta_diffs <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">tribble</span>(
  <span style="color:#f92672">~</span>package, <span style="color:#f92672">~</span>method, <span style="color:#f92672">~</span>results,
  <span style="color:#e6db74">&#34;t-test&#34;</span>, <span style="color:#e6db74">&#34;equal variances&#34;</span>, t_test_eq_small,
  <span style="color:#e6db74">&#34;t-test&#34;</span>, <span style="color:#e6db74">&#34;unequal variances&#34;</span>, t_test_uneq_small,
  <span style="color:#e6db74">&#34;infer&#34;</span>, <span style="color:#e6db74">&#34;simulation&#34;</span>, infer_simulation,
  <span style="color:#e6db74">&#34;brms&#34;</span>, <span style="color:#e6db74">&#34;equal variances&#34;</span>, brms_eq_small,
  <span style="color:#e6db74">&#34;brms&#34;</span>, <span style="color:#e6db74">&#34;unequal variances&#34;</span>, brms_uneq_small,
  <span style="color:#e6db74">&#34;brms&#34;</span>, <span style="color:#e6db74">&#34;BEST&#34;</span>, brms_uneq_robust_small,
  <span style="color:#e6db74">&#34;brms&#34;</span>, <span style="color:#e6db74">&#34;BEST; group means&#34;</span>, brms_uneq_robust_groups_small,
  <span style="color:#e6db74">&#34;Stan&#34;</span>, <span style="color:#e6db74">&#34;BEST&#34;</span>, stan_best_small
) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">unnest</span>(results) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(method <span style="color:#f92672">=</span> <span style="color:#a6e22e">paste0</span>(package, <span style="color:#e6db74">&#34;: &#34;</span>, method)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(method <span style="color:#f92672">=</span> <span style="color:#a6e22e">fct_inorder</span>(method))

<span style="color:#a6e22e">ggplot</span>(meta_diffs, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> estimate, y <span style="color:#f92672">=</span> <span style="color:#a6e22e">fct_rev</span>(method), color <span style="color:#f92672">=</span> package)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_pointrangeh</span>(<span style="color:#a6e22e">aes</span>(xmin <span style="color:#f92672">=</span> conf.low, xmax <span style="color:#f92672">=</span> conf.high), size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_vline</span>(xintercept <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_color_viridis_d</span>(option <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;plasma&#34;</span>, end <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.9</span>, guide <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Mean rating for action movies − mean rating for comedies&#34;</span>,
       y <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>, caption <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Sample of 400 movies from IMDB&#34;</span>,
       title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Comedies get higher ratings than action movies&#34;</span>,
       subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Effect is roughly the same regardless of method used&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">expand_limits</span>(x <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_fancy</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(plot.title <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_text</span>(face <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bold&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#a6e22e">rel</span>(<span style="color:#ae81ff">1.5</span>)))
</code></pre></div><p><img src="compare-everything-1.png" alt="Comparison of all methods"></p>
%!s(MISSING)]]></content>
        <category term="r" />
        <category term="ggplot" />
        <category term="tidyverse" />
        <category term="stan" />
        <category term="bayes" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Tidy text, parts of speech, and unique words in the Qur'an]]></title>
        <link href="https://www.shagunjhaver.com/blog/2018/12/28/tidytext-pos-arabic/" rel="alternate" />
        <published>2018-12-28T00:00:00+00:00</published>
        <updated>2018-12-28T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2018/12/28/tidytext-pos-arabic/</id>
        <summary type="html"><![CDATA[Use R and parts-of-speech tagging to explore the Qur'an in Arabic]]></summary>
        <content type="html"><![CDATA[<p><span class="small">(<a href="https://github.com/andrewheiss/tidytext-pos-arabic">See this notebook on GitHub</a>)</span></p>
<hr>
<p>As I showed in <a href="https://www.andrewheiss.com/blog/2018/12/26/tidytext-pos-john/">a previous blog post</a>, the <a href="https://statsmaths.github.io/cleanNLP/"><strong>cleanNLP</strong> package</a> is a phenomenal frontend for natural language processing in R. Rather than learn the exact syntax for NLP packages like <a href="https://spacy.io/">spaCy</a> or <a href="https://nlp.stanford.edu/">CoreNLP</a>, you can use a consistent set of functions and let <strong>cleanNLP</strong> handle the API translation behind the scenes for you.</p>
<p>Previously, I used spaCy to tag the parts of speech in the Four Gospels to find the most distinctive nouns and verbs in the Gospel of John. Here, I’ll show a quick example of how to use CoreNLP to tag parts of speech in Arabic. CoreNLP is far far far slower than spaCy, but it can handle languages like Arabic and Chinese, which is pretty magical.</p>
<p>Here we go!</p>
<h2 id="load-packages-and-data">Load packages and data</h2>
<p>You’ll need to install the <a href="https://github.com/andrewheiss/quRan">new <strong>quRan</strong> package</a>, which contains two Arabic versions of the Qur’an (with and without vowels) and two English translations (Yusuf Ali and Saheeh International). Install it with <code>remotes::install_github(&quot;andrewheiss/quRan&quot;)</code> or <code>devtools::install_github(&quot;andrewheiss/quRan&quot;)</code>. It’ll be on CRAN once they open up for submissions again in January.</p>
<p>You’ll also need to install <strong>rJava</strong>. <a href="https://twitter.com/andrewheiss/status/1078476157119418370?s=21">Best of luck with this.</a> It is the worst package in the world to install, especially on macOS. The only way I got it to work was to <a href="https://www.snaq.net/software/rjava-macos.php">follow the instructions here</a> (even though at the top of that page it says that recent versions of R/Java no longer require this fix—that is false). Here’s basically what you have to do:</p>
<ul>
<li>Download and install the <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">most recent Java SE 8 JDK from Oracle</a> (I did Java SE 8u191)</li>
<li>Reinstall R</li>
<li>Download and run the <a href="https://gist.github.com/gwinstanley/884d6af25844bdaeb0c81f95bb285768"><code>fix-rJava.sh</code> script</a> listed at <a href="https://www.snaq.net/software/rjava-macos.php">snaq.net</a></li>
<li>Install rJava with <code>install.packages(&quot;rJava&quot;)</code> or <code>install.packages(&quot;rJava&quot;, type = &quot;source&quot;, repos = &quot;http://cran.us.r-project.org&quot;)</code></li>
<li>Hopefully it worked?</li>
</ul>
<p>Finally, you&rsquo;ll need to install <code>cleanNLP</code> and use it to download the CoreNLP parser and all its accompanying languages. Here’s how you do that:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">library</span>(cleanNLP)

<span style="color:#75715e"># This should download everything</span>
<span style="color:#a6e22e">cnlp_download_corenlp</span>()

<span style="color:#75715e"># Check if Arabic is there</span>
<span style="color:#a6e22e">dir</span>(<span style="color:#a6e22e">system.file</span>(<span style="color:#e6db74">&#34;extdata&#34;</span>, package <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;cleanNLP&#34;</span>))
</code></pre></div><p>Phew. If you’ve done all that, we can get started officially. We’ll load these packages:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">library</span>(tidyverse)
<span style="color:#a6e22e">library</span>(cleanNLP)
<span style="color:#a6e22e">library</span>(quRan)
<span style="color:#a6e22e">library</span>(tidytext)
<span style="color:#a6e22e">library</span>(arabicStemR)  <span style="color:#75715e"># Has a list of Arabic stopwords</span>
</code></pre></div><h2 id="part-of-speech-tagging">Part-of-speech tagging</h2>
<p>To start, we’ll initialize the CoreNLP Arabic tagging engine (this takes a few seconds to run):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">cnlp_init_corenlp</span>(language <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ar&#34;</span>)
</code></pre></div><p>Then, for the sake of speed, we’ll extract just the first surah of the Qur’an (<a href="https://en.wikipedia.org/wiki/Al-Fatiha">the Fatihah</a>) and tag it with <code>cnlp_annotate()</code>. We’ll use the version of the Qur’an without vowels because it seems to work better with CoreNLP. <code>cnlp_annotate()</code> does the heavy lifting of annotation and returns an object with the <code>annotate</code> class, which isn’t readily usable.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">fatiha <span style="color:#f92672">&lt;-</span> quran_ar_min <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">filter</span>(surah_id <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>)

fatiha_annotated <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">cnlp_annotate</span>(fatiha,
                                  text_name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;text&#34;</span>, doc_name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ayah_title&#34;</span>)

fatiha_terms <span style="color:#f92672">&lt;-</span> fatiha_annotated<span style="color:#f92672">$</span>token

<span style="color:#a6e22e">head</span>(fatiha_terms)

<span style="color:#75715e">## # A tibble: 6 x 8</span>
<span style="color:#75715e">##   id      sid   tid word   lemma upos  pos     cid</span>
<span style="color:#75715e">##   &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt;</span>
<span style="color:#75715e">## 1 1:1       1     1 بسم    &#34;&#34;    NOUN  NNP       1</span>
<span style="color:#75715e">## 2 1:1       1     2 الله   &#34;&#34;    NOUN  NNP       5</span>
<span style="color:#75715e">## 3 1:1       1     3 الرحمن &#34;&#34;    &#34;&#34;    DTNNP    10</span>
<span style="color:#75715e">## 4 1:1       1     4 الرحيم &#34;&#34;    &#34;&#34;    DTNNP    17</span>
<span style="color:#75715e">## 5 1:2       1     1 الحمد  &#34;&#34;    &#34;&#34;    DTNNP     0</span>
<span style="color:#75715e">## 6 1:2       1     2 لله    &#34;&#34;    NOUN  NN        6</span>
</code></pre></div><p>The output we get here isn’t as fancy as what spaCy returns for English text. We don’t get lemmatized words (base unpluralized, unconjugated words), and the <code>upos</code> column isn’t very rich—it just pulls out verbs and nouns. The <code>pos</code> column, though, seems to have more information in it. This column uses <a href="https://www.ling.upenn.edu/courses/Fall_2003/ling001/penn_treebank_pos.html">codes from the Penn Treebank Project</a>. For instance, “Allah” (الله) in the second row is marked as <code>NNP</code>, which is a singular proper noun, while “al-rahman” (the merciful; الرحمن) in the third row is marked as <code>DTNNP</code>, which is a determiner (<code>DT</code>; ال / “the”) + a singular proper noun (<code>NNP</code>; رحمن / “merciful”).</p>
<p>Now that we know the tagging works, we can tag the entire Qur’an. <em><strong>Warning:</strong></em> CoreNLP is <em>incredibly</em> slow with this much text. It took 2,194 seconds to run this on my newish MacBook Pro (36 minutes!). To speed this up, you can download and load the pre-tagged text:</p>
<ul>
<li><a href="quran_annotated.rds"><code>quran_annotated.rds</code></a></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># THIS TAKES SO LONG</span>
quran_annotated <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">cnlp_annotate</span>(quran_ar_min,
                                 text_name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;text&#34;</span>, doc_name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ayah_title&#34;</span>)

<span style="color:#75715e"># SAVE THIS SO YOU NEVER HAVE TO RUN IT AGAIN</span>
<span style="color:#a6e22e">saveRDS</span>(quran_annotated, <span style="color:#e6db74">&#34;quran_annotated.rds&#34;</span>)
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">quran_annotated <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">readRDS</span>(<span style="color:#e6db74">&#34;data/quran_annotated.rds&#34;</span>)

<span style="color:#75715e"># Convert to data frame</span>
quran_terms <span style="color:#f92672">&lt;-</span> quran_annotated<span style="color:#f92672">$</span>token
</code></pre></div><h2 id="most-common-nouns-and-verbs">Most common nouns and verbs</h2>
<p>Now that we have all the parts of speech for the Qur’an, we can do some quick exploratory data analysis.</p>
<p>For instance, what are the most common nouns in the book? We need to do a little fancy filtering for this to work because the <code>pos</code> column marks all sorts of nouns: singular proper nouns (<code>NNP</code>), plural proper nouns (<code>NNPS</code>), regular nouns with a “the” (<code>DTNN</code>), etc. We need to find all the words with <code>pos</code> that contains <code>NN</code>. The <code>str_detect()</code> function from <strong>stringr</strong> makes this easy.</p>
<p>Additionally, we need to remove common words like في and لهم. The <strong>arabicStemR</strong> package has a list of Arabic stopwords, but it’s buried in a <code>removeStopWords()</code> function. We can extract that list into its own mini data frame, though.</p>
<p>The <a href="https://github.com/davnn/stopwords"><strong>stopwords</strong> package</a> also has a bunch of common Arabic words, accessible through <code>stopwords::stopwords(language = &quot;ar&quot;, source = &quot;misc&quot;))</code>, but it’s not as long of a list as <code>arabicStemR::removeStopWords()</code>, and it includes important Qur’anic words like يوم (day). So we’ll just use the <strong>arabicStemR</strong> words here.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># In order to get the full list of Arabic stopwords, we have to feed</span>
<span style="color:#75715e"># removeStopWorsd some sort of Arabic text, and then access the</span>
<span style="color:#75715e"># `arabicStopwordList` from the resulting object. It&#39;s a roundabout approach,</span>
<span style="color:#75715e"># but it works</span>
arabic_stopwords <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">data_frame</span>(word <span style="color:#f92672">=</span> <span style="color:#a6e22e">removeStopWords</span>(<span style="color:#e6db74">&#34;سلام&#34;</span>)<span style="color:#f92672">$</span>arabicStopwordList)
</code></pre></div><p>(NOTE: It is currently not possible to correctly plot Arabic text (or any right-to-left text) in R on macOS, and <a href="https://stackoverflow.com/questions/22423760/right-to-left-languages-support-in-r-using-mac">it’s been an issue for a long time</a>. I made all these graphs with <a href="https://hub.docker.com/r/rocker/tidyverse/">the tidyverse Docker image</a>. You can also use <code>plotly::ggplotly()</code>)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">top_nouns <span style="color:#f92672">&lt;-</span> quran_terms <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">str_detect</span>(pos, <span style="color:#e6db74">&#34;NN&#34;</span>)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">count</span>(word, sort <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># Get rid of tiny diacritic-like words</span>
  <span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">nchar</span>(word) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#75715e"># Get rid of stopwords</span>
  <span style="color:#a6e22e">anti_join</span>(arabic_stopwords, by <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;word&#34;</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">top_n</span>(<span style="color:#ae81ff">10</span>, n) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(word <span style="color:#f92672">=</span> <span style="color:#a6e22e">fct_inorder</span>(word))

plot_top_nouns <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(top_nouns, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> <span style="color:#a6e22e">fct_rev</span>(word), y <span style="color:#f92672">=</span> n, fill <span style="color:#f92672">=</span> n <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">500</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_col</span>() <span style="color:#f92672">+</span> 
  <span style="color:#a6e22e">scale_fill_manual</span>(values <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;#8F562B&#34;</span>, <span style="color:#e6db74">&#34;#276B42&#34;</span>), guide <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_y_continuous</span>(labels <span style="color:#f92672">=</span> scales<span style="color:#f92672">::</span>comma) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Frequency&#34;</span>, x <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">coord_flip</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_minimal</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(panel.grid.major.y <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>())
plot_top_nouns
</code></pre></div><p><img src="most-common-nouns-1.png" width="95%" style="display: block; margin: auto;" alt="Most common nouns in the Qur'an" /></p>
<p>The most common noun <em>by far</em> is Allah, which makes sense, given that this is the Qur’an. The other common words are “earth,” “by Allah,” “day,” “your Lord,” “thing,” “heavens,” “people,” “book,” and “the Merciful.”</p>
<p>What about the most common verbs? Here we select words that have <code>VB</code> in their <code>pos</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">top_verbs <span style="color:#f92672">&lt;-</span> quran_terms <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">str_detect</span>(pos, <span style="color:#e6db74">&#34;VB&#34;</span>)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">count</span>(word, sort <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># Get rid of tiny diacritic-like words</span>
  <span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">nchar</span>(word) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#75715e"># Get rid of stopwords</span>
  <span style="color:#a6e22e">anti_join</span>(arabic_stopwords, by <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;word&#34;</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">top_n</span>(<span style="color:#ae81ff">10</span>, n) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(word <span style="color:#f92672">=</span> <span style="color:#a6e22e">fct_inorder</span>(word))

word_themes <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">data_frame</span>(theme <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;Saying&#34;</span>, <span style="color:#e6db74">&#34;Other&#34;</span>, <span style="color:#e6db74">&#34;Saying&#34;</span>, <span style="color:#e6db74">&#34;Believing&#34;</span>, 
                                    <span style="color:#e6db74">&#34;Saying&#34;</span>, <span style="color:#e6db74">&#34;Other&#34;</span>, <span style="color:#e6db74">&#34;Other&#34;</span>, <span style="color:#e6db74">&#34;Believing&#34;</span>, 
                                    <span style="color:#e6db74">&#34;Other&#34;</span>, <span style="color:#e6db74">&#34;Other&#34;</span>))
top_verbs_themes <span style="color:#f92672">&lt;-</span> top_verbs <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">bind_cols</span>(word_themes) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(theme <span style="color:#f92672">=</span> <span style="color:#a6e22e">factor</span>(theme, levels <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;Saying&#34;</span>, <span style="color:#e6db74">&#34;Believing&#34;</span>, <span style="color:#e6db74">&#34;Other&#34;</span>)))

plot_top_verbs <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(top_verbs_themes, 
                         <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> <span style="color:#a6e22e">fct_rev</span>(word), y <span style="color:#f92672">=</span> n, fill <span style="color:#f92672">=</span> theme)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_col</span>() <span style="color:#f92672">+</span> 
  <span style="color:#a6e22e">scale_fill_manual</span>(values <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;#2BCAE0&#34;</span>, <span style="color:#e6db74">&#34;#9D2D2A&#34;</span>, <span style="color:#e6db74">&#34;#F5D085&#34;</span>),
                    name <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Frequency&#34;</span>, x <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">coord_flip</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_minimal</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(panel.grid.major.y <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>(),
        legend.position <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bottom&#34;</span>,
        legend.key.size <span style="color:#f92672">=</span> <span style="color:#a6e22e">unit</span>(<span style="color:#ae81ff">0.65</span>, <span style="color:#e6db74">&#34;lines&#34;</span>))
plot_top_verbs
</code></pre></div><p><img src="most-common-verbs-1.png" width="95%" style="display: block; margin: auto;" alt="Most common verbs in the Qur'an" /></p>
<p>Here, the most common verbs fall into two general themes: “saying” and “believing”. The most common “saying” words are literally “he said” and “said”, while the most common “believing” words are “y’all believe” (imperative) and “they disbelieve.” The other words are either forms of “to be” or preposition-like things that the tagger thought were verbs.</p>
<h2 id="most-distinctive-meccan-and-medinan-nouns">Most distinctive Meccan and Medinan nouns</h2>
<p>The Qur’an is a collection of revelations received by Mohammed in two different locations during two different time periods: <a href="https://en.wikipedia.org/wiki/Meccan_surah">Mecca</a> and <a href="https://en.wikipedia.org/wiki/Medinan_surah">Medina</a>. Scholars have categorized the different surahs by their likely provenance, and the <strong>quRan</strong> package helpfully includes a column marking if each surah is Meccan or Medinan.</p>
<p>Typically, Meccan surahs are shorter than Medinan surahs and were revealed earlier during the development of Islam. As a check, lets see what the average surah length is across these two types of surahs:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">period_length <span style="color:#f92672">&lt;-</span> quran_ar_min <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">group_by</span>(revelation_type, surah_id) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">summarize</span>(n_ayaat <span style="color:#f92672">=</span> <span style="color:#a6e22e">n</span>()) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">group_by</span>(revelation_type) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">summarize</span>(avg_ayaat <span style="color:#f92672">=</span> <span style="color:#a6e22e">mean</span>(n_ayaat))
period_length

<span style="color:#75715e">## # A tibble: 2 x 2</span>
<span style="color:#75715e">##   revelation_type avg_ayaat</span>
<span style="color:#75715e">##   &lt;chr&gt;               &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 Meccan               53.6</span>
<span style="color:#75715e">## 2 Medinan              58.0</span>
</code></pre></div><p>Meccan surahs are an average of 4.5 ayahs shorter than Medinan surahs. Cool.</p>
<p>What are the most distinctive nouns and verbs in these two types of surahs? As in <a href="https://www.andrewheiss.com/blog/2018/12/26/tidytext-pos-john/">my previous post about John and the synoptic gospels</a>, we can use the <a href="https://www.andrewheiss.com/blog/2018/12/26/tidytext-pos-john/#most-unique-words">tf-idf score as a measure of word uniqueness</a>. The higher this value, the more unique a word is in a document in a corpus.</p>
<p>We lost lots of the helpful columns from <code>quran_ar_min</code> when tagging the parts of speech, though. All we’re left with from the original data is the <code>ayah_title</code> column, which gives the surah and ayah of each word (e.g. 2:242). To bring the revelation type and other columns back in, we’ll make a smaller dataset and then join that to our tagged data:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">type_lookup <span style="color:#f92672">&lt;-</span> quran_ar_min <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">select</span>(ayah_title, surah_id, surah_title_ar, surah_title_en, ayah, revelation_type)

quran_terms <span style="color:#f92672">&lt;-</span> quran_terms <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">left_join</span>(type_lookup, by <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;id&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ayah_title&#34;</span>))

<span style="color:#a6e22e">glimpse</span>(quran_terms)

<span style="color:#75715e">## Observations: 82,823</span>
<span style="color:#75715e">## Variables: 13</span>
<span style="color:#75715e">## $ id              &lt;chr&gt; &#34;1:1&#34;, &#34;1:1&#34;, &#34;1:1&#34;, &#34;1:1&#34;, &#34;1:2&#34;, &#34;1:2&#34;, &#34;1:2...</span>
<span style="color:#75715e">## $ sid             &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1...</span>
<span style="color:#75715e">## $ tid             &lt;int&gt; 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1, 2, 3, 1, 2, 3...</span>
<span style="color:#75715e">## $ word            &lt;chr&gt; &#34;بسم&#34;, &#34;الله&#34;, &#34;الرحمن&#34;, &#34;الرحيم&#34;, &#34;الحمد&#34;, &#34;ل...</span>
<span style="color:#75715e">## $ lemma           &lt;chr&gt; &#34;&#34;, &#34;&#34;, &#34;&#34;, &#34;&#34;, &#34;&#34;, &#34;&#34;, &#34;&#34;, &#34;&#34;, &#34;&#34;, &#34;&#34;, &#34;&#34;, &#34;&#34;...</span>
<span style="color:#75715e">## $ upos            &lt;chr&gt; &#34;NOUN&#34;, &#34;NOUN&#34;, &#34;&#34;, &#34;&#34;, &#34;&#34;, &#34;NOUN&#34;, &#34;NOUN&#34;, &#34;&#34;...</span>
<span style="color:#75715e">## $ pos             &lt;chr&gt; &#34;NNP&#34;, &#34;NNP&#34;, &#34;DTNNP&#34;, &#34;DTNNP&#34;, &#34;DTNNP&#34;, &#34;NN&#34;,...</span>
<span style="color:#75715e">## $ cid             &lt;int&gt; 1, 5, 10, 17, 0, 6, 10, 13, 0, 7, 0, 5, 9, 0, ...</span>
<span style="color:#75715e">## $ surah_id        &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1...</span>
<span style="color:#75715e">## $ surah_title_ar  &lt;fct&gt; الفاتحة, الفاتحة, الفاتحة, الفاتحة, الفاتحة, ا...</span>
<span style="color:#75715e">## $ surah_title_en  &lt;fct&gt; Al-Faatiha, Al-Faatiha, Al-Faatiha, Al-Faatiha...</span>
<span style="color:#75715e">## $ ayah            &lt;int&gt; 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5...</span>
<span style="color:#75715e">## $ revelation_type &lt;chr&gt; &#34;Meccan&#34;, &#34;Meccan&#34;, &#34;Meccan&#34;, &#34;Meccan&#34;, &#34;Mecca...</span>
</code></pre></div><p>Now we can use the <code>bind_tf_idf()</code> function from <strong>tidytext</strong> to calculate the tf-idf for each word in each type of revelation:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">type_tf_idf <span style="color:#f92672">&lt;-</span> quran_terms <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">count</span>(revelation_type, word, pos, sort <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">bind_tf_idf</span>(word, revelation_type, n) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">arrange</span>(<span style="color:#a6e22e">desc</span>(tf_idf))
</code></pre></div><p>Now we can find the uniquest nouns across the two types of surahs:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">uniquest_nouns <span style="color:#f92672">&lt;-</span> type_tf_idf <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># Only look at nouns</span>
  <span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">str_detect</span>(pos, <span style="color:#e6db74">&#34;NN&#34;</span>)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">group_by</span>(revelation_type) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">top_n</span>(<span style="color:#ae81ff">10</span>, tf_idf) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">ungroup</span>() <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(word <span style="color:#f92672">=</span> <span style="color:#a6e22e">fct_inorder</span>(word))

plot_unique_nouns <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(uniquest_nouns, 
                            <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> <span style="color:#a6e22e">fct_rev</span>(word), y <span style="color:#f92672">=</span> tf_idf, fill <span style="color:#f92672">=</span> revelation_type)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_col</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_fill_manual</span>(values <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;#A02513&#34;</span>, <span style="color:#e6db74">&#34;#274E49&#34;</span>), guide <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;tf-idf&#34;</span>,
       title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Most unique nouns in the Meccan and Medinan surahs&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">coord_flip</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_minimal</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(plot.title <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_text</span>(face <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bold&#34;</span>),
        strip.text <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_text</span>(face <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bold&#34;</span>),
        panel.grid.major.y <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>()) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">facet_wrap</span>(<span style="color:#f92672">~</span> revelation_type, scales <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;free_y&#34;</span>)
plot_unique_nouns
</code></pre></div><p><img src="plot-unique-nouns-1.png" width="95%" style="display: block; margin: auto;" alt="Most unique nouns in the Qur'an" /></p>
<p>This is so cool. The most unique and distinctive Meccan nouns are “Joseph,” “criminals,” “filling,” “wo,” “others,” <a href="https://en.wikipedia.org/wiki/Thamud">“Thamoud,”</a> “right,” “humans,” “liars,” and “hearing.” Most of these make sense: For instance, surah 12, “Yusuf”, is Meccan and is all about the story of Joseph in Egypt.</p>
<p>The most distinctive Medinan nouns, on the other hand, are “liars,” “his prophet,” “borders/limits,” “wisdom,” “Arabs,” “the Messiah,” “houses,” “killing/fighting,” “the Jews,” “the Hajj,” “hypocrites,” and “promised.”</p>
<p>We can also find the uniquest verbs—just use <code>filter(str_detect(pos, &quot;VB&quot;))</code> to select the verbs and do the same thing. I’ll leave that as an exercise to the reader.</p>
<p>Thus, we can do a lot of cool text analysis with Arabic using R!</p>
%!s(MISSING)]]></content>
        <category term="r" />
        <category term="ggplot" />
        <category term="tidyverse" />
        <category term="tidytext" />
        <category term="arabic" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Tidy text, parts of speech, and unique words in the Bible]]></title>
        <link href="https://www.shagunjhaver.com/blog/2018/12/26/tidytext-pos-john/" rel="alternate" />
        <published>2018-12-26T00:00:00+00:00</published>
        <updated>2018-12-26T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2018/12/26/tidytext-pos-john/</id>
        <summary type="html"><![CDATA[Use R and parts-of-speech tagging to explore the distinctive features of John]]></summary>
        <content type="html"><![CDATA[<p><span class="small">(<a href="https://github.com/andrewheiss/tidytext-pos-john">See this notebook on GitHub</a>)</span></p>
<hr>
<p>As part of my goal to read some sort of religiously themed book every day (<a href="https://www.goodreads.com/review/list/2733632-andrew-heiss?shelf=religious">what I’ve read so far</a>), I’ve been reading <a href="https://www.amazon.com/Becoming-Beloved-Disciple-Coming-Through/dp/1462136109/">Eric Huntsman’s new <em>Becoming the Beloved Disciple</em></a>, a close reading of the Gospel of John from an LDS perspective.</p>
<p>Near the beginning, Huntsman discusses several word frequencies that make John unique compared to the <a href="https://en.wikipedia.org/wiki/Synoptic_Gospels">synoptic gospels</a> of Matthew, Mark, and Luke (which all <a href="https://en.wikipedia.org/wiki/Q_source">draw on the same Q source</a>). For instance, Huntsman states that John focuses more on themes of discipleship (since the word “disciple” appears 87 times in John), and on “knowing,” “believing,” and “doing,” which appear more often in John than the other gospels.</p>
<p>In the course of <a href="https://datavizf18.classes.andrewheiss.com/class/11-class/">teaching data visualization</a>, I’ve dabbled in text-based analysis with R, and as a PhD student I wrote a couple of <a href="https://www.andrewheiss.com/research/heiss-rogerson-sources/">now-dormant papers</a> that used cool digital humanities methods to analyze large corpora of text, so my curiosity was piqued. How unique <em>is</em> the word “disciple” in John compared to the synoptic gospels? What are the most unique verbs in John? What words are the most predictive that we’re in John?</p>
<p>Let’s explore with R!</p>
<p>As I started writing this post, I also accidentally created an R package. The complete LDS scriptures are <a href="http://scriptures.nephi.org/">available online for free as an open source database</a>, and I’ve downloaded that CSV file so many times for other little mini projects I’ve done, so I decided to finally just stick it all in a new package so I wouldn’t need to keep downloading the data by hand. <a href="https://github.com/andrewheiss/scriptuRs">So, behold: <strong>scriptuRs</strong></a>. Install it with <code>remotes::install_github(&quot;andrewheiss/scriptuRs&quot;)</code> or <code>devtools::install_github(&quot;andrewheiss/scriptuRs&quot;)</code>. It’ll be on CRAN once they open up for submissions again in January.</p>
<h2 id="load-packages-and-data">Load packages and data</h2>
<p>First, we&rsquo;ll load the necessary packages and data:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">library</span>(tidyverse)  <span style="color:#75715e"># For dplyr, ggplot2, and friends</span>
<span style="color:#a6e22e">library</span>(scriptuRs)  <span style="color:#75715e"># For full text of bible</span>
<span style="color:#a6e22e">library</span>(tidytext)   <span style="color:#75715e"># For analyzing text</span>
<span style="color:#a6e22e">library</span>(cleanNLP)   <span style="color:#75715e"># For fancier natural language processing</span>

<span style="color:#75715e"># Load data</span>
gospels <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">kjv_bible</span>() <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">filter</span>(book_title <span style="color:#f92672">%in%</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;Matthew&#34;</span>, <span style="color:#e6db74">&#34;Mark&#34;</span>, <span style="color:#e6db74">&#34;Luke&#34;</span>, <span style="color:#e6db74">&#34;John&#34;</span>))
</code></pre></div><h2 id="part-of-speech-tagging">Part-of-speech tagging</h2>
<p>Because I want to know what the most unique/common verbs are in John, we need to identify the grammatical purpose of each word. There are incredible algorithms for tagging parts of speech, such as <a href="https://nlp.stanford.edu/">Stanford NLP</a> or <a href="https://spacy.io/">spaCy</a>, and the <a href="https://statsmaths.github.io/cleanNLP/"><strong>cleanNLP</strong> package</a> provides an easy frontend for working with any of them.</p>
<p>Installing <strong>cleanNLP</strong> is trivial—it’s just a normal R package—but connecting it with external NLP algorithms is a little trickier. To install spaCy, which is a really fast tagging library, follow these steps:</p>
<ol>
<li>
<p>Make sure Python is installed.</p>
</li>
<li>
<p>Open Terminal and run this command to install spaCy:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">pip install -U spacy
</code></pre></div></li>
<li>
<p>Run this command to download spaCy’s English algorithms:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">python -m spacy download en
</code></pre></div></li>
</ol>
<p>Then, in RStudio, we can point R to the version of Python that has spaCy installed and tell <strong>cleanNLP</strong> to use spaCy as the NLP backend:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Set up NLP backend</span>
reticulate<span style="color:#f92672">::</span><span style="color:#a6e22e">use_python</span>(<span style="color:#e6db74">&#34;/usr/local/bin/python3&#34;</span>)  <span style="color:#75715e"># I use homebrew python3</span>
<span style="color:#a6e22e">cnlp_init_spacy</span>()  <span style="color:#75715e"># Use spaCy</span>
<span style="color:#75715e"># cnlp_init_udpipe()  # Or use this R-only one without external dependencies</span>
</code></pre></div><p>With all that set up, we can now use <code>cnlp_annotate()</code> to do the actual tagging:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Determine the parts of speech of the &#34;text&#34; column and use &#34;verse_title&#34; as the id</span>
gospels_annotated <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">cnlp_annotate</span>(gospels,
                                   text_name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;text&#34;</span>, doc_name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;verse_title&#34;</span>)
</code></pre></div><p>The resulting object is a large <code>annotation</code>, which is a custom class for <strong>cleanNLP</strong> that‘s not very usable with tidy analysis. Fortunately there&rsquo;s a data frame in the object in the <code>$token</code> slot:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">gospel_terms <span style="color:#f92672">&lt;-</span> gospels_annotated<span style="color:#f92672">$</span>token
<span style="color:#a6e22e">head</span>(gospel_terms)
<span style="color:#75715e">## # A tibble: 6 x 10</span>
<span style="color:#75715e">##   doc_id       sid   tid token     token_with_ws lemma     upos  xpos  tid_source relation</span>
<span style="color:#75715e">##   &lt;chr&gt;      &lt;int&gt; &lt;int&gt; &lt;chr&gt;     &lt;chr&gt;         &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;   </span>
<span style="color:#75715e">## 1 Matthew 1…     1     1 THE       &#34;THE &#34;        the       DET   DT             2 det     </span>
<span style="color:#75715e">## 2 Matthew 1…     1     2 book      &#34;book &#34;       book      NOUN  NN             0 root    </span>
<span style="color:#75715e">## 3 Matthew 1…     1     3 of        &#34;of &#34;         of        ADP   IN             2 prep    </span>
<span style="color:#75715e">## 4 Matthew 1…     1     4 the       &#34;the &#34;        the       DET   DT             5 det     </span>
<span style="color:#75715e">## 5 Matthew 1…     1     5 generati… &#34;generation &#34; generati… NOUN  NN             3 pobj    </span>
<span style="color:#75715e">## 6 Matthew 1…     1     6 of        &#34;of &#34;         of        ADP   IN             5 prep</span>
</code></pre></div><p>I think this is amazing. There are columns for each word, its lemma (an uncapitalized, unconjugated base form of the word), and the part of speech. The <code>upos</code> column shows the universal part of speech code (like <code>NOUN</code>, <code>PROPN</code> (for proper nouns), <code>VERB</code>, etc.), and the <code>pos</code> column shows a more detailed part of speech code, based on the <a href="https://www.ling.upenn.edu/courses/Fall_2003/ling001/penn_treebank_pos.html">Penn Treebank codes</a> (you can get tenses, plurals, types of adverbs, etc.).</p>
<h1 id="most-unique-words">Most unique words</h1>
<p>With the parts of speech tagged, we can now figure out what are the most unique words in John. To do this, we’ll calculate the term-frequency inverse-document-frequency (tf-idf) score for each word. This number is ultimately fairly meaningless in isolation, but it generally measures how unique a word is in a corpus of documents—it is the product of the term frequency and the inverse document frequency:</p>
<p>$$
<code>\begin{aligned} tf(\text{term}) &amp;= \frac{n_{\text{term}}}{n_{\text{terms in document}}} \\ idf(\text{term}) &amp;= \ln{\left(\frac{n_{\text{documents}}}{n_{\text{documents containing term}}}\right)} \\ tf\text{-}idf(\text{term}) &amp;= tf(\text{term}) \times idf(\text{term}) \end{aligned}</code>
$$</p>
<p>To calculate this, first we need to specify what document each of these words is in. We can kind of get at that now, since the <code>id</code> column of <code>gospel_terms</code> contains the book, chapter name, and verse number for each word (i.e. Matthew 1:1), but it&rsquo;d be nice to have a column called <code>book_title</code>. We had that column in the original <code>gospels</code> data, but we lost it after we ran the parts of speech tagging. We&rsquo;ll create a smaller dataset with the chapter, book, and verse information, and then join that to our tagged data:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">gospels_lookup <span style="color:#f92672">&lt;-</span> gospels <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">select</span>(verse_title, book_title, chapter_number, verse_number)

gospel_terms <span style="color:#f92672">&lt;-</span> gospel_terms <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">left_join</span>(gospels_lookup, by <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;doc_id&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;verse_title&#34;</span>))

<span style="color:#a6e22e">glimpse</span>(gospel_terms)
<span style="color:#75715e">## Rows: 98,555</span>
<span style="color:#75715e">## Columns: 13</span>
<span style="color:#75715e">## $ doc_id         &lt;chr&gt; &#34;Matthew 1:1&#34;, &#34;Matthew 1:1&#34;, &#34;Matthew 1:1&#34;, &#34;Matthew 1:1&#34;, &#34;Mat…</span>
<span style="color:#75715e">## $ sid            &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…</span>
<span style="color:#75715e">## $ tid            &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1…</span>
<span style="color:#75715e">## $ token          &lt;chr&gt; &#34;THE&#34;, &#34;book&#34;, &#34;of&#34;, &#34;the&#34;, &#34;generation&#34;, &#34;of&#34;, &#34;Jesus&#34;, &#34;Christ…</span>
<span style="color:#75715e">## $ token_with_ws  &lt;chr&gt; &#34;THE &#34;, &#34;book &#34;, &#34;of &#34;, &#34;the &#34;, &#34;generation &#34;, &#34;of &#34;, &#34;Jesus &#34;, …</span>
<span style="color:#75715e">## $ lemma          &lt;chr&gt; &#34;the&#34;, &#34;book&#34;, &#34;of&#34;, &#34;the&#34;, &#34;generation&#34;, &#34;of&#34;, &#34;Jesus&#34;, &#34;Christ…</span>
<span style="color:#75715e">## $ upos           &lt;chr&gt; &#34;DET&#34;, &#34;NOUN&#34;, &#34;ADP&#34;, &#34;DET&#34;, &#34;NOUN&#34;, &#34;ADP&#34;, &#34;PROPN&#34;, &#34;PROPN&#34;, &#34;P…</span>
<span style="color:#75715e">## $ xpos           &lt;chr&gt; &#34;DT&#34;, &#34;NN&#34;, &#34;IN&#34;, &#34;DT&#34;, &#34;NN&#34;, &#34;IN&#34;, &#34;NNP&#34;, &#34;NNP&#34;, &#34;,&#34;, &#34;DT&#34;, &#34;NN…</span>
<span style="color:#75715e">## $ tid_source     &lt;int&gt; 2, 0, 2, 5, 3, 5, 8, 6, 8, 11, 8, 11, 12, 13, 16, 13, 16, 17, 2,…</span>
<span style="color:#75715e">## $ relation       &lt;chr&gt; &#34;det&#34;, &#34;root&#34;, &#34;prep&#34;, &#34;det&#34;, &#34;pobj&#34;, &#34;prep&#34;, &#34;compound&#34;, &#34;pobj&#34;…</span>
<span style="color:#75715e">## $ book_title     &lt;chr&gt; &#34;Matthew&#34;, &#34;Matthew&#34;, &#34;Matthew&#34;, &#34;Matthew&#34;, &#34;Matthew&#34;, &#34;Matthew&#34;…</span>
<span style="color:#75715e">## $ chapter_number &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…</span>
<span style="color:#75715e">## $ verse_number   &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2…</span>
</code></pre></div><p>Now, we can use the <code>bind_tf_idf()</code> function from <strong>tidytext</strong> to calculate the tf-idf for each lemma in each book:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Add the tf-idf for these words</span>
gospel_tf_idf <span style="color:#f92672">&lt;-</span> gospel_terms <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(upos <span style="color:#f92672">=</span> <span style="color:#a6e22e">ifelse</span>(lemma <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;abideth&#34;</span>, <span style="color:#e6db74">&#34;VERB&#34;</span>, upos)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(lemma_upos <span style="color:#f92672">=</span> <span style="color:#a6e22e">paste0</span>(lemma, <span style="color:#e6db74">&#34;_&#34;</span>, upos)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">count</span>(book_title, lemma_upos, sort <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">bind_tf_idf</span>(lemma_upos, book_title, n) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">separate</span>(lemma_upos, into <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;lemma&#34;</span>, <span style="color:#e6db74">&#34;upos&#34;</span>), sep <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;_&#34;</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">arrange</span>(<span style="color:#a6e22e">desc</span>(tf_idf))
</code></pre></div><p>So, what are the most unique (i.e. the highest tf-idf) nouns in John?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">uniquest_nouns_in_john <span style="color:#f92672">&lt;-</span> gospel_tf_idf <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">filter</span>(upos <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;NOUN&#34;</span>, book_title <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;John&#34;</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(rank <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#a6e22e">n</span>())

uniquest_nouns_in_john <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">top_n</span>(<span style="color:#ae81ff">10</span>, tf_idf) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(lemma <span style="color:#f92672">=</span> <span style="color:#a6e22e">fct_inorder</span>(lemma)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">ggplot</span>(<span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> <span style="color:#a6e22e">fct_rev</span>(lemma), y <span style="color:#f92672">=</span> tf_idf)) <span style="color:#f92672">+</span> 
  <span style="color:#a6e22e">geom_col</span>(fill <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#b24b70&#34;</span>) <span style="color:#f92672">+</span> 
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;tf-idf&#34;</span>,
       title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Most unique nouns in John&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">coord_flip</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_y_continuous</span>(expand <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_minimal</span>(base_family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;IBM Plex Sans&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(plot.title <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_text</span>(face <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bold&#34;</span>),
        panel.grid.major.y <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>())
</code></pre></div><p><img src="/blog/2018/12/26/tidytext-pos-john/index_files/figure-html/unique-nouns-1.png" width="95%" style="display: block; margin: auto;" /></p>
<p>The most common nouns are words like &ldquo;record,&rdquo; &ldquo;clay,&rdquo; and &ldquo;pool&rdquo;. &ldquo;Disciple&rdquo; isn&rsquo;t in the top 10. Nor does it even have a positive number! It appears 79 times, but it&rsquo;s the 244th most unique noun in John (out of 463 words!), which means it&rsquo;s not that uncommon compared to the other gospels:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">uniquest_nouns_in_john <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">filter</span>(lemma <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;disciple&#34;</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">select</span>(<span style="color:#f92672">-</span>tf, <span style="color:#f92672">-</span>idf)
<span style="color:#75715e">## # A tibble: 1 x 6</span>
<span style="color:#75715e">##   book_title lemma    upos      n tf_idf  rank</span>
<span style="color:#75715e">##   &lt;chr&gt;      &lt;chr&gt;    &lt;chr&gt; &lt;int&gt;  &lt;dbl&gt; &lt;int&gt;</span>
<span style="color:#75715e">## 1 John       disciple NOUN     79      0   244</span>
</code></pre></div><p>In fact, the other gospels all use it fairly frequently too. John does indeed use it the most, but just a tiny bit more than Matthew:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">gospel_tf_idf <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">filter</span>(lemma <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;disciple&#34;</span>, upos <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;NOUN&#34;</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">select</span>(<span style="color:#f92672">-</span>tf, <span style="color:#f92672">-</span>idf)
<span style="color:#75715e">## # A tibble: 4 x 5</span>
<span style="color:#75715e">##   book_title lemma    upos      n tf_idf</span>
<span style="color:#75715e">##   &lt;chr&gt;      &lt;chr&gt;    &lt;chr&gt; &lt;int&gt;  &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 John       disciple NOUN     79      0</span>
<span style="color:#75715e">## 2 Matthew    disciple NOUN     74      0</span>
<span style="color:#75715e">## 3 Mark       disciple NOUN     46      0</span>
<span style="color:#75715e">## 4 Luke       disciple NOUN     39      0</span>
</code></pre></div><p>What about the verbs? What are the most distinctive verbs in John?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">uniquest_verbs_in_john <span style="color:#f92672">&lt;-</span> gospel_tf_idf <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">filter</span>(upos <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;VERB&#34;</span>, book_title <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;John&#34;</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(rank <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#a6e22e">n</span>())

uniquest_verbs_in_john <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">top_n</span>(<span style="color:#ae81ff">10</span>, tf_idf) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(lemma <span style="color:#f92672">=</span> <span style="color:#a6e22e">fct_inorder</span>(lemma)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">ggplot</span>(<span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> <span style="color:#a6e22e">fct_rev</span>(lemma), y <span style="color:#f92672">=</span> tf_idf)) <span style="color:#f92672">+</span> 
  <span style="color:#a6e22e">geom_col</span>(fill <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#8f4bbf&#34;</span>) <span style="color:#f92672">+</span> 
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;tf-idf&#34;</span>,
       title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Most unique verbs in John&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">coord_flip</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_y_continuous</span>(expand <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_minimal</span>(base_family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;IBM Plex Sans&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(plot.title <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_text</span>(face <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bold&#34;</span>),
        panel.grid.major.y <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>())
</code></pre></div><p><img src="/blog/2018/12/26/tidytext-pos-john/index_files/figure-html/unique-verbs-1.png" width="95%" style="display: block; margin: auto;" /></p>
<p>Here Huntsman is on to something. He argues that the frequency of the word &ldquo;abide&rdquo; represents John&rsquo;s emphasis on bridging the gap between what we should <em>do</em> and what we should <em>be</em>. That is, &ldquo;to abide&rdquo; means staying with someone, or maintaining an ongoing relationship, but also persisting and remaining in a way of life. If John emphasizes discipleship, it makes sense that he&rsquo;d emphasize the need to abide—or continue—in discipleship. And indeed, it is one of the most unique verbs in John. Neat.</p>
<h2 id="most-predictive-words">Most predictive words</h2>
<p>Beyond just counting words and calculating tf-idf scores, we can use fancier statistical and machine learning techniques to discover which words are the most predictive of being from John. If we stumbled on a random New Testament verse, what words would tip us off that the verse might be from John? If &ldquo;disciple&rdquo; isn&rsquo;t that unique of a word for John, what words are?</p>
<p>To do this, we&rsquo;ll adapt a <a href="https://juliasilge.com/blog/tidy-text-classification/">cool new blog post by Julia Silge</a> and use a logistic regression model with <a href="https://en.wikipedia.org/wiki/Lasso_(statistics)">LASSO regularization</a> to categorize John vs. the synoptic gospels. LASSOing gives us a measure of variable importance and lets us see which words are most important for predicting if text comes from John or not.</p>
<p>Before running the model with <a href="https://web.stanford.edu/~hastie/glmnet/glmnet_alpha.html"><strong>glmnet</strong>&rsquo;s</a> <code>cv.glmnet()</code>, we have to restructure our tidy data into a sparse matrix. Following Julia&rsquo;s approach, we&rsquo;ll also split our data into a training set and a test set:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">library</span>(rsample)

<span style="color:#75715e"># Make this random split reproducible</span>
<span style="color:#a6e22e">set.seed</span>(<span style="color:#ae81ff">1234</span>)

verses_split <span style="color:#f92672">&lt;-</span> gospels <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">select</span>(id <span style="color:#f92672">=</span> verse_title) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">initial_split</span>(prop <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">/</span><span style="color:#ae81ff">4</span>)

train_data <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">training</span>(verses_split)
test_data <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">testing</span>(verses_split)
</code></pre></div><p>Now we can make a spare matrix based on the training set:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">sparse_words <span style="color:#f92672">&lt;-</span> gospel_terms <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">count</span>(doc_id, lemma) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">inner_join</span>(train_data, by <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;doc_id&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;id&#34;</span>)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">cast_sparse</span>(doc_id, lemma, n)

<span style="color:#a6e22e">dim</span>(sparse_words)
<span style="color:#75715e">## [1] 2835 2590</span>
</code></pre></div><p>We have 2,835 rows and 2,590 columns to work with. Phew.</p>
<p>We need an outcome variable here, too, or a binary variable indicating if the verse is in John or one of the synoptic gospels.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">verses_books <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">tibble</span>(verse_title <span style="color:#f92672">=</span> <span style="color:#a6e22e">rownames</span>(sparse_words)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">left_join</span>(gospels <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">select</span>(verse_title, book_title), by <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;verse_title&#34;</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(book_type <span style="color:#f92672">=</span> <span style="color:#a6e22e">ifelse</span>(<span style="color:#a6e22e">str_detect</span>(book_title, <span style="color:#e6db74">&#34;John&#34;</span>), <span style="color:#e6db74">&#34;John&#34;</span>, <span style="color:#e6db74">&#34;Synoptic gospels&#34;</span>)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(is_john <span style="color:#f92672">=</span> book_type <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;John&#34;</span>)
</code></pre></div><p>We can finally run the model now with the <code>sparse_words</code> matrix and the binary <code>verses_books$is_john</code> variable:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">library</span>(glmnet)
<span style="color:#a6e22e">library</span>(doMC)
<span style="color:#a6e22e">registerDoMC</span>(cores <span style="color:#f92672">=</span> parallel<span style="color:#f92672">::</span><span style="color:#a6e22e">detectCores</span>())

model <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">cv.glmnet</span>(sparse_words, verses_books<span style="color:#f92672">$</span>is_john,
                   family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;binomial&#34;</span>,
                   parallel <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>, keep <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>
)
</code></pre></div><p>We can then extract the coefficients that have the highest lambda within 1 standard error of the minimum (<a href="https://stats.stackexchange.com/a/77549/3025"><code>glmnet</code> goes through a sequence of possible lambda values for each iteration of the model</a>—we want the one with the best, or where it&rsquo;s big, but still close to the minimum).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">library</span>(glmnet)
<span style="color:#a6e22e">library</span>(broom)

coefs <span style="color:#f92672">&lt;-</span> model<span style="color:#f92672">$</span>glmnet.fit <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">tidy</span>() <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">filter</span>(lambda <span style="color:#f92672">==</span> model<span style="color:#f92672">$</span>lambda.1se) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">filter</span>(term <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;(Intercept)&#34;</span>)

top_coefs <span style="color:#f92672">&lt;-</span> coefs <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">group_by</span>(estimate <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">top_n</span>(<span style="color:#ae81ff">10</span>, <span style="color:#a6e22e">abs</span>(estimate)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">ungroup</span>() <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">arrange</span>(<span style="color:#a6e22e">desc</span>(estimate)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(term <span style="color:#f92672">=</span> <span style="color:#a6e22e">fct_inorder</span>(term)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(prob_type <span style="color:#f92672">=</span> <span style="color:#a6e22e">ifelse</span>(estimate <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>, <span style="color:#e6db74">&#34;Increases likelihood of being from John&#34;</span>, 
                            <span style="color:#e6db74">&#34;Increases likelihood of being from Synoptic Gospels&#34;</span>),
         prob_type <span style="color:#f92672">=</span> <span style="color:#a6e22e">fct_inorder</span>(prob_type))

top_coefs <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">ggplot</span>(<span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> <span style="color:#a6e22e">fct_rev</span>(term), y <span style="color:#f92672">=</span> estimate, fill <span style="color:#f92672">=</span> prob_type)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_col</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_fill_manual</span>(values <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;#6d80b0&#34;</span>, <span style="color:#e6db74">&#34;#6c9d53&#34;</span>), name <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Coefficient&#34;</span>,
       title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Words that change the likelihood of being in John&#34;</span>,
       subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;A verse with “changer” in it is probably from John&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_minimal</span>(base_family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;IBM Plex Sans&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(plot.title <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_text</span>(face <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bold&#34;</span>),
        legend.position <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;top&#34;</span>,
        legend.justification <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;left&#34;</span>,
        legend.box.margin <span style="color:#f92672">=</span> <span style="color:#a6e22e">margin</span>(l <span style="color:#f92672">=</span> <span style="color:#ae81ff">-0.75</span>, t <span style="color:#f92672">=</span> <span style="color:#ae81ff">-0.25</span>, unit <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;lines&#34;</span>),
        legend.key.size <span style="color:#f92672">=</span> <span style="color:#a6e22e">unit</span>(<span style="color:#ae81ff">0.65</span>, <span style="color:#e6db74">&#34;lines&#34;</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">coord_flip</span>()
</code></pre></div><p><img src="/blog/2018/12/26/tidytext-pos-john/index_files/figure-html/lasso-coefs-1.png" width="95%" style="display: block; margin: auto;" /></p>
<p>For whatever reason, &ldquo;changer&rdquo; is a very John-like word (even though <a href="https://en.wikipedia.org/wiki/Cleansing_of_the_Temple">the incident of the money changers at the temple appears in all four gospels</a>), and nouns like &ldquo;manna&rdquo; and &ldquo;leg&rdquo; are also very John-like. Meanwhile, words like &ldquo;parable&rdquo; and &ldquo;Herodians&rdquo; seem to be more Synoptic-like.</p>
<p>Where do words like &ldquo;abide&rdquo; or &ldquo;disciple&rdquo; fit in this model?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">coefs <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">filter</span>(term <span style="color:#f92672">%in%</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;disciple&#34;</span>, <span style="color:#e6db74">&#34;abideth&#34;</span>))
<span style="color:#75715e">## # A tibble: 2 x 5</span>
<span style="color:#75715e">##   term      step estimate  lambda dev.ratio</span>
<span style="color:#75715e">##   &lt;chr&gt;    &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 disciple    29    0.582 0.00646     0.617</span>
<span style="color:#75715e">## 2 abideth     29    2.78  0.00646     0.617</span>
</code></pre></div><p>The coefficient for &ldquo;disciple&rdquo; is positive, but not really that high—just ≈0.6—so it doesn&rsquo;t boost the likelihood that we&rsquo;re in John. &ldquo;Abideth,&rdquo; though, has a fairly strong effect, just as we found with the tf-idf.</p>
<p>Neat!</p>
%!s(MISSING)]]></content>
        <category term="r" />
        <category term="ggplot" />
        <category term="tidyverse" />
        <category term="tidytext" />
    </entry>
    <entry>
        <title type="html"><![CDATA[The academic job search finally comes to an end]]></title>
        <link href="https://www.shagunjhaver.com/blog/2018/12/17/academic-job-market-visualized/" rel="alternate" />
        <published>2018-12-17T00:00:00+00:00</published>
        <updated>2018-12-17T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2018/12/17/academic-job-market-visualized/</id>
        <summary type="html"><![CDATA[Explore 2.5 years of applying for academic jobs with fancy data visualization]]></summary>
        <content type="html"><![CDATA[<p>I am <em>so beyond thrilled</em> to announce that I&rsquo;ll be joining the <a href="https://aysps.gsu.edu/">Andrew Young School of Policy Studies</a> at <a href="https://www.gsu.edu/">Georgia State University</a> in Fall 2019 as an assistant professor in the <a href="https://aysps.gsu.edu/public-management-policy/">Department of Public Management and Policy</a>. I&rsquo;ll be teaching classes in statistics/data science, economics, and nonprofit management in beautiful downtown Atlanta, and we&rsquo;ll be moving back to the South. I am so so excited about this! The Andrew Young School does amazing work in public policy, administration, and nonprofit management, and I&rsquo;ll be working with phenomenal colleagues and students. I still can&rsquo;t believe this is real.</p>
<p>Part of the reason I&rsquo;m in shock is that for the past 2.5 years, I&rsquo;ve been ripped apart and destroyed by the academic job market. This job market is a horrendous beast of a thing. It is soul-crushing and dream-shattering and a constant stream of rejection. While facing rejection <a href="https://www.nytimes.com/2018/12/14/opinion/sunday/writers-rejections-resolutions.html">is good and builds grit etc., etc.</a>, in reality it&rsquo;s awful.</p>
<p>In an effort to stay On Brand™, here are a bunch of fancy graphs and numbers showing what it&rsquo;s been like to apply for nearly 200 jobs since August 2016. Unlike many of my other blog posts, I haven&rsquo;t included any of the code to generate these. <a href="https://github.com/andrewheiss/academic-job-market/blob/master/README.Rmd">That code</a> is all available in a <a href="https://github.com/andrewheiss/academic-job-market">GitHub repository</a> (see <code>README.Rmd</code>), along with the <a href="https://github.com/andrewheiss/academic-job-market/blob/master/data/jobs_clean.csv">raw data</a> that I&rsquo;ve collected over the past few years (for the morbidly curious).</p>
<h2 id="application-count-and-outcomes">Application count and outcomes</h2>
<p>Between August 31, 2016 and November 18, 2018, I applied for 186 tenure-track and non-tenure-track academic jobs at R1 schools, liberal arts colleges, and teaching-focused public universities. I was offered one two-year visiting assistant professorship at the <a href="https://marriottschool.byu.edu/mpa/">Romney Institute of Public Service and Ethics</a> at BYU (where I completed my MPA before getting my PhD), and one tenure-track assistant professorship at the Andrew Young School at Georgia State University.</p>
<p>That&rsquo;s it. That&rsquo;s a 98.9% rejection rate. Here&rsquo;s what the weight of rejection looks like:</p>
<p><img src="/blog/2018/12/17/academic-job-market-visualized/index_files/figure-html/plot-waffle-total-1.png" width="2100" style="display: block; margin: auto;" /></p>
<p>Not every one of these was an outright rejection. The typical academic search goes through a few stages:</p>
<ol>
<li>Screen hundreds of initial applications</li>
<li>Skype or call 10-15 possible candidates</li>
<li>Fly out ≈3 candidates</li>
<li>Extend offer to 1 candidate</li>
</ol>
<p>I made it through different stages of this process with many of the schools I applied to. In total, I had 27 Skype interviews and 9 flyouts over three years. This waffle plot divides up each of the applications by their final outcome (i.e. Skype, flyout, offer), discipline, and year. smh polisci.</p>
<p><img src="/blog/2018/12/17/academic-job-market-visualized/index_files/figure-html/iron-waffles-1.png" width="2100" style="display: block; margin: auto;" /></p>
<p>I received my PhD in public policy, with an emphasis in political science and international relations. Many faculty at Duke emphasized that having a dual emphasis like this would be great for the academic job market—because I&rsquo;m trained in both fields, I could theoretically fit comfortably in a traditional political science department or in a public policy or administration department/school. I applied to positions in both disciplines, but I was <em>far</em> less successful in getting any traction in the political science world (even though I attend and present research at ISA and APSA pretty regularly and <a href="https://www.andrewheiss.com/research/heiss-kelley-2017/">I have published in the Journal of Politics</a> ¯\_(ツ)_/¯).</p>
<p>My first year on the market, I was split 50/50 between public administration/policy jobs and political science jobs. During my second year, because I had very little response from political science I focused almost entirely on public admin/policy. During this most recent cycle, out of desperation I went back to applying to political science jobs in international relations and comparative politics. In the chart below, my proportion of public admin/policy jobs is actually the lowest this year, but that&rsquo;s because (1) political science deadlines are way earlier, and (2) I essentially quit applying for jobs. This stopping was both because <a href="https://www.heissatopia.com/2018/11/thursday-night-and-grandmas-passing.html">my mom died suddenly</a>, which completely threw me off the rhythm of the market (i.e. I stopped applying completely until one school graciously e-mailed me to remind me to apply), and because I got an amazing job offer. I was on track for another 50/50 year, though.</p>
<p><img src="/blog/2018/12/17/academic-job-market-visualized/index_files/figure-html/discipline-props-1.png" width="2100" style="display: block; margin: auto;" /></p>
<h2 id="application-timing">Application timing</h2>
<p>Applying for jobs is also a grueling process. Here&rsquo;s what a typical job needs for a complete application:</p>
<ul>
<li>CV</li>
<li>Cover letter tailored for the job, department, and university</li>
<li>Teaching statement and/or research statement and/or diversity statement (and for a few religious schools I applied to, a belief statement)</li>
<li>Teaching evaluations and/or sample syllabuses</li>
<li>Transcripts from graduate school</li>
<li>Writing sample(s)</li>
<li>3–5 letters of recommendation</li>
</ul>
<p>Fortunately, once I wrote a version of each of these things, applying to individual schools didn&rsquo;t take too terribly long. I spent August–September 2016 crafting my teaching/research/diversity statements and general cover letter, polishing my writing samples, and collecting letters of recommendation, and I edited and improved them over the whole 2.5-year process.</p>
<p>Writing cover letters generally took ≈45 minutes per school to scour each department&rsquo;s website for relevant programs, centers, faculty, and classes. On some of the days where I sent out 5+ applications, I occasionally forgot to change the recipient address in the cover letter, or writing “I am applying for job X at university Y” while leaving “University Z” from the previous application. This was always horrifying, but I got Skype interviews out of a couple of those, so I think search committees tend to be forgiving about those kinds of mistakes.</p>
<p>This plot shows my pace of applying for jobs. Each dot is a job; each column is a week. The fall semester has been the most intense for sending out applications. In 2016–17, my record was 16 jobs in one week; in 2017–18 it was only 6 (since I severely cut back on political science jobs); and in 2018–19, I applied for 30 jobs in one week. With a rough average of 1 hour per application, <a href="https://twitter.com/andrewheiss/status/1046608912617680896">that week was particularly intense</a>.</p>
<p><img src="/blog/2018/12/17/academic-job-market-visualized/index_files/figure-html/dotplot-faux-facet-1.png" width="1800" style="display: block; margin: auto;" /></p>
<p>So many dots.</p>
<h2 id="geography">Geography</h2>
<p>Finally, another unique aspect of the academic job market is the fact that you rarely have control over where you end up. If you want to live in a specific state or city, you have to make sure a university there has an open position in your exact field (and then you have to compete against 300+ other applicants, so lolz to that). Friends, family, and neighbors would always suggest that I send my CV to nearby schools because &ldquo;surely they&rsquo;ll find a place for you—you&rsquo;re smart!&rdquo;. But that&rsquo;s not how academia works.</p>
<p>I applied to positions in 12 different countries, with most in the United States.</p>
<p><img src="/blog/2018/12/17/academic-job-market-visualized/index_files/figure-html/countries-bar-1.png" width="2100" style="display: block; margin: auto;" /></p>
<p>Here&rsquo;s a world map showing the locations of all these jobs across the three years. It&rsquo;s really hard to see any patterns beyond the fact that I only applied for jobs in the Gulf in 2016–17, I guess?</p>
<p><img src="/blog/2018/12/17/academic-job-market-visualized/index_files/figure-html/countries-map-cycle-1.png" width="2100" style="display: block; margin: auto;" /></p>
<p>Since the bulk of my applications went to schools in the US and Canada, here&rsquo;s a more zoomed-in map. Because there are occasionally clusters of schools—particularly along the east coast—I put a 15-mile radius around each school, and if any of those buffer zones overlapped, I increased the point size to show how many schools are in that shared area. <a href="https://github.com/andrewheiss/academic-job-market/blob/master/README.Rmd#L441">The code for this is actually pretty magical and ingenius</a>—it&rsquo;s worth it to <a href="https://github.com/andrewheiss/academic-job-market/blob/master/README.Rmd#L441">check out the R code</a> for this post just for those calculations :).</p>
<p>I applied to schools in 36 states + DC. I didn&rsquo;t apply to any schools in Alaska, Delaware, Iowa, Louisiana, Mississippi, Montana, North Dakota, Nebraska, New Hampshire, Nevada, Rhode Island, South Dakota, Vermont, West Virginia, or Wyoming.</p>
<p><img src="/blog/2018/12/17/academic-job-market-visualized/index_files/figure-html/map-blobs-1.png" width="2400" style="display: block; margin: auto;" /></p>
<hr>
<p>Here&rsquo;s to being done with the job search! Off to Georgia State next year!</p>
%!s(MISSING)]]></content>
        <category term="r" />
        <category term="ggplot" />
        <category term="dataviz" />
        <category term="jobs" />
    </entry>
    <entry>
        <title type="html"><![CDATA[How to test any hypothesis with the infer package]]></title>
        <link href="https://www.shagunjhaver.com/blog/2018/12/05/test-any-hypothesis/" rel="alternate" />
        <published>2018-12-05T00:00:00+00:00</published>
        <updated>2018-12-05T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2018/12/05/test-any-hypothesis/</id>
        <summary type="html"><![CDATA[Use the infer package in R to test any statistical hypothesis through simulation.]]></summary>
        <content type="html"><![CDATA[<p>This semester, I used the new <a href="https://moderndive.com/">ModernDive textbook</a> to teach <a href="https://statsf18.classes.andrewheiss.com/">introductory statistics for executive MPA students at BYU</a>, and it&rsquo;s been absolutely delightful. The book&rsquo;s approach to teaching statistics follows a growing trend (led by <a href="http://www2.stat.duke.edu/~mc301/">Mine Çetinkaya-Rundel</a>, <a href="https://alison.rbind.io/">Alison Hill</a>, and others) of emphasizing data and simulations instead of classical probability theory and complex statistical tests.</p>
<p>Where this approach <em>really</em> shines is with hypothesis testing. This is the core of inferential statistics, but it&rsquo;s really hard for students to wrap their head around how to reject null hypotheses and interpret p-values. <a href="https://fivethirtyeight.com/features/not-even-scientists-can-easily-explain-p-values/">Even seasoned scientists struggle with explaining what p-values mean</a>. This stuff is hard.</p>
<p>ModernDive borrows from Allen Downey&rsquo;s philosophy that <a href="http://allendowney.blogspot.com/2016/06/there-is-still-only-one-test.html">there is only one statistical test</a> and that at their core, all statistical tests (be they t-tests, chi-squared tests, signed Wilcoxon rank tests, etc.) follow the same universal pattern:</p>
<ul>
<li><strong>Step 1: Calculate a sample statistic, or <code>\(\delta\)</code>.</strong> This is the main measure you care about: the difference in means, the average, the median, the proportion, the difference in proportions, the chi-squared value, etc.</li>
<li><strong>Step 2: Use simulation to invent a world where <code>\(\delta\)</code> is null.</strong> Simulate what the world would look like if there was no difference between two groups, or if there was no difference in proportions, or where the average value is a specific number.</li>
<li><strong>Step 3: Look at <code>\(\delta\)</code> in the null world.</strong> Put the sample statistic in the null world and see if it fits well.</li>
<li><strong>Step 4: Calculate the probability that <code>\(\delta\)</code> could exist in null world.</strong> This is the p-value, or the probability that you&rsquo;d see a <code>\(\delta\)</code> at least that high in a world where there&rsquo;s no difference.</li>
<li><strong>Step 5: Decide if <code>\(\delta\)</code> is statistically significant.</strong> Choose some evidentiary standard or threshold for deciding if there&rsquo;s sufficient proof for rejecting the null world. Standard thresholds (from least to most rigorous) are 0.1, 0.05, and 0.01.</li>
</ul>
<p>That&rsquo;s all. Five steps. No need to follow <a href="https://www.google.com/search?q=statistical+test+flow+chart">complicated flowcharts to select the best and most appropriate statistical test</a>. No need to run a bunch of tests to see if you need to pool variances or leave them separate. Calculate a number, simulate a null world, and decide if that number is significantly different from what is typically seen in the null world. Voila!</p>
<p><a href="https://github.com/tidymodels/infer">The <code>infer</code> package in R</a> makes this process explicit, easy, and intuitive.</p>
<p>In December 2018 (just two days ago!), the World Bank announced a new <a href="https://www.cgdev.org/blog/three-lessons-world-banks-new-worldwide-bureaucracy-indicators-database">Worldwide Bureaucracy Indicators Database</a>, with dozens of measures of public sector effectiveness. The data includes variables that measure the proportion of women employed in both the private and the public sectors. Is there a difference between these two sectors? Do more women work in the public sector than the private sector? Instead of consulting a flow chart to find the right test that meets our assumptions and data limitations, we just simulate our way to a p-value and test to see if the difference in median proportions in each sector is significantly different from zero.</p>
<p>We first <a href="https://datacatalog.worldbank.org/dataset/worldwide-bureaucracy-indicators">download a CSV of the WWBI data from the World Bank</a>. In its raw form, it&rsquo;s kind of a mess, with a row for each indicator in each country (so Afghanistan has a row for women private sector employment, one for women public sector employment, and so on), and columns for each year. This heavily commented code will load and clean and rearrange the WWBI data into something we can analyze and plot.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Load libraries</span>
<span style="color:#a6e22e">library</span>(tidyverse)
<span style="color:#a6e22e">library</span>(ggridges)
<span style="color:#a6e22e">library</span>(scales)
<span style="color:#a6e22e">library</span>(infer)

<span style="color:#a6e22e">set.seed</span>(<span style="color:#ae81ff">1234</span>)  <span style="color:#75715e"># Make all random draws reproducible</span>

<span style="color:#75715e"># https://datacatalog.worldbank.org/dataset/worldwide-bureaucracy-indicators</span>
wwbi <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">read_csv</span>(<span style="color:#e6db74">&#34;WWBIData.csv&#34;</span>)

<span style="color:#75715e"># Create a list of indicators we want to work with</span>
indicators <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">c</span>(
  <span style="color:#e6db74">&#34;BI.PWK.PRVS.FE.ZS&#34;</span>,  <span style="color:#75715e"># females as share of private paid employees</span>
  <span style="color:#e6db74">&#34;BI.PWK.PUBS.FE.ZS&#34;</span>   <span style="color:#75715e"># females as share of public paid employees</span>
)

<span style="color:#75715e"># Make a small, cleaner subset of the WWBI data</span>
wwbi_small <span style="color:#f92672">&lt;-</span> wwbi <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># Only select the columns we care about</span>
  <span style="color:#a6e22e">select</span>(country <span style="color:#f92672">=</span> `Country Name`, country_code <span style="color:#f92672">=</span> `Country Code`, 
         indicator <span style="color:#f92672">=</span> `Indicator Code`, <span style="color:#a6e22e">starts_with</span>(<span style="color:#e6db74">&#34;20&#34;</span>)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># Keep only the indicators we care about</span>
  <span style="color:#a6e22e">filter</span>(indicator <span style="color:#f92672">%in%</span> indicators) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># Gather all the year-based columns into two long columns</span>
  <span style="color:#a6e22e">gather</span>(year, value, <span style="color:#a6e22e">starts_with</span>(<span style="color:#e6db74">&#34;20&#34;</span>)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># Spread the data back out so that there are columns for each indicator</span>
  <span style="color:#a6e22e">spread</span>(indicator, value) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># Make these indicator names human readable</span>
  <span style="color:#a6e22e">rename</span>(share_female_private <span style="color:#f92672">=</span> `BI.PWK.PRVS.FE.ZS`,
         share_female_public <span style="color:#f92672">=</span> `BI.PWK.PUBS.FE.ZS`) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># Amid all the gathering and spreading, every column has become a character.</span>
  <span style="color:#75715e"># This converts the year and all the share_* variables back to numbers</span>
  <span style="color:#a6e22e">mutate_at</span>(<span style="color:#a6e22e">vars</span>(year, <span style="color:#a6e22e">starts_with</span>(<span style="color:#e6db74">&#34;share&#34;</span>)), as.numeric)

wwbi_2012 <span style="color:#f92672">&lt;-</span> wwbi_small <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">filter</span>(year <span style="color:#f92672">==</span> <span style="color:#ae81ff">2012</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># Get rid of rows that are missing data in the share_* columns</span>
  <span style="color:#a6e22e">drop_na</span>(<span style="color:#a6e22e">starts_with</span>(<span style="color:#e6db74">&#34;share&#34;</span>)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># Make this tidy and long, with a column for private or public</span>
  <span style="color:#a6e22e">gather</span>(sector, proportion, <span style="color:#a6e22e">starts_with</span>(<span style="color:#e6db74">&#34;share&#34;</span>)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># Make these values even nicer</span>
  <span style="color:#a6e22e">mutate</span>(sector <span style="color:#f92672">=</span> <span style="color:#a6e22e">recode</span>(sector,
                         share_female_private <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Women in private sector&#34;</span>,
                         share_female_public <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Women in public sector&#34;</span>))
</code></pre></div><p>First, we&rsquo;ll use a ridge plot (or overlapping density plots) to see if there&rsquo;s a difference in the distribution of employment across these two sectors. We include <code>quantile_lines = TRUE</code> and <code>quantiles = 2</code> to draw the median of each distribution.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">ggplot</span>(wwbi_2012, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> proportion, y <span style="color:#f92672">=</span> sector, fill <span style="color:#f92672">=</span> sector)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">stat_density_ridges</span>(quantile_lines <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>, quantiles <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, scale <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;white&#34;</span>) <span style="color:#f92672">+</span> 
  <span style="color:#a6e22e">scale_fill_manual</span>(values <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;#98823c&#34;</span>, <span style="color:#e6db74">&#34;#9a5ea1&#34;</span>), guide <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>) <span style="color:#f92672">+</span> 
  <span style="color:#a6e22e">scale_x_continuous</span>(labels <span style="color:#f92672">=</span> <span style="color:#a6e22e">percent_format</span>(accuracy <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Percent of women employed in the sector&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_minimal</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(panel.grid.minor <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>())
</code></pre></div><div class="figure" style="text-align: center">
<img src="/blog/2018/12/05/test-any-hypothesis/index_files/figure-html/diff-ridges-1.png" alt="Distribution of female employment in public and private sectors" width="75%" />
<p class="caption">Figure 1: Distribution of female employment in public and private sectors</p>
</div>
<p>It looks like there&rsquo;s a difference here—the median percent of women in the public sector looks like it&rsquo;s between 40–50%, while the median percent of women in the private sector is 50ish%.</p>
<p>We can use the <code>infer</code> package to determine the exact difference in the medians of these distributions. We use a formula in <code>specify()</code> to indicate which variables we want to be our response (or y) and which we want to be our explanatory (or x) variables, and then we <code>calculate()</code> the difference in median values. The <code>order</code> argument tells <code>infer</code> to subtract the public values from the private values.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">diff_prop <span style="color:#f92672">&lt;-</span> wwbi_2012 <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">specify</span>(proportion <span style="color:#f92672">~</span> sector) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">calculate</span>(<span style="color:#e6db74">&#34;diff in medians&#34;</span>, 
            order <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;Women in private sector&#34;</span>, <span style="color:#e6db74">&#34;Women in public sector&#34;</span>))
diff_prop
<span style="color:#75715e">## # A tibble: 1 x 1</span>
<span style="color:#75715e">##     stat</span>
<span style="color:#75715e">##    &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 -0.152</span>
</code></pre></div><p>The difference in the median proportions here is 15.2%. More women appear to be employed in the public sector. But because of sampling issues, is there a possibility that this 15% difference could potentially be zero? Could it be positive instead of negative?</p>
<p>To test this, we simulate a world where the actual difference in medians between these two sectors is zero. We then plot that null distribution, place the observed 15.2% difference in it, and see how well it fits. Here we follow the same <code>specify() %&gt;% calculate()</code> pattern, but introduce two new steps. We first <code>hypothesize()</code> that the two sectors are independent of each other and that there&rsquo;s no difference between the two. We then <code>generate()</code> a null distribution based on permutation (essentially shuffling the private/public labels within the existing data 5,000 times), and then calculate the difference in medians for the two groups.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">pub_private_null <span style="color:#f92672">&lt;-</span> wwbi_2012 <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">specify</span>(proportion <span style="color:#f92672">~</span> sector) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">hypothesize</span>(null <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;independence&#34;</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">generate</span>(reps <span style="color:#f92672">=</span> <span style="color:#ae81ff">5000</span>, type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;permute&#34;</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">calculate</span>(<span style="color:#e6db74">&#34;diff in medians&#34;</span>, 
            order <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;Women in private sector&#34;</span>, <span style="color:#e6db74">&#34;Women in public sector&#34;</span>))

<span style="color:#75715e"># Conveniently, the visualize() function that comes with infer returns a ggplot</span>
<span style="color:#75715e"># object, so we can continue to add ggplot layers to enhance and clean the plot</span>
pub_private_null <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">visualize</span>() <span style="color:#f92672">+</span> 
  <span style="color:#a6e22e">geom_vline</span>(xintercept <span style="color:#f92672">=</span> diff_prop<span style="color:#f92672">$</span>stat, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#FF4136&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Difference in median proportion\n(Women in private sector − women in public sector)&#34;</span>,
       y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Count&#34;</span>,
       subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Red line shows observed difference in median proportions&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_x_continuous</span>(labels <span style="color:#f92672">=</span> <span style="color:#a6e22e">percent_format</span>(accuracy <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_minimal</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(panel.grid.minor <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>())
</code></pre></div><div class="figure" style="text-align: center">
<img src="/blog/2018/12/05/test-any-hypothesis/index_files/figure-html/diff-in-null-world-1.png" alt="Observed difference in a hypothetical null world" width="75%" />
<p class="caption">Figure 2: Observed difference in a hypothetical null world</p>
</div>
<p>This red line is pretty far in the left tail of the distribution and seems atypical. We can calculate the probability of seeing a difference as big as 15.2% with the <code>get_pvalue()</code> function. Because we care about differences in means or medians (and because the difference could be positive if we flipped the order of subtracting the two groups—public−private instead of private−public), we specify <code>direction = &quot;both&quot;</code> to get a two-tailed p-value.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">pub_private_null <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">get_pvalue</span>(obs_stat <span style="color:#f92672">=</span> diff_prop, direction <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;both&#34;</span>)
<span style="color:#75715e">## Warning: Please be cautious in reporting a p-value of 0. This result is an approximation</span>
<span style="color:#75715e">## based on the number of `reps` chosen in the `generate()` step. See `?get_p_value()` for</span>
<span style="color:#75715e">## more information.</span>
<span style="color:#75715e">## # A tibble: 1 x 1</span>
<span style="color:#75715e">##   p_value</span>
<span style="color:#75715e">##     &lt;dbl&gt;</span>
<span style="color:#75715e">## 1       0</span>
</code></pre></div><p>The p-value is basically 0 (it&rsquo;s not actually 0—it&rsquo;s something like 0.0000001—but because it is based on simulations, it&rsquo;ll report 0 and R will show a warning), which means that there&rsquo;s a 0% chance of seeing a difference at least as large as 15.2% in a world where there&rsquo;s no difference. That&rsquo;s pretty strong evidence, and I&rsquo;d feel confident declaring that there&rsquo;s a statistically significant difference between sectoral employment patterns for women, with more women working in public sector jobs than in the private sector.</p>
<p>And that&rsquo;s it! No flow charts. No complex assumption checking. Using the <code>infer</code> package in R, we brute forced-ly simulated our way to a p-value that is actually interpretable, and now we know that women tend to work in the public sector more than in the private sector. Magic!</p>
%!s(MISSING)]]></content>
        <category term="r" />
        <category term="tidyverse" />
        <category term="infer" />
        <category term="hypothesis testing" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Create a cheap, disposable supercomputer with R, DigitalOcean, and future]]></title>
        <link href="https://www.shagunjhaver.com/blog/2018/07/30/disposable-supercomputer-future/" rel="alternate" />
        <published>2018-07-30T00:00:00+00:00</published>
        <updated>2018-07-30T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2018/07/30/disposable-supercomputer-future/</id>
        <summary type="html"><![CDATA[Use the future R package to run computationally intensive R commands on a cluster of remote computers]]></summary>
        <content type="html"><![CDATA[<p><em>tl;dr</em>: <a href="#full-example">Skip to complete example</a></p>
<hr>
<p>In one of my <a href="https://github.com/andrewheiss/donors-ngo-restrictions">current research projects</a>, I use Bayesian modeling (with <a href="http://mc-stan.org/">Stan</a> and <a href="http://mc-stan.org/rstanarm/articles/rstanarm.html">rstanarm</a>) and multiple imputation (with <a href="https://gking.harvard.edu/Amelia">Amelia</a>) to measure how international aid agencies change their funding allocations to countries that impose legal restrictions on NGOs. It&rsquo;s a fascinating topic and I&rsquo;m using exciting cutting edge research methods to do it.</p>
<p>However, these cutting edge research methods are <em>really</em> computationally intensive. On my laptop, using all four CPU cores, it takes ≈45 minutes to run one set of models (see <a href="https://github.com/andrewheiss/donors-ngo-restrictions/blob/cb93d175e29b88502640e70b48f5a899dbdba1c4/Data/run_bayes_remote.R#L95"><code>h1.barriers.total &lt;- mods.h1.next_year.raw.bayes.nested</code> here</a>, for instance), so with all the different model specifications and robustness checks, it takes <em>hours</em> to run the complete analysis for this project. It&rsquo;s awful and I hate rerunning it.</p>
<p>In the past, I created several <a href="https://www.digitalocean.com/">DigitalOcean</a> droplets (what they call virtual private servers), installed <a href="https://www.rstudio.com/products/rstudio/download-server/">RStudio Server</a> on each, uploaded my data to each instance, and ran separate models on each. This reduced computation time, since I could have like 5 computers all running different parts of the analysis, but it required a ton of manual work and oversight. Computers are really good at automating stuff,  and tools like <a href="https://slurm.schedmd.com/">Slurm</a> and <a href="http://hadoop.apache.org/">Hadoop</a> and <a href="https://kubernetes.io/">Kubernetes</a> all allow you to orchestrate computing across clusters of machines. However, because these tools are powerful, they&rsquo;re also really complicated and require a lot of additional configuration, and the tradeoff between teaching myself Kubernetes vs. just doing it all manually wasn&rsquo;t that favorable.</p>
<p>Surely, <a href="https://twitter.com/andrewheiss/status/1022937013022945280?s=21">I mused on Twitter last week</a>, there&rsquo;s a better easier way to manage all this computing.</p>
<p>There is! And it&rsquo;s surprisingly easy with the <a href="https://github.com/HenrikBengtsson/future"><strong>future</strong></a> package in R!</p>
<p>You can create your own disposable supercomputer with remote clusters of computers in just a few intuitive steps.</p>
<ol>
<li>Create remote computers that have the correct R environment and packages set up already</li>
<li>Use <code>future::plan()</code> to point R to those computers</li>
<li>Run R commands on those computers with <code>future::future_lapply()</code> or <code>furrr::future_map()</code></li>
<li>Throw away the remote computers when you&rsquo;re done</li>
<li>That&rsquo;s all!</li>
</ol>
<p><a href="#full-example">A fully worked out, tl;dr example is at the end of this post.</a></p>
<h2 id="0-super-quick-introduction-to-future">0. Super quick introduction to future</h2>
<p>The key to all of this working correctly is the <a href="https://github.com/HenrikBengtsson/future"><strong>future</strong></a> package in R. <strong>future</strong> allows you to evaluate R commands and expressions in separate processes.</p>
<p>For instance, ordinarily, when you run this command, <code>x</code> gets assigned a value immediately:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">x <span style="color:#f92672">&lt;-</span> {
  <span style="color:#a6e22e">cat</span>(<span style="color:#e6db74">&#34;Something really computationally intensive\n&#34;</span>)
  <span style="color:#ae81ff">10</span>
}
<span style="color:#75715e">#&gt; Something really computationally intensive</span>

x
<span style="color:#75715e">#&gt; [1] 10</span>
</code></pre></div><p>The stuff in <code>cat()</code> gets printed immediately and the value of 10 is assigned to <code>x</code> immediately as well. This is all well and good, but if the command is computationally intensive, you have to wait until it&rsquo;s done before doing anything else in R.</p>
<p><strong>future</strong> includes a special assignment command <code>%&lt;-%</code> that delays evaluation until <code>x</code> is called.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">library</span>(future)

x <span style="color:#f92672">%&lt;-%</span> {
    <span style="color:#a6e22e">cat</span>(<span style="color:#e6db74">&#34;Something really computationally intensive\n&#34;</span>)
    <span style="color:#ae81ff">10</span>
}

x
<span style="color:#75715e">#&gt; Something really computationally intensive</span>
<span style="color:#75715e">#&gt; [1] 10</span>
</code></pre></div><p>Notice how <code>cat()</code> isn&rsquo;t run until <code>x</code> is run. That&rsquo;s because the whole expression isn&rsquo;t actually run yet—it isn&rsquo;t evaluated until <code>x</code> is called.</p>
<p>The magic of <strong>future</strong> is that this deferred evaluation <em>can automatically happen anywhere else</em>. You specify where evaluation happens with <code>future::plan()</code>. For instance, if you want <code>x</code> to be handled on multiple CPUs on your local computer, you&rsquo;d do this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">library</span>(future)
<span style="color:#a6e22e">plan</span>(multiprocess)

x <span style="color:#f92672">%&lt;-%</span> {
  <span style="color:#a6e22e">cat</span>(<span style="color:#e6db74">&#34;Something really computationally intensive\n&#34;</span>)
  <span style="color:#ae81ff">10</span>
}

x
<span style="color:#75715e">#&gt; Something really computationally intensive</span>
<span style="color:#75715e">#&gt; [1] 10</span>
</code></pre></div><p>R now uses multiple cores to create <code>x</code>.</p>
<p>Or, if you want <code>x</code> to be processed on a cluster of three remote computers, you&rsquo;d do this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">library</span>(future)

ips <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;192.168.1.1&#34;</span>, <span style="color:#e6db74">&#34;192.168.1.2&#34;</span>, <span style="color:#e6db74">&#34;192.168.1.3&#34;</span>)
<span style="color:#a6e22e">plan</span>(remote, workers <span style="color:#f92672">=</span> ips)

x <span style="color:#f92672">%&lt;-%</span> {
    <span style="color:#a6e22e">cat</span>(<span style="color:#e6db74">&#34;Something really computationally intensive\n&#34;</span>)
    <span style="color:#ae81ff">10</span>
}

x
<span style="color:#75715e">#&gt; Something really computationally intensive</span>
<span style="color:#75715e">#&gt; [1] 10</span>
</code></pre></div><p><code>x</code> is now created across three computers automatically.</p>
<p><strong>future</strong> has functions like <a href="https://github.com/HenrikBengtsson/future.apply"><code>future.apply::future_lapply()</code></a> that allow you to apply functions to lists, just like <code>lapply()</code> and friends in base R, and the <a href="https://github.com/DavisVaughan/furrr"><strong>furrr</strong> package</a> has futurized functions like <code>future_map()</code> that are equivalent to <code>map()</code> and friends in <strong>purrr</strong>. The <code>future_*</code> versions of these functions will automatically take advantage of whatever you&rsquo;ve specified in <code>plan()</code>. If you use <code>plan(multiprocess)</code>, <code>future_map()</code> will automatically send chunks of computations to each of the CPU cores; if you use <code>plan(remote)</code>, <code>future_map()</code> will automatically send chunks of computations to each of the remote computers.</p>
<p>This is seriously magic and incredible. The backend you specify with <code>plan()</code> <em>doesn&rsquo;t matter</em> and you can change it later to anything you want <em>without having to change your code</em>.</p>
<h2 id="1-create-remote-computers-that-have-the-correct-r-environment-and-packages-set-up-already">1. Create remote computers that have the correct R environment and packages set up already</h2>
<h3 id="11-create-a-remote-computer-or-two-or-three">1.1. Create a remote computer (or two or three)</h3>
<p>First, you need a remote computer. I prefer to use DigitalOcean, mostly because I already use it for my personal web hosting and other personal projects, and because I find it way more intuitive and easy to use than <a href="https://aws.amazon.com/ec2/">Amazon&rsquo;s EC2</a> (which, like Kubernetes, et al. is incredibly powerful, but incredibly complicated). But you can also do all of this with AWS, <a href="https://www.linode.com/">Linode</a>, <a href="https://cloud.google.com/">Google Cloud Platform</a>, or any other VPS service (<a href="https://gist.github.com/DavisVaughan/ef544e6ef2228920e7e7100c48def93e">here&rsquo;s how to do it with AWS</a> and with <a href="https://cloudyr.github.io/googleComputeEngineR/articles/massive-parallel.html">Google Cloud</a>). The magic of <strong>future</strong> is that it doesn&rsquo;t matter what backend you use—the package takes care of everything for you.</p>
<p>Here&rsquo;s what to do with DigitalOcean:</p>
<ol>
<li>
<p>Create a DigitalOcean account (<a href="https://m.do.co/c/cec0de11762e">get $10 for free with this link</a>)</p>
</li>
<li>
<p>Create an SSH key pair between your DigitalOcean account and your computer. <a href="https://www.digitalocean.com/docs/droplets/how-to/add-ssh-keys/">Follow the instructions here</a> to create SSH keys and then upload the public keys to your account. Setting up SSH keys like this lets you securely access your remote computer without a password, which is nice when running remote computations from R.</p>
</li>
<li>
<p>In your DigitalOcean account, create a new Droplet. For simplicity&rsquo;s sake, you can use the &ldquo;One-click apps&rdquo; tab to create a computer that has <a href="https://www.docker.com/">Docker</a> pre-installed.</p>
<figure><img src="do-docker-image.png"
         alt="Create a DigitalOcean image with Docker pre-installed"/>
</figure>

</li>
<li>
<p>Choose how big you want the droplet to be. For now, we&rsquo;ll just make a small $5/month VPS, but you can get as fancy as you want in real life.</p>
</li>
<li>
<p>Check the box near the bottom to add your SSH key to the VPS automatically.</p>
<figure class="img-50"><img src="do-ssh.png"
         alt="Enable SSH key in new droplet"/>
</figure>

</li>
<li>
<p>All done! Take note of the IP address. You can connect to the machine now with a terminal with <code>ssh root@IPADDRESS</code> if you want, but you don&rsquo;t need to.</p>
</li>
</ol>
<p>You can automate all this with the <a href="https://github.com/sckott/analogsea"><strong>analogsea</strong> package</a> in R. Create an API key in your DigitalOcean account:</p>
<figure class="img-50"><img src="do-pat.png"
         alt="Create new API key in DigitalOcean"/>
</figure>

<p>Then edit <code>~/.Rprofile</code> (or create a new file there, if needed) and add this line:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">Sys.setenv</span>(DO_PAT <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;KEY_GOES_HERE&#34;</span>)
</code></pre></div><p>Now, you can use R to create DigitalOcean droplets, like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">library</span>(tidyverse)
<span style="color:#a6e22e">library</span>(analogsea)

<span style="color:#75715e"># droplet_create() makes a generic Linux VPS</span>
remote_computer <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">droplet_create</span>(region <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;sfo2&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;1gb&#34;</span>)

<span style="color:#75715e"># Or...</span>
<span style="color:#75715e"># docklet_create() makes a Linux VPS with Docker pre-installed</span>
remote_computer <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">docklet_create</span>(region <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;sfo2&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;1gb&#34;</span>)
</code></pre></div><h3 id="12-make-sure-the-remote-computer-has-the-correct-r-environment-and-packages">1.2. Make sure the remote computer has the correct R environment and packages</h3>
<p>The computers you specify in <code>plan(remote, workers = &quot;blah&quot;)</code> need to (1) have R installed, and (2) have all the packages installed that are needed for the computation. You can manually install R and all the needed packages, but that can take a long time and it&rsquo;s tedious. If you need a cluster of 6 computers, you don&rsquo;t want to take an hour to install R on each of them (and wait for all the packages to compile).</p>
<p>The easiest way to get a ready-to-go R environment is to use <a href="https://www.docker.com/">Docker</a>. I won&rsquo;t cover the details of Docker here (since <a href="https://www.andrewheiss.com/blog/2017/04/27/super-basic-practical-guide-to-docker-and-rstudio/">I&rsquo;ve done that already</a>)—essentially, Docker lets you install pre-configured virtual computers instantly. For example, <a href="https://hub.docker.com/r/rocker/r-base/"><code>rocker/rbase</code></a> is a Linux machine with R preinstalled, and <a href="https://hub.docker.com/r/rocker/tidyverse/"><code>rocker/tidyverse</code></a> is a Linux machine with R + RStudio server + tidyverse pre-installed. You can also create project-specific environments like <a href="https://hub.docker.com/r/andrewheiss/docker-donors-ngo-restrictions/">this one for my donors-NGOs project</a>, and you can use R packages like <a href="https://github.com/o2r-project/containerit"><strong>containerit</strong></a> to automatically create a <code>Dockerfile</code> out of your current R environment. It&rsquo;s probably best to make your own custom Docker image for your own projects if you use any packages beyond what&rsquo;s in the default <code>rbase</code> or <code>tidyverse</code> images.</p>
<p>To get a Docker image onto your remote computer, log into the computer with <code>ssh root@IPADDRESS</code> in your terminal and run <code>docker pull rocker/tidyverse</code>.</p>
<p>If you&rsquo;re using <strong>analogsea</strong>, run this from R:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">droplet</span>(remote_computer<span style="color:#f92672">$</span>id) <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">docklet_pull</span>(<span style="color:#e6db74">&#34;rocker/tidyverse&#34;</span>)
</code></pre></div><p>You can do this to create as many remote computers as you want.</p>
<p>The first time you run <code>docklet_pull()</code> on a droplet, Docker will download hundreds of megabytes of container files. This is fine for one computer, but if you&rsquo;re creating a cluster of multiple computers, you might not want to redownload everything every time on each computer (to avoid extra bandwidth charges, for example). Instead of pulling a fresh Docker image on each computer, you can take a snapshot of the first remote droplet and then make new droplets based on the snapshot:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Create new droplet with rocker/tidyverse</span>
remote_computer <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">docklet_create</span>(region <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;sfo2&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;1gb&#34;</span>)
<span style="color:#a6e22e">droplet</span>(remote_computer<span style="color:#f92672">$</span>id) <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">docklet_pull</span>(<span style="color:#e6db74">&#34;rocker/tidyverse&#34;</span>)

<span style="color:#75715e"># Create snapshot</span>
<span style="color:#a6e22e">droplet</span>(remote_computer<span style="color:#f92672">$</span>id) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">droplet_power_off</span>() <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">droplet_snapshot</span>(name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;tidyverse_ready&#34;</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">droplet_power_on</span>()

<span style="color:#75715e"># Create a new droplet based on this snapshot. This new computer will already</span>
<span style="color:#75715e"># have rocker/tidyverse on it</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e"># You can see a list of available snapshots and get the name/id with</span>
<span style="color:#75715e"># images(private = TRUE)</span>
remote_computer2 <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">droplet_create</span>(image <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;12345678&#34;</span>, 
                                   region <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;sfo2&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;1gb&#34;</span>)

<span style="color:#75715e"># This won&#39;t take long because it already has rocker/tidyverse</span>
<span style="color:#75715e"># You should get this message:</span>
<span style="color:#75715e">#   Status: Image is up to date for rocker/tidyverse:latest</span>
<span style="color:#a6e22e">droplet</span>(remote_computer<span style="color:#f92672">$</span>id) <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">docklet_pull</span>(<span style="color:#e6db74">&#34;rocker/tidyverse&#34;</span>)
</code></pre></div><p>Just make sure you delete the snapshots when you&rsquo;re done—they cost $0.05 per GB per month.</p>
<h2 id="2-use-futureplan-to-point-r-to-those-computers">2. Use <code>future::plan()</code> to point R to those computers</h2>
<p>We can now point R to this remote computer (or remote computers) and have <strong>future</strong> automatically use the Docker-installed R.</p>
<p>If we didn&rsquo;t use Docker and instead installed R on the remote machine itself, all we&rsquo;d need to do is run this in R:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">plan</span>(remote, workers <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;IP ADDRESS HERE&#34;</span>)
</code></pre></div><p>However, because R lives inside a Docker image, we need to do a tiny bit of extra configuration on the local computer—we have to tell the remote computer how to turn on and access the R Docker image. We do this by defining a cluster. Here&rsquo;s a heavily commented example of how to do that:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Public IP for droplet(s); this can also be a vector of IP addresses</span>
ip <span style="color:#f92672">&lt;-</span> IP_ADDRESS_HERE

<span style="color:#75715e"># Path to private SSH key that matches key uploaded to DigitalOcean</span>
ssh_private_key_file <span style="color:#f92672">&lt;-</span> <span style="color:#e6db74">&#34;/Users/andrew/.ssh/id_rsa&#34;</span>

<span style="color:#75715e"># Connect and create a cluster</span>
cl <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">makeClusterPSOCK</span>(
  ip,
  
  <span style="color:#75715e"># User name; DigitalOcean droplets use root by default</span>
  user <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;root&#34;</span>,
  
  <span style="color:#75715e"># Use private SSH key registered with DigitalOcean</span>
  rshopts <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(
    <span style="color:#e6db74">&#34;-o&#34;</span>, <span style="color:#e6db74">&#34;StrictHostKeyChecking=no&#34;</span>,
    <span style="color:#e6db74">&#34;-o&#34;</span>, <span style="color:#e6db74">&#34;IdentitiesOnly=yes&#34;</span>,
    <span style="color:#e6db74">&#34;-i&#34;</span>, ssh_private_key_file
  ),
  
  <span style="color:#75715e"># Command to run on each remote machine</span>
  <span style="color:#75715e"># The script loads the tidyverse Docker image</span>
  <span style="color:#75715e"># --net=host allows it to communicate back to this computer</span>
  rscript <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;sudo&#34;</span>, <span style="color:#e6db74">&#34;docker&#34;</span>, <span style="color:#e6db74">&#34;run&#34;</span>, <span style="color:#e6db74">&#34;--net=host&#34;</span>, 
              <span style="color:#e6db74">&#34;rocker/tidyverse&#34;</span>, <span style="color:#e6db74">&#34;Rscript&#34;</span>),
  
  <span style="color:#75715e"># These are additional commands that are run on the remote machine. </span>
  <span style="color:#75715e"># At minimum, the remote machine needs the future library to work—installing furrr also installs future.</span>
  rscript_args <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(
    <span style="color:#75715e"># Create directory for package installation</span>
    <span style="color:#e6db74">&#34;-e&#34;</span>, <span style="color:#a6e22e">shQuote</span>(<span style="color:#e6db74">&#34;local({p &lt;- Sys.getenv(&#39;R_LIBS_USER&#39;); dir.create(p, recursive = TRUE, showWarnings = FALSE); .libPaths(p)})&#34;</span>),
    <span style="color:#75715e"># Install furrr and future</span>
    <span style="color:#e6db74">&#34;-e&#34;</span>, <span style="color:#a6e22e">shQuote</span>(<span style="color:#e6db74">&#34;if (!requireNamespace(&#39;furrr&#39;, quietly = TRUE)) install.packages(&#39;furrr&#39;)&#34;</span>)
  ),
  
  <span style="color:#75715e"># Actually run this stuff. Set to TRUE if you don&#39;t want it to run remotely.</span>
  dryrun <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>
)
</code></pre></div><p>With this cluster defined, we can now use it in <code>future::plan()</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">plan</span>(cluster, workers <span style="color:#f92672">=</span> cl)
</code></pre></div><p>And that&rsquo;s it! <strong>future</strong> is now ready to run commands on the remote computer.</p>
<h2 id="3-run-r-commands-on-those-computers-with-futurefuture_lapply-or-furrrfuture_map">3. Run R commands on those computers with <code>future::future_lapply()</code> or <code>furrr::future_map()</code></h2>
<p>Now we can run <strong>future</strong>-based commands on the remote computer with <code>%&lt;-%</code>. First, let&rsquo;s check the remote computer&rsquo;s name:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Verify that commands run remotely by looking at the name of the remote</span>
<span style="color:#75715e"># Create future expression; this doesn&#39;t run remotely yet</span>
remote_name <span style="color:#f92672">%&lt;-%</span> {
  <span style="color:#a6e22e">Sys.info</span>()[[<span style="color:#e6db74">&#34;nodename&#34;</span>]]
} 

<span style="color:#75715e"># Run remote expression and see that it&#39;s running inside Docker, not locally</span>
remote_name
<span style="color:#75715e">#&gt; [1] &#34;docker-s-1vcpu-2gb-sfo2-01&#34;</span>
</code></pre></div><p>How many CPUs does it have?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># See how many CPU cores the remote machine has</span>
n_cpus <span style="color:#f92672">%&lt;-%</span> {parallel<span style="color:#f92672">::</span><span style="color:#a6e22e">detectCores</span>()} 
n_cpus
<span style="color:#75715e">#&gt; [1] 1</span>
<span style="color:#75715e"># Just one, since this is a small machine</span>
</code></pre></div><p>We can now outsource any command we want to the remote computer. We don&rsquo;t even have to transfer data manually to the remote—<strong>future</strong> takes care of all of that automatically:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Do stuff with data locally</span>
top_5_worlds <span style="color:#f92672">&lt;-</span> starwars <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">filter</span>(<span style="color:#f92672">!</span><span style="color:#a6e22e">is.na</span>(homeworld)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">count</span>(homeworld, sort <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">slice</span>(<span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#ae81ff">5</span>) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(homeworld <span style="color:#f92672">=</span> <span style="color:#a6e22e">fct_inorder</span>(homeworld, ordered <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>))

<span style="color:#75715e"># Create plot remotely, just for fun</span>
homeworld_plot <span style="color:#f92672">%&lt;-%</span> { 
  <span style="color:#a6e22e">ggplot</span>(top_5_worlds, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> homeworld, y <span style="color:#f92672">=</span> n)) <span style="color:#f92672">+</span>
    <span style="color:#a6e22e">geom_bar</span>(stat <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;identity&#34;</span>) <span style="color:#f92672">+</span> 
    <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Homeworld&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Count&#34;</span>, 
         title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Most Star Wars characters are from Naboo and Tatooine&#34;</span>,
         subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;It really is a Skywalker/Amidala epic&#34;</span>)
}

<span style="color:#75715e"># Run the command remotely and show plot locally</span>
<span style="color:#75715e"># Note how we didn&#39;t have to load any data on the remote machine. future takes</span>
<span style="color:#75715e"># care of all of that for us!</span>
homeworld_plot
</code></pre></div><p><img src="star-wars-homeworlds.png" width="75%" style="display: block; margin: auto;" alt="Top homeworlds in Star Wars" /></p>
<p>In addition to <code>%&lt;-%</code>, we can use functions like <code>furrr::future_map()</code> to run functions across a vector of values. Because we&rsquo;re only running one remote computer, all these calculations happen on that remote image. If we used more, <strong>future</strong> would automatically dispatch different chunks of this code across different computers and then reassemble them locally. Anything you can do with <strong>furrr</strong> or <strong>future</strong> can now be done remotely.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Multiply the numbers 1-5 by 10000 random numbers</span>
<span style="color:#75715e"># All these calculations happen remotely!</span>
<span style="color:#a6e22e">future_map</span>(<span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#ae81ff">5</span>, <span style="color:#f92672">~</span> <span style="color:#a6e22e">rnorm</span>(<span style="color:#ae81ff">10000</span>) <span style="color:#f92672">*</span> .x)
<span style="color:#75715e">#&gt; [[1]]</span>
<span style="color:#75715e">#&gt;     [1] -6.249602e-01  1.949156e+00  2.205669e+00  4.525842e-01</span>
<span style="color:#75715e">#&gt; ...</span>
</code></pre></div><p>You can even nest <strong>future</strong> plans by <a href="https://cran.r-project.org/web/packages/future/vignettes/future-3-topologies.html">specifying them in a list</a>, and the package will take care of the different nested layers automatically. You can also place <code>plan(list(...))</code> in a file named <code>.future.R</code>, which <strong>future</strong> will source automatically when it is loaded. This allows you to use different plans on different computers without ever changing your code.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">plan</span>(<span style="color:#a6e22e">list</span>( 
  <span style="color:#a6e22e">tweak</span>(cluster, workers <span style="color:#f92672">=</span> cl),  <span style="color:#75715e"># Use a cluster of computers locally </span>
  multiprocess  <span style="color:#75715e"># Use all the CPUs on remote machines </span>
)) 

complicated_remote_stuff <span style="color:#f92672">%&lt;-%</span> {  
  <span style="color:#75715e"># Do complicated stuff on all the remote CPUs with future or furrr functions</span>
  <span style="color:#a6e22e">future_map</span>(<span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#ae81ff">5</span>, <span style="color:#f92672">~</span> <span style="color:#a6e22e">rnorm</span>(<span style="color:#ae81ff">10000</span>) <span style="color:#f92672">*</span> .x)
} 

complicated_remote_stuff
<span style="color:#75715e">#&gt; [[1]]</span>
<span style="color:#75715e">#&gt;     [1] -4.746093e-02  1.874897e+00  1.679342e+00 -5.775777e-01</span>
<span style="color:#75715e">#&gt; ...</span>
</code></pre></div><h2 id="4-throw-away-the-remote-computers-when-youre-done">4. Throw away the remote computers when you&rsquo;re done</h2>
<p>Because we&rsquo;ve used Docker-based R installations, spinning up new droplets is trivial—you don&rsquo;t have to manually install R and all the packages you need by hand. All these remote images are completely disposable.</p>
<p>Once you&rsquo;re done running stuff remotely, you can delete the droplets and save money. Either delete them through the DigitalOcean dashboard, or use <strong>analogsea</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">droplet_destroy</span>(remote_computer<span style="color:#f92672">$</span>id)
</code></pre></div><h2 id="5-thats-all">5. That&rsquo;s all!</h2>
<p>Phew. That&rsquo;s all! This is a lot easier than figuring out how to orchestrate Docker images with Kubernetes or figuring out how to create Hadoop clusters. <strong>future</strong> takes care of all the hard work behind the scenes and this all Just Works™.</p>
<h2 id="full-example">Full example</h2>
<p>Here&rsquo;s a real-life example of using Stan to estimate a bunch of models on a cluster of two 4-CPU, 8 GB RAM machines. It uses the <a href="https://hub.docker.com/r/andrewheiss/docker-donors-ngo-restrictions/"><code>andrewheiss/docker-donors-ngo-restrictions</code></a> Docker image because it already has Stan and family pre-installed. Each machine costs $0.06 per hour to run, so it&rsquo;s essentially a cheap, fast, remote, and disposable supercomputer.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Load libraries ----------------------------------------------------------</span>

<span style="color:#a6e22e">library</span>(tidyverse)
<span style="color:#a6e22e">library</span>(analogsea)
<span style="color:#a6e22e">library</span>(broom)
<span style="color:#a6e22e">library</span>(rstanarm)
<span style="color:#a6e22e">library</span>(gapminder)
<span style="color:#a6e22e">library</span>(tictoc)
<span style="color:#a6e22e">library</span>(ggstance)

<span style="color:#75715e"># Path to private SSH key that matches key on DigitalOcean</span>
ssh_private_key_file <span style="color:#f92672">&lt;-</span> <span style="color:#e6db74">&#34;/Users/andrew/.ssh/id_rsa&#34;</span>


<span style="color:#75715e"># Set up remote machines --------------------------------------------------</span>

<span style="color:#75715e"># Create two new droplets with Docker pre-installed</span>
<span style="color:#75715e"># Here I&#39;m using &#34;s-4vcpu-8gb&#34;, which has 4 CPUs and 8 GB of RAM.</span>
<span style="color:#75715e"># Run analogsea::sizes() to see all the available sizes</span>
droplet1 <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">docklet_create</span>(region <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;sfo2&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;s-4vcpu-8gb&#34;</span>)
droplet2 <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">docklet_create</span>(region <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;sfo2&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;s-4vcpu-8gb&#34;</span>)

<span style="color:#75715e"># Pull the docker image with the environment for this project</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e"># Here I&#39;m using andrewheiss/docker-donors-ngo-restrictions because it already</span>
<span style="color:#75715e"># has rstan and friends installed; none of the rocker R images do that</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e"># NB: Wait for a minute before running this so that Docker is ready to</span>
<span style="color:#75715e"># run on the remote machines</span>
<span style="color:#a6e22e">droplet</span>(droplet1<span style="color:#f92672">$</span>id) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">docklet_pull</span>(<span style="color:#e6db74">&#34;andrewheiss/docker-donors-ngo-restrictions&#34;</span>)

<span style="color:#a6e22e">droplet</span>(droplet2<span style="color:#f92672">$</span>id) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">docklet_pull</span>(<span style="color:#e6db74">&#34;andrewheiss/docker-donors-ngo-restrictions&#34;</span>)

<span style="color:#75715e"># Get IP addresses</span>
ip1 <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">droplet</span>(droplet1<span style="color:#f92672">$</span>id)<span style="color:#f92672">$</span>networks<span style="color:#f92672">$</span>v4[[1]]<span style="color:#f92672">$</span>ip_address
ip2 <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">droplet</span>(droplet2<span style="color:#f92672">$</span>id)<span style="color:#f92672">$</span>networks<span style="color:#f92672">$</span>v4[[1]]<span style="color:#f92672">$</span>ip_address

ips <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">c</span>(ip1, ip2)


<span style="color:#75715e"># Make remote cluster -----------------------------------------------------</span>

<span style="color:#75715e"># Command to run on each remote machine</span>
<span style="color:#75715e"># The script loads the docker-donors-ngo-restrictions Docker image</span>
<span style="color:#75715e"># --net=host allows it to communicate back to this computer</span>
rscript <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;sudo&#34;</span>, <span style="color:#e6db74">&#34;docker&#34;</span>, <span style="color:#e6db74">&#34;run&#34;</span>, <span style="color:#e6db74">&#34;--net=host&#34;</span>, 
             <span style="color:#e6db74">&#34;andrewheiss/docker-donors-ngo-restrictions&#34;</span>, <span style="color:#e6db74">&#34;Rscript&#34;</span>)

<span style="color:#75715e"># Connect and create a cluster</span>
cl <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">makeClusterPSOCK</span>(
  ips,
  
  <span style="color:#75715e"># User name; DO droplets use root by default</span>
  user <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;root&#34;</span>,
  
  <span style="color:#75715e"># Use private SSH key registered with DO</span>
  rshopts <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(
    <span style="color:#e6db74">&#34;-o&#34;</span>, <span style="color:#e6db74">&#34;StrictHostKeyChecking=no&#34;</span>,
    <span style="color:#e6db74">&#34;-o&#34;</span>, <span style="color:#e6db74">&#34;IdentitiesOnly=yes&#34;</span>,
    <span style="color:#e6db74">&#34;-i&#34;</span>, ssh_private_key_file
  ),
  
  rscript <span style="color:#f92672">=</span> rscript,
  
  <span style="color:#75715e"># Things to run each time the remote instance starts</span>
  rscript_args <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(
    <span style="color:#75715e"># Set up .libPaths() for the root user and install future/purrr/furrr packages</span>
    <span style="color:#75715e"># Technically future and furrr are already installed on </span>
    <span style="color:#75715e"># andrewheiss/docker-donors-ngo-restrictions, so these won&#39;t do anything</span>
    <span style="color:#e6db74">&#34;-e&#34;</span>, <span style="color:#a6e22e">shQuote</span>(<span style="color:#e6db74">&#34;local({p &lt;- Sys.getenv(&#39;R_LIBS_USER&#39;); dir.create(p, recursive = TRUE, showWarnings = FALSE); .libPaths(p)})&#34;</span>),
    <span style="color:#e6db74">&#34;-e&#34;</span>, <span style="color:#a6e22e">shQuote</span>(<span style="color:#e6db74">&#34;if (!requireNamespace(&#39;furrr&#39;, quietly = TRUE)) install.packages(&#39;furrr&#39;)&#34;</span>),
    <span style="color:#75715e"># Make sure the remote computer uses all CPU cores with Stan</span>
    <span style="color:#e6db74">&#34;-e&#34;</span>, <span style="color:#a6e22e">shQuote</span>(<span style="color:#e6db74">&#34;options(mc.cores = parallel::detectCores())&#34;</span>)
  ),
  
  dryrun <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>
)

<span style="color:#75715e"># Use the cluster of computers as the backend for future and furrr functions</span>
<span style="color:#a6e22e">plan</span>(cluster, workers <span style="color:#f92672">=</span> cl)

<span style="color:#75715e"># We&#39;ll use gapminder data to estimate the relationship between health and </span>
<span style="color:#75715e"># wealth in each continent using a Bayesian model</span>

<span style="color:#75715e"># Process and manipulate data locally</span>
<span style="color:#75715e"># Nest continent-based data frames into one larger data frame</span>
gapminder_to_model <span style="color:#f92672">&lt;-</span> gapminder <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">group_by</span>(continent) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">nest</span>() <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#75715e"># Not enough observations here, so ignore it</span>
  <span style="color:#a6e22e">filter</span>(continent <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;Oceania&#34;</span>)
gapminder_to_model
<span style="color:#75715e">#&gt; # A tibble: 4 x 2</span>
<span style="color:#75715e">#&gt;   continent data              </span>
<span style="color:#75715e">#&gt;   &lt;fct&gt;     &lt;list&gt;            </span>
<span style="color:#75715e">#&gt; 1 Asia      &lt;tibble [396 × 5]&gt;</span>
<span style="color:#75715e">#&gt; 2 Europe    &lt;tibble [360 × 5]&gt;</span>
<span style="color:#75715e">#&gt; 3 Africa    &lt;tibble [624 × 5]&gt;</span>
<span style="color:#75715e">#&gt; 4 Americas  &lt;tibble [300 × 5]&gt; </span>

<span style="color:#75715e"># Fit a Bayesian model with naive normal priors on the coefficients and</span>
<span style="color:#75715e"># intercept on each of the continents. In real life, you&#39;d want to use less</span>
<span style="color:#75715e"># naive priors and rescale your data, but this is just an example.</span>
model_to_run <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">function</span>(df) {
  model_stan <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">stan_glm</span>(lifeExp <span style="color:#f92672">~</span> gdpPercap <span style="color:#f92672">+</span> country, 
                         data <span style="color:#f92672">=</span> df, family <span style="color:#f92672">=</span> <span style="color:#a6e22e">gaussian</span>(),
                         prior <span style="color:#f92672">=</span> <span style="color:#a6e22e">normal</span>(), prior_intercept <span style="color:#f92672">=</span> <span style="color:#a6e22e">normal</span>(),
                         chains <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>, iter <span style="color:#f92672">=</span> <span style="color:#ae81ff">2000</span>, warmup <span style="color:#f92672">=</span> <span style="color:#ae81ff">1000</span>, seed <span style="color:#f92672">=</span> <span style="color:#ae81ff">1234</span>)
  <span style="color:#a6e22e">return</span>(model_stan)
}

<span style="color:#75715e"># Use future_map to outsource each of the continent-based models to a different</span>
<span style="color:#75715e"># remote computer, where it will be run with all 4 remote cores</span>
<span style="color:#a6e22e">tic</span>()
gapminder_models <span style="color:#f92672">&lt;-</span> gapminder_to_model <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(model <span style="color:#f92672">=</span> data <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">future_map</span>(<span style="color:#f92672">~</span> <span style="color:#a6e22e">model_to_run</span>(.x)))
<span style="color:#a6e22e">toc</span>()
<span style="color:#75715e">#&gt; 27.786 sec elapsed</span>

<span style="color:#75715e"># That&#39;s so fast!</span>

<span style="color:#75715e"># It worked!</span>
gapminder_models
<span style="color:#75715e">#&gt; # A tibble: 4 x 3</span>
<span style="color:#75715e">#&gt;   continent data               model        </span>
<span style="color:#75715e">#&gt;   &lt;fct&gt;     &lt;list&gt;             &lt;list&gt;       </span>
<span style="color:#75715e">#&gt; 1 Asia      &lt;tibble [396 × 5]&gt; &lt;S3: stanreg&gt;</span>
<span style="color:#75715e">#&gt; 2 Europe    &lt;tibble [360 × 5]&gt; &lt;S3: stanreg&gt;</span>
<span style="color:#75715e">#&gt; 3 Africa    &lt;tibble [624 × 5]&gt; &lt;S3: stanreg&gt;</span>
<span style="color:#75715e">#&gt; 4 Americas  &lt;tibble [300 × 5]&gt; &lt;S3: stanreg&gt;</span>


<span style="color:#75715e"># Do stuff with the models ------------------------------------------------</span>

<span style="color:#75715e"># Extract the gdpPercap coefficient from the rstanarm models</span>
gapminder_models_to_plot <span style="color:#f92672">&lt;-</span> gapminder_models <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(tidied <span style="color:#f92672">=</span> model <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">map</span>(<span style="color:#f92672">~</span> <span style="color:#a6e22e">tidy</span>(.x, intervals <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>, prob <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.9</span>))) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">unnest</span>(tidied) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">filter</span>(term <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;gdpPercap&#34;</span>)

<span style="color:#75715e"># Plot the coefficients</span>
<span style="color:#a6e22e">ggplot</span>(gapminder_models_to_plot, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> estimate, y <span style="color:#f92672">=</span> continent)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_vline</span>(xintercept <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_pointrangeh</span>(<span style="color:#a6e22e">aes</span>(xmin <span style="color:#f92672">=</span> lower, xmax <span style="color:#f92672">=</span> upper, color <span style="color:#f92672">=</span> continent), size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Coefficient estimate (log GDP per capita)&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>,
       caption <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Bars show 90% credible intervals&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_color_viridis_d</span>(begin <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, end <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.9</span>, name <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_grey</span>() <span style="color:#f92672">+</span> <span style="color:#a6e22e">theme</span>(legend.position <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bottom&#34;</span>)
</code></pre></div><p><img src="model-coefs.png" width="75%" style="display: block; margin: auto;" alt="Model coefficients by continent" /></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Delete droplets ---------------------------------------------------------</span>

<span style="color:#a6e22e">droplet_delete</span>(droplet1<span style="color:#f92672">$</span>id)
<span style="color:#a6e22e">droplet_delete</span>(droplet2<span style="color:#f92672">$</span>id)
</code></pre></div>%!s(MISSING)]]></content>
        <category term="r" />
        <category term="docker" />
        <category term="tidyverse" />
        <category term="future" />
        <category term="digitalocean" />
        <category term="docker" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Show multiply imputed results in a side-by-side regression table with broom and huxtable]]></title>
        <link href="https://www.shagunjhaver.com/blog/2018/03/08/amelia-broom-huxtable/" rel="alternate" />
        <published>2018-03-08T00:00:00+00:00</published>
        <updated>2018-03-08T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2018/03/08/amelia-broom-huxtable/</id>
        <summary type="html"><![CDATA[Extend broom's tidy() and glance() to work with lists of multiply imputed regression models]]></summary>
        <content type="html"><![CDATA[<p><span class="small">(<a href="https://github.com/andrewheiss/amelia-broom-huxtable">See this notebook on GitHub</a>)</span></p>
<hr>
<p><em>tl;dr</em>: Use the functions in <a href="broomify-amelia.R"><code>broomify-amelia.R</code></a> to use <code>broom::tidy()</code>, <code>broom::glance()</code>, and <code>huxtable::huxreg()</code> on lists of multiply imputed models.</p>
<hr>
<p>The whole reason I went into the rabbit hole of the mechanics of merging imputed regression results <a href="https://www.andrewheiss.com/blog/2018/03/07/amelia-tidy-melding/">in the previous post</a> was so I could easily report these results in papers and writeups. In political science and economics (and probably other social science disciplines), it&rsquo;s fairly standard to report many regression models in a side-by-side table, with a column for each model and rows for each coefficient. R packages like <a href="https://cran.r-project.org/package=stargazer"><code>stargazer</code></a> and <a href="https://cran.r-project.org/package=huxtable"><code>huxtable</code></a> make this fairly straightforward.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">library</span>(tidyverse)
<span style="color:#a6e22e">library</span>(Amelia)
<span style="color:#a6e22e">library</span>(stargazer)
<span style="color:#a6e22e">library</span>(huxtable)
<span style="color:#a6e22e">library</span>(broom)

<span style="color:#75715e"># Use the africa dataset from Ameila</span>
<span style="color:#a6e22e">data</span>(africa)

<span style="color:#75715e"># Build some example models</span>
model_original1 <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lm</span>(gdp_pc <span style="color:#f92672">~</span> trade <span style="color:#f92672">+</span> civlib, data <span style="color:#f92672">=</span> africa)
model_original2 <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lm</span>(gdp_pc <span style="color:#f92672">~</span> trade <span style="color:#f92672">+</span> civlib <span style="color:#f92672">+</span> infl, data <span style="color:#f92672">=</span> africa)
</code></pre></div><p>Stargazer takes a list of models:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">stargazer</span>(model_original1, model_original2, type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;text&#34;</span>)
<span style="color:#75715e">## </span>
<span style="color:#75715e">## ====================================================================</span>
<span style="color:#75715e">##                                   Dependent variable:               </span>
<span style="color:#75715e">##                     ------------------------------------------------</span>
<span style="color:#75715e">##                                          gdp_pc                     </span>
<span style="color:#75715e">##                               (1)                      (2)          </span>
<span style="color:#75715e">## --------------------------------------------------------------------</span>
<span style="color:#75715e">## trade                      18.000***                18.500***       </span>
<span style="color:#75715e">##                             (1.270)                  (1.200)        </span>
<span style="color:#75715e">##                                                                     </span>
<span style="color:#75715e">## civlib                    -665.000***              -589.000***      </span>
<span style="color:#75715e">##                            (185.000)                (176.000)       </span>
<span style="color:#75715e">##                                                                     </span>
<span style="color:#75715e">## infl                                                -6.340***       </span>
<span style="color:#75715e">##                                                      (1.620)        </span>
<span style="color:#75715e">##                                                                     </span>
<span style="color:#75715e">## Constant                    136.000                 166.000*        </span>
<span style="color:#75715e">##                            (100.000)                (94.900)        </span>
<span style="color:#75715e">##                                                                     </span>
<span style="color:#75715e">## --------------------------------------------------------------------</span>
<span style="color:#75715e">## Observations                  115                      115          </span>
<span style="color:#75715e">## R2                           0.653                    0.695         </span>
<span style="color:#75715e">## Adjusted R2                  0.647                    0.687         </span>
<span style="color:#75715e">## Residual Std. Error    352.000 (df = 112)      332.000 (df = 111)   </span>
<span style="color:#75715e">## F Statistic         106.000*** (df = 2; 112) 84.500*** (df = 3; 111)</span>
<span style="color:#75715e">## ====================================================================</span>
<span style="color:#75715e">## Note:                                    *p&lt;0.1; **p&lt;0.05; ***p&lt;0.01</span>
</code></pre></div><p>As does huxtable&rsquo;s <code>huxreg()</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">huxreg</span>(model_original1, model_original2) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">print_screen</span>()
<span style="color:#75715e">##                    ────────────────────────────────────────────────────</span>
<span style="color:#75715e">##                                                  (1)              (2)  </span>
<span style="color:#75715e">##                                     ───────────────────────────────────</span>
<span style="color:#75715e">##                      (Intercept)         136.063          166.435      </span>
<span style="color:#75715e">##                                         (100.409)         (94.871)     </span>
<span style="color:#75715e">##                      trade                18.027 ***       18.494 ***  </span>
<span style="color:#75715e">##                                           (1.272)          (1.204)     </span>
<span style="color:#75715e">##                      civlib             -665.428 ***     -588.722 **   </span>
<span style="color:#75715e">##                                         (185.436)        (175.717)     </span>
<span style="color:#75715e">##                      infl                                  -6.336 ***  </span>
<span style="color:#75715e">##                                                            (1.620)     </span>
<span style="color:#75715e">##                                     ───────────────────────────────────</span>
<span style="color:#75715e">##                      N                   115              115          </span>
<span style="color:#75715e">##                      R2                    0.653            0.695      </span>
<span style="color:#75715e">##                      logLik             -836.136         -828.709      </span>
<span style="color:#75715e">##                      AIC                1680.272         1667.418      </span>
<span style="color:#75715e">##                    ────────────────────────────────────────────────────</span>
<span style="color:#75715e">##                      *** p &lt; 0.001; ** p &lt; 0.01; * p &lt; 0.05.           </span>
<span style="color:#75715e">## </span>
<span style="color:#75715e">## Column names: names, model1, model2</span>
</code></pre></div><p><a href="https://cran.r-project.org/web/packages/stargazer/vignettes/stargazer.pdf">Stargazer has support for a ton of different model types</a> (see <code>?stargazer</code> for details), but they&rsquo;re all hardcoded into stargazer&rsquo;s internal code and adding more is tricky. <a href="https://hughjonesd.github.io/huxtable/">Huxtable</a>, on the other hand, doesn&rsquo;t rely on hardcoded model processing, but instead will display any model that works with <code>broom::tidy()</code> and <code>broom::glance()</code>. The <a href="https://cran.r-project.org/package=broom"><code>broom</code> package</a> supports way more models than stargazer (including models created with <a href="https://cran.r-project.org/package=rstan"><code>rstan</code></a> and <a href="https://cran.r-project.org/package=rstanarm"><code>rstanarm</code></a>!), and because of this, huxtable is far more extensible—if you can create a <code>tidy()</code> and a <code>glance()</code> function for a type of model, huxtable can use it.</p>
<p>Also, stargazer was written before <a href="https://rmarkdown.rstudio.com/">R Markdown</a> was really a thing, so it has excellent support for HTML and LaTeX output, but that&rsquo;s it. Including stargazer tables in an R Markdown document is a hassle, especially if you want to be able to convert it to Word (<a href="https://github.com/andrewheiss/edb-social-pressure/blob/master/bin/stargazer2docx.py">I&rsquo;ve written a Python script for doing this</a>—that&rsquo;s how much extra work it takes). Huxtable, though, was written after the R Markdown and tidyverse revolutions, so it supports piping <em>and</em> can output to HTML, LaTeX, <em>and</em> Markdown (with <code>huxtable::print_md()</code>).</p>
<p>This history is important because it means that models based on multiple imputation <strong>will not work with stargazer.</strong> Melding all the coefficients across imputations creates nice data frames of model results, but it doesn&rsquo;t create a model that stargazer can work with. This is unfortunate, especially given <a href="https://github.com/search?l=&amp;q=stargazer+user%3Aandrewheiss&amp;ref=advsearch&amp;type=Code&amp;utf8=%E2%9C%93">how much I use stargazer</a>. However, if we could make a <code>tidy()</code> and a <code>glance()</code> function that could work with a list of multiply imputed models, huxtable would solve all our problems.</p>
<p>So here&rsquo;s how to solve all your problems :)</p>
<p>First, we&rsquo;ll impute the missing data in the Africa data set, nest the imputed data in a larger data frame, and run a model on each imputed dataset:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">set.seed</span>(<span style="color:#ae81ff">1234</span>)
imp_amelia <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">amelia</span>(x <span style="color:#f92672">=</span> africa, m <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>, cs <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;country&#34;</span>, ts <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;year&#34;</span>, 
                     logs <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;gdp_pc&#34;</span>, p2s <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>)

models_imputed_df <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">bind_rows</span>(<span style="color:#a6e22e">unclass</span>(imp_amelia<span style="color:#f92672">$</span>imputations), .id <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;m&#34;</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">group_by</span>(m) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">nest</span>() <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(model <span style="color:#f92672">=</span> data <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">map</span>(<span style="color:#f92672">~</span> <span style="color:#a6e22e">lm</span>(gdp_pc <span style="color:#f92672">~</span> trade <span style="color:#f92672">+</span> civlib, data <span style="color:#f92672">=</span> .)))

models_imputed_df
<span style="color:#75715e">## # A tibble: 5 x 3</span>
<span style="color:#75715e">## # Groups:   m [5]</span>
<span style="color:#75715e">##   m     data               model </span>
<span style="color:#75715e">##   &lt;chr&gt; &lt;list&gt;             &lt;list&gt;</span>
<span style="color:#75715e">## 1 imp1  &lt;tibble [120 × 7]&gt; &lt;lm&gt;  </span>
<span style="color:#75715e">## 2 imp2  &lt;tibble [120 × 7]&gt; &lt;lm&gt;  </span>
<span style="color:#75715e">## 3 imp3  &lt;tibble [120 × 7]&gt; &lt;lm&gt;  </span>
<span style="color:#75715e">## 4 imp4  &lt;tibble [120 × 7]&gt; &lt;lm&gt;  </span>
<span style="color:#75715e">## 5 imp5  &lt;tibble [120 × 7]&gt; &lt;lm&gt;</span>
</code></pre></div><p>Before we do anything with the models in <code>models_imputed_df$model</code>, first we can define a few functions to extend broom. R&rsquo;s S3 object system means that a function named <code>whatever.blah()</code> will automatically work when called on objects with the class <code>blah</code>. This is how broom generally works—there are functions named <code>tidy.anova()</code>, <code>tidy.glm()</code>, <code>tidy.lm()</code>, etc. that will do the correct tidying when run on <code>anova</code>, <code>glm</code>, and <code>lm</code> objects. Huxtable also takes advantage of this S3 object system—it will call the appropriate tidy and glance functions based on the class of the models passed to it.</p>
<p>To make a list of models work with broom, we need to invent a new class of model. In this example I&rsquo;ve named it <code>melded</code>, but it could be anything. Here are three functions designed to work on <code>melded</code> objects (the code for these is largely based on <a href="https://www.andrewheiss.com/blog/2018/03/07/amelia-tidy-melding/">the previous post about melding coefficients</a>). These functions are also found in <a href="broomify-amelia.R"><code>broomify-amelia.R</code></a>, which you can add to your project (maybe someday this could be an actual package, but I don&rsquo;t see a reason for it yet).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">tidy.melded <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">function</span>(x, conf.int <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>, conf.level <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.95</span>) {
  <span style="color:#75715e"># Get the df from one of the models</span>
  model_degrees_freedom <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">glance</span>(x[[1]])<span style="color:#f92672">$</span>df.residual
  
  <span style="color:#75715e"># Create matrices of the estimates and standard errors</span>
  params <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">tibble</span>(models <span style="color:#f92672">=</span> <span style="color:#a6e22e">unclass</span>(x)) <span style="color:#f92672">%&gt;%</span>
    <span style="color:#a6e22e">mutate</span>(m <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#a6e22e">n</span>(),
           tidied <span style="color:#f92672">=</span> models <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">map</span>(tidy)) <span style="color:#f92672">%&gt;%</span> 
    <span style="color:#a6e22e">unnest</span>(tidied) <span style="color:#f92672">%&gt;%</span>
    <span style="color:#a6e22e">select</span>(m, term, estimate, std.error) <span style="color:#f92672">%&gt;%</span>
    <span style="color:#a6e22e">gather</span>(key, value, estimate, std.error) <span style="color:#f92672">%&gt;%</span>
    <span style="color:#a6e22e">mutate</span>(term <span style="color:#f92672">=</span> <span style="color:#a6e22e">fct_inorder</span>(term)) <span style="color:#f92672">%&gt;%</span>  <span style="color:#75715e"># Order the terms so that spread() keeps them in order</span>
    <span style="color:#a6e22e">spread</span>(term, value)
  
  just_coefs <span style="color:#f92672">&lt;-</span> params <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">filter</span>(key <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;estimate&#34;</span>) <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">select</span>(<span style="color:#f92672">-</span>m, <span style="color:#f92672">-</span>key)
  just_ses <span style="color:#f92672">&lt;-</span> params <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">filter</span>(key <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;std.error&#34;</span>) <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">select</span>(<span style="color:#f92672">-</span>m, <span style="color:#f92672">-</span>key)
  
  <span style="color:#75715e"># Meld the coefficients with Rubin&#39;s rules</span>
  coefs_melded <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">mi.meld</span>(just_coefs, just_ses)
  
  <span style="color:#75715e"># Create tidy output</span>
  output <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">as.data.frame</span>(<span style="color:#a6e22e">cbind</span>(<span style="color:#a6e22e">t</span>(coefs_melded<span style="color:#f92672">$</span>q.mi),
                                <span style="color:#a6e22e">t</span>(coefs_melded<span style="color:#f92672">$</span>se.mi))) <span style="color:#f92672">%&gt;%</span>
    magrittr<span style="color:#f92672">::</span><span style="color:#a6e22e">set_colnames</span>(<span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;estimate&#34;</span>, <span style="color:#e6db74">&#34;std.error&#34;</span>)) <span style="color:#f92672">%&gt;%</span>
    <span style="color:#a6e22e">mutate</span>(term <span style="color:#f92672">=</span> <span style="color:#a6e22e">rownames</span>(.)) <span style="color:#f92672">%&gt;%</span>
    <span style="color:#a6e22e">select</span>(term, <span style="color:#a6e22e">everything</span>()) <span style="color:#f92672">%&gt;%</span>
    <span style="color:#a6e22e">mutate</span>(statistic <span style="color:#f92672">=</span> estimate <span style="color:#f92672">/</span> std.error,
           p.value <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">pt</span>(<span style="color:#a6e22e">abs</span>(statistic), model_degrees_freedom, lower.tail <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>))
  
  <span style="color:#75715e"># Add confidence intervals if needed</span>
  <span style="color:#a6e22e">if </span>(conf.int <span style="color:#f92672">&amp;</span> conf.level) {
    <span style="color:#75715e"># Convert conf.level to tail values (0.025 when it&#39;s 0.95)</span>
    a <span style="color:#f92672">&lt;-</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">-</span> conf.level) <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>
    
    output <span style="color:#f92672">&lt;-</span> output <span style="color:#f92672">%&gt;%</span> 
      <span style="color:#a6e22e">mutate</span>(conf.low <span style="color:#f92672">=</span> estimate <span style="color:#f92672">+</span> std.error <span style="color:#f92672">*</span> <span style="color:#a6e22e">qt</span>(a, model_degrees_freedom),
             conf.high <span style="color:#f92672">=</span> estimate <span style="color:#f92672">+</span> std.error <span style="color:#f92672">*</span> <span style="color:#a6e22e">qt</span>((<span style="color:#ae81ff">1</span> <span style="color:#f92672">-</span> a), model_degrees_freedom))
  }
  
  <span style="color:#75715e"># tidy objects only have a data.frame class, not tbl_df or anything else</span>
  <span style="color:#a6e22e">class</span>(output) <span style="color:#f92672">&lt;-</span> <span style="color:#e6db74">&#34;data.frame&#34;</span>
  output
}

glance.melded <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">function</span>(x) {
  <span style="color:#75715e"># Because the properly melded parameters and the simple average of the</span>
  <span style="color:#75715e"># parameters of these models are roughly the same (see</span>
  <span style="color:#75715e"># https://www.andrewheiss.com/blog/2018/03/07/amelia-tidy-melding/), for the</span>
  <span style="color:#75715e"># sake of simplicty we just take the average here</span>
  output <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">tibble</span>(models <span style="color:#f92672">=</span> <span style="color:#a6e22e">unclass</span>(x)) <span style="color:#f92672">%&gt;%</span>
    <span style="color:#a6e22e">mutate</span>(glance <span style="color:#f92672">=</span> models <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">map</span>(glance)) <span style="color:#f92672">%&gt;%</span>
    <span style="color:#a6e22e">unnest</span>(glance) <span style="color:#f92672">%&gt;%</span>
    <span style="color:#a6e22e">summarize_at</span>(<span style="color:#a6e22e">vars</span>(r.squared, adj.r.squared, sigma, statistic, p.value, df, 
                      logLik, AIC, BIC, deviance, df.residual),
                 <span style="color:#a6e22e">list</span>(mean)) <span style="color:#f92672">%&gt;%</span>
    <span style="color:#a6e22e">mutate</span>(m <span style="color:#f92672">=</span> <span style="color:#a6e22e">as.integer</span>(<span style="color:#a6e22e">length</span>(x)))
  
  <span style="color:#75715e"># glance objects only have a data.frame class, not tbl_df or anything else</span>
  <span style="color:#a6e22e">class</span>(output) <span style="color:#f92672">&lt;-</span> <span style="color:#e6db74">&#34;data.frame&#34;</span>
  output
}

nobs.melded <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">function</span>(x, <span style="color:#66d9ef">...</span>) {
  <span style="color:#75715e"># Take the number of observations from the first model</span>
  <span style="color:#a6e22e">nobs</span>(x[[1]])
}
</code></pre></div><p>With these three functions, we can now use <code>glance()</code> and <code>tidy()</code> on a list of models with the class <code>melded</code>, like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Extract the models into a vector and make it a &#34;melded&#34; class</span>
models_imputed <span style="color:#f92672">&lt;-</span> models_imputed_df<span style="color:#f92672">$</span>model
<span style="color:#75715e"># Without this, R won&#39;t use our custom tidy.melded() or glance.melded() functions</span>
<span style="color:#a6e22e">class</span>(models_imputed) <span style="color:#f92672">&lt;-</span> <span style="color:#e6db74">&#34;melded&#34;</span>
<span style="color:#a6e22e">glance</span>(models_imputed)
<span style="color:#75715e">##   r.squared adj.r.squared sigma statistic  p.value df logLik  AIC  BIC deviance</span>
<span style="color:#75715e">## 1     0.657         0.651   348       112 9.68e-28  2   -871 1750 1761 14154815</span>
<span style="color:#75715e">##   df.residual m</span>
<span style="color:#75715e">## 1         117 5</span>
<span style="color:#a6e22e">tidy</span>(models_imputed)
<span style="color:#75715e">##          term estimate std.error statistic  p.value</span>
<span style="color:#75715e">## 1 (Intercept)    120.6     96.67      1.25 2.15e-01</span>
<span style="color:#75715e">## 2       trade     18.1      1.24     14.63 3.45e-28</span>
<span style="color:#75715e">## 3      civlib   -637.8    181.13     -3.52 6.13e-04</span>
</code></pre></div><p>Even better, though, is that we can use these imputed models in a huxtable regression table. And, because I included a column named <code>m</code> in <code>glance.melded()</code>, we can also include it in the regression output!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">huxreg</span>(model_original1, model_original2, models_imputed,
       statistics <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(N <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;nobs&#34;</span>, R2 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;r.squared&#34;</span>, `Adj R2` <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;adj.r.squared&#34;</span>, 
                      <span style="color:#e6db74">&#34;logLik&#34;</span>, <span style="color:#e6db74">&#34;AIC&#34;</span>, <span style="color:#e6db74">&#34;m&#34;</span>)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">print_screen</span>()
<span style="color:#75715e">##                ────────────────────────────────────────────────────────────</span>
<span style="color:#75715e">##                                         (1)            (2)            (3)  </span>
<span style="color:#75715e">##                              ──────────────────────────────────────────────</span>
<span style="color:#75715e">##                  (Intercept)    136.063        166.435        120.591      </span>
<span style="color:#75715e">##                                (100.409)       (94.871)       (96.669)     </span>
<span style="color:#75715e">##                  trade           18.027 ***     18.494 ***     18.089 ***  </span>
<span style="color:#75715e">##                                  (1.272)        (1.204)        (1.237)     </span>
<span style="color:#75715e">##                  civlib        -665.428 ***   -588.722 **    -637.832 ***  </span>
<span style="color:#75715e">##                                (185.436)      (175.717)      (181.130)     </span>
<span style="color:#75715e">##                  infl                           -6.336 ***                 </span>
<span style="color:#75715e">##                                                 (1.620)                    </span>
<span style="color:#75715e">##                              ──────────────────────────────────────────────</span>
<span style="color:#75715e">##                  N              115            115            120          </span>
<span style="color:#75715e">##                  R2               0.653          0.695          0.657      </span>
<span style="color:#75715e">##                  Adj R2           0.647          0.687          0.651      </span>
<span style="color:#75715e">##                  logLik        -836.136       -828.709       -870.954      </span>
<span style="color:#75715e">##                  AIC           1680.272       1667.418       1749.908      </span>
<span style="color:#75715e">##                  m                                              5.000      </span>
<span style="color:#75715e">##                ────────────────────────────────────────────────────────────</span>
<span style="color:#75715e">##                  *** p &lt; 0.001; ** p &lt; 0.01; * p &lt; 0.05.                   </span>
<span style="color:#75715e">## </span>
<span style="color:#75715e">## Column names: names, model1, model2, model3</span>
</code></pre></div>%!s(MISSING)]]></content>
        <category term="r" />
        <category term="imputation" />
        <category term="tidyverse" />
        <category term="markdown" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Meld regression output from multiple imputations with tidyverse]]></title>
        <link href="https://www.shagunjhaver.com/blog/2018/03/07/amelia-tidy-melding/" rel="alternate" />
        <published>2018-03-07T00:00:00+00:00</published>
        <updated>2018-03-07T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2018/03/07/amelia-tidy-melding/</id>
        <summary type="html"><![CDATA[Use tidyverse functions to correctly meld and pool multiply imputed model output.]]></summary>
        <content type="html"><![CDATA[<p><span class="small">(<a href="https://github.com/andrewheiss/amelia-tidy-melding">See this notebook on GitHub</a>)</span></p>
<hr>
<p>Missing data can significantly influence the results of normal regression models, since the default in R and most other statistical packages is to throw away any rows with missing variables. To avoid unnecessarily throwing out data, it&rsquo;s helpful to impute missing values. One of the best ways to do this is to build a separate regression model to make predictions that fill in the gaps in data. This isn&rsquo;t always accurate, so it&rsquo;s best to make many iterations of predictions (in imputation parlance, <code>\(m\)</code> is the number of imputations done to a dataset). After making <code>\(m\)</code> datasets, you can use this data by (1) running statistical tests on each imputation individually and then (2) pooling those results into a single number. The <a href="https://cran.r-project.org/web/packages/Amelia/vignettes/amelia.pdf">excellent Amelia vignette</a> details the theory and mechanics of how to use multiple imputation, and it&rsquo;s a fantastic resource.</p>
<p>There are several packages for dealing with missing data in R, including <a href="https://cran.r-project.org/package=mi"><code>mi</code></a>, <a href="https://cran.r-project.org/package=mice"><code>mice</code></a>, and <a href="https://cran.r-project.org/package=Amelia"><code>Amelia</code></a>, and Thomas Leeper has <a href="http://thomasleeper.com/Rcourse/Tutorials/mi.html">a short overview of how to use all three</a>. I&rsquo;m partial to <a href="https://gking.harvard.edu/amelia">Amelia</a>, since it&rsquo;s designed to work well with time series-cross sectional data and can deal with complicated features like country-year observations.</p>
<p>Because Amelia is written by Gary King, et al., it works with <a href="https://zeligproject.org/">Zelig</a>, a separate framework that&rsquo;s designed to simplify modeling in R. With Zelig + Amelia, you can combine all of the <code>\(m\)</code> imputations automatically with whatever Zelig uses for printing model results. I&rsquo;m not a huge fan of Zelig, though, and I prefer using <code>lm()</code>, <code>glm()</code>, <code>stan_glm()</code>, and gang on my own, thank you very much.</p>
<p>However, doing it on my own means there&rsquo;s a little more work involved with combining coefficients and parameters across imputations. Fortunately, the <a href="https://www.tidyverse.org/">tidyverse</a>—specifically its ability to store models within data frames—makes it really easy to deal with models based on imputed data. Here&rsquo;s how to do it using tidy functions. The code for this whole process can be greatly simplified in real life. You technically don&rsquo;t need all these intermediate steps, though they&rsquo;re helpful for seeing what&rsquo;s going on behind the scenes.</p>
<p>We&rsquo;ll start by working with some basic example imputed data frame from Amelia&rsquo;s built-in data. We create 5 imputed datasets defining countries and years as cross sections and time series, and we log GDP per capita in the predictive model:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">library</span>(tidyverse)
<span style="color:#a6e22e">library</span>(Amelia)
<span style="color:#a6e22e">library</span>(broom)

<span style="color:#a6e22e">set.seed</span>(<span style="color:#ae81ff">1234</span>)
<span style="color:#a6e22e">data</span>(africa)
imp_amelia <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">amelia</span>(x <span style="color:#f92672">=</span> africa, m <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>, cs <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;country&#34;</span>, ts <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;year&#34;</span>, 
                     logs <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;gdp_pc&#34;</span>, p2s <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>)
</code></pre></div><p>The resulting object contains a list of data frames, and each imputed dataset is stored in a list slot named &ldquo;imputations&rdquo; or <code>imp_amelia$imputations</code>. We can combine these all into one big data frame with <code>bind_rows()</code>, group by the imputation number ($m$), and nest them into imputation-specific rows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># unclass() is necessary because bind_rows() will complain when dealing with</span>
<span style="color:#75715e"># lists with the &#34;amelia&#34; class, which is what amelia() returns</span>
all_imputations <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">bind_rows</span>(<span style="color:#a6e22e">unclass</span>(imp_amelia<span style="color:#f92672">$</span>imputations), .id <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;m&#34;</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">group_by</span>(m) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">nest</span>()

all_imputations
<span style="color:#75715e">## # A tibble: 5 x 2</span>
<span style="color:#75715e">## # Groups:   m [5]</span>
<span style="color:#75715e">##   m     data              </span>
<span style="color:#75715e">##   &lt;chr&gt; &lt;list&gt;            </span>
<span style="color:#75715e">## 1 imp1  &lt;tibble [120 × 7]&gt;</span>
<span style="color:#75715e">## 2 imp2  &lt;tibble [120 × 7]&gt;</span>
<span style="color:#75715e">## 3 imp3  &lt;tibble [120 × 7]&gt;</span>
<span style="color:#75715e">## 4 imp4  &lt;tibble [120 × 7]&gt;</span>
<span style="color:#75715e">## 5 imp5  &lt;tibble [120 × 7]&gt;</span>
</code></pre></div><p>With this nested data, we can use <code>purrr::map()</code> to run models and return tidy summaries of those models directly in the data frame:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">models_imputations <span style="color:#f92672">&lt;-</span> all_imputations <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(model <span style="color:#f92672">=</span> data <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">map</span>(<span style="color:#f92672">~</span> <span style="color:#a6e22e">lm</span>(gdp_pc <span style="color:#f92672">~</span> trade <span style="color:#f92672">+</span> civlib, data <span style="color:#f92672">=</span> .)),
         tidied <span style="color:#f92672">=</span> model <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">map</span>(<span style="color:#f92672">~</span> <span style="color:#a6e22e">tidy</span>(., conf.int <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>)),
         glance <span style="color:#f92672">=</span> model <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">map</span>(<span style="color:#f92672">~</span> <span style="color:#a6e22e">glance</span>(.)))

models_imputations
<span style="color:#75715e">## # A tibble: 5 x 5</span>
<span style="color:#75715e">## # Groups:   m [5]</span>
<span style="color:#75715e">##   m     data               model  tidied           glance           </span>
<span style="color:#75715e">##   &lt;chr&gt; &lt;list&gt;             &lt;list&gt; &lt;list&gt;           &lt;list&gt;           </span>
<span style="color:#75715e">## 1 imp1  &lt;tibble [120 × 7]&gt; &lt;lm&gt;   &lt;tibble [3 × 7]&gt; &lt;tibble [1 × 12]&gt;</span>
<span style="color:#75715e">## 2 imp2  &lt;tibble [120 × 7]&gt; &lt;lm&gt;   &lt;tibble [3 × 7]&gt; &lt;tibble [1 × 12]&gt;</span>
<span style="color:#75715e">## 3 imp3  &lt;tibble [120 × 7]&gt; &lt;lm&gt;   &lt;tibble [3 × 7]&gt; &lt;tibble [1 × 12]&gt;</span>
<span style="color:#75715e">## 4 imp4  &lt;tibble [120 × 7]&gt; &lt;lm&gt;   &lt;tibble [3 × 7]&gt; &lt;tibble [1 × 12]&gt;</span>
<span style="color:#75715e">## 5 imp5  &lt;tibble [120 × 7]&gt; &lt;lm&gt;   &lt;tibble [3 × 7]&gt; &lt;tibble [1 × 12]&gt;</span>
</code></pre></div><p>Having the models structured like this makes it easy to access coefficients for models from individual imputations, like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">models_imputations <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">filter</span>(m <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;imp1&#34;</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">unnest</span>(tidied)
<span style="color:#75715e">## # A tibble: 3 x 11</span>
<span style="color:#75715e">## # Groups:   m [1]</span>
<span style="color:#75715e">##   m     data   model term  estimate std.error statistic  p.value conf.low conf.high glance</span>
<span style="color:#75715e">##   &lt;chr&gt; &lt;list&gt; &lt;lis&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;list&gt;</span>
<span style="color:#75715e">## 1 imp1  &lt;tibb… &lt;lm&gt;  (Int…    114.      97.7       1.17 2.44e- 1    -79.0     308.  &lt;tibb…</span>
<span style="color:#75715e">## 2 imp1  &lt;tibb… &lt;lm&gt;  trade     18.1      1.25     14.4  9.65e-28     15.6      20.6 &lt;tibb…</span>
<span style="color:#75715e">## 3 imp1  &lt;tibb… &lt;lm&gt;  civl…   -631.     182.       -3.46 7.47e- 4   -993.     -270.  &lt;tibb…</span>
</code></pre></div><p>More importantly, we can access the coefficients for all the models, which is essential for combining and averaging the coefficients across all five imputations.</p>
<p>Pooling or melding coefficients from many models is a little trickier than just averaging them all together (as delightfully easy as that would be). <a href="https://doi.org/10.1002/9780470316696">Donald Rubin (1987)</a> outlines an algorithm/set of rules for combining the results from multiply imputed datasets that reflects the averages and accounts for differences in standard errors. Rubin&rsquo;s rules are essentially a fancier, more robust way of averaging coefficients and other quantities of interest across imputations.</p>
<p>Amelia has a built-in function for using Rubin&rsquo;s rules named <code>mi.meld()</code> that accepts two m-by-k matrices (one for coefficients and one for standard errors) like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">      coef1  coef2  coefn
imp1  x      x      x
imp2  x      x      x
impn  x      x      x
</code></pre></div><p>We can use some dplyr/tidyr magic to wrangle the regression results into this form:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Create a wide data frame of just the coefficients and standard errors</span>
params <span style="color:#f92672">&lt;-</span> models_imputations <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">unnest</span>(tidied) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">select</span>(m, term, estimate, std.error) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">gather</span>(key, value, estimate, std.error) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">spread</span>(term, value) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">ungroup</span>()
params
<span style="color:#75715e">## # A tibble: 10 x 5</span>
<span style="color:#75715e">##    m     key       `(Intercept)` civlib trade</span>
<span style="color:#75715e">##    &lt;chr&gt; &lt;chr&gt;             &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;</span>
<span style="color:#75715e">##  1 imp1  estimate          114.   -631. 18.1 </span>
<span style="color:#75715e">##  2 imp1  std.error          97.7   182.  1.25</span>
<span style="color:#75715e">##  3 imp2  estimate          123.   -626. 18.0 </span>
<span style="color:#75715e">##  4 imp2  std.error          96.8   181.  1.24</span>
<span style="color:#75715e">##  5 imp3  estimate          114.   -633. 18.2 </span>
<span style="color:#75715e">##  6 imp3  std.error          96.5   181.  1.24</span>
<span style="color:#75715e">##  7 imp4  estimate          119.   -651. 18.2 </span>
<span style="color:#75715e">##  8 imp4  std.error          95.4   180.  1.22</span>
<span style="color:#75715e">##  9 imp5  estimate          132.   -648. 18.0 </span>
<span style="color:#75715e">## 10 imp5  std.error          95.2   180.  1.22</span>
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Extract just the coefficients</span>
just_coefs <span style="color:#f92672">&lt;-</span> params <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">filter</span>(key <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;estimate&#34;</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">select</span>(<span style="color:#f92672">-</span>m, <span style="color:#f92672">-</span>key)
just_coefs
<span style="color:#75715e">## # A tibble: 5 x 3</span>
<span style="color:#75715e">##   `(Intercept)` civlib trade</span>
<span style="color:#75715e">##           &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;</span>
<span style="color:#75715e">## 1          114.  -631.  18.1</span>
<span style="color:#75715e">## 2          123.  -626.  18.0</span>
<span style="color:#75715e">## 3          114.  -633.  18.2</span>
<span style="color:#75715e">## 4          119.  -651.  18.2</span>
<span style="color:#75715e">## 5          132.  -648.  18.0</span>
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Extract just the standard errors</span>
just_ses <span style="color:#f92672">&lt;-</span> params <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">filter</span>(key <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;std.error&#34;</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">select</span>(<span style="color:#f92672">-</span>m, <span style="color:#f92672">-</span>key)
just_ses
<span style="color:#75715e">## # A tibble: 5 x 3</span>
<span style="color:#75715e">##   `(Intercept)` civlib trade</span>
<span style="color:#75715e">##           &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;</span>
<span style="color:#75715e">## 1          97.7   182.  1.25</span>
<span style="color:#75715e">## 2          96.8   181.  1.24</span>
<span style="color:#75715e">## 3          96.5   181.  1.24</span>
<span style="color:#75715e">## 4          95.4   180.  1.22</span>
<span style="color:#75715e">## 5          95.2   180.  1.22</span>
</code></pre></div><p>We can then use these matrices in <code>mi.meld()</code>, which returns a list with two slots—<code>q.mi</code> and <code>se.mi</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">coefs_melded <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">mi.meld</span>(just_coefs, just_ses)
coefs_melded
<span style="color:#75715e">## $q.mi</span>
<span style="color:#75715e">##      (Intercept) civlib trade</span>
<span style="color:#75715e">## [1,]         121   -638  18.1</span>
<span style="color:#75715e">## </span>
<span style="color:#75715e">## $se.mi</span>
<span style="color:#75715e">##      (Intercept) civlib trade</span>
<span style="color:#75715e">## [1,]        96.7    181  1.24</span>
</code></pre></div><p>Armed with these, we can create our regression summary table with some more dplyr wizardry. To calculate the p-value and confidence intervals, we need to extract the degrees of freedom from one of the imputed models</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">model_degree_freedom <span style="color:#f92672">&lt;-</span> models_imputations <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">unnest</span>(glance) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">filter</span>(m <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;imp1&#34;</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">pull</span>(df.residual)

melded_summary <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">as.data.frame</span>(<span style="color:#a6e22e">cbind</span>(<span style="color:#a6e22e">t</span>(coefs_melded<span style="color:#f92672">$</span>q.mi),
                                      <span style="color:#a6e22e">t</span>(coefs_melded<span style="color:#f92672">$</span>se.mi))) <span style="color:#f92672">%&gt;%</span>
  magrittr<span style="color:#f92672">::</span><span style="color:#a6e22e">set_colnames</span>(<span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;estimate&#34;</span>, <span style="color:#e6db74">&#34;std.error&#34;</span>)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(term <span style="color:#f92672">=</span> <span style="color:#a6e22e">rownames</span>(.)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">select</span>(term, <span style="color:#a6e22e">everything</span>()) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(statistic <span style="color:#f92672">=</span> estimate <span style="color:#f92672">/</span> std.error,
         conf.low <span style="color:#f92672">=</span> estimate <span style="color:#f92672">+</span> std.error <span style="color:#f92672">*</span> <span style="color:#a6e22e">qt</span>(<span style="color:#ae81ff">0.025</span>, model_degree_freedom),
         conf.high <span style="color:#f92672">=</span> estimate <span style="color:#f92672">+</span> std.error <span style="color:#f92672">*</span> <span style="color:#a6e22e">qt</span>(<span style="color:#ae81ff">0.975</span>, model_degree_freedom),
         p.value <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">pt</span>(<span style="color:#a6e22e">abs</span>(statistic), model_degree_freedom, lower.tail <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>))

melded_summary
<span style="color:#75715e">##          term estimate std.error statistic conf.low conf.high  p.value</span>
<span style="color:#75715e">## 1 (Intercept)    120.6     96.67      1.25    -70.9     312.0 2.15e-01</span>
<span style="color:#75715e">## 2      civlib   -637.8    181.13     -3.52   -996.6    -279.1 6.13e-04</span>
<span style="color:#75715e">## 3       trade     18.1      1.24     14.63     15.6      20.5 3.45e-28</span>
</code></pre></div><p>Hooray! Correctly melded coefficients and standard errors!</p>
<p>But what do we do about the other model details, like <code>\(R^2\)</code> and the F-statistic? How do we report those?</p>
<p>According to <a href="https://lists.gking.harvard.edu/pipermail/amelia/2016-July/001249.html">a post on the Amelia mailing list</a>, there are two ways. First, we can use a fancy method for combining <code>\(R^2\)</code> and adjusted <code>\(R^2\)</code> described by <a href="https://doi.org/10.1080/02664760802553000">Ofer Harel (2009)</a>. Second, we can just take the average of the <code>\(R^2\)</code>s from all the imputed models. The results should be roughly the same.</p>
<p>Harel&rsquo;s method involves two steps:</p>
<ol>
<li>In each complete data set, calculate the <code>\(R^2\)</code>, take its square root ($R$), transform <code>\(R\)</code> with a Fisher z-transformation ($Q = \frac{1}{2} \log_{e}(\frac{1 + R}{1 - R})$), and calculate the variance of <code>\(R^2\)</code> (which is <code>\(\frac{1}{\text{degrees of freedom}}\)</code>)</li>
<li>Meld the resulting <code>\(Q\)</code> and variance using Rubin&rsquo;s rules (<code>mi.meld()</code>; this creates <code>\(Q_a\)</code>), undo the z-transformation ($R_a = (\frac{-1 + \exp(2Q_a)}{1 + \exp(2Q_a)})^2$), and square it ($R_a^2$)</li>
</ol>
<p>That looks complicated, but it&rsquo;s fairly easy with some dplyr magic. Here&rsquo;s how to do it for adjusted <code>\(R^2\)</code> (the same process works for regular <code>\(R^2\)</code> too):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Step 1: in each complete data set, calculate R2, take its square root,</span>
<span style="color:#75715e"># transform it with Fisher z-transformation, and calculate the variance of R2\</span>
r2s <span style="color:#f92672">&lt;-</span> models_imputations <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">unnest</span>(glance) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">select</span>(m, adj.r.squared, df.residual) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(R <span style="color:#f92672">=</span> <span style="color:#a6e22e">sqrt</span>(adj.r.squared),  <span style="color:#75715e"># Regular R</span>
         Q <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.5</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">log</span>((R <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">/</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">-</span> R)),  <span style="color:#75715e"># Fisher z-transformation</span>
         se <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">/</span> df.residual)  <span style="color:#75715e"># R2 variance</span>
r2s
<span style="color:#75715e">## # A tibble: 5 x 6</span>
<span style="color:#75715e">## # Groups:   m [5]</span>
<span style="color:#75715e">##   m     adj.r.squared df.residual     R     Q      se</span>
<span style="color:#75715e">##   &lt;chr&gt;         &lt;dbl&gt;       &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;</span>
<span style="color:#75715e">## 1 imp1          0.643         117 0.802  1.10 0.00855</span>
<span style="color:#75715e">## 2 imp2          0.648         117 0.805  1.11 0.00855</span>
<span style="color:#75715e">## 3 imp3          0.652         117 0.807  1.12 0.00855</span>
<span style="color:#75715e">## 4 imp4          0.660         117 0.812  1.13 0.00855</span>
<span style="color:#75715e">## 5 imp5          0.654         117 0.808  1.12 0.00855</span>
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Step 2: combine the results using Rubin&#39;s rules (mi.meld()), inverse transform</span>
<span style="color:#75715e"># the value, and square it</span>

<span style="color:#75715e"># Meld the R2 values with mi.meld()</span>
Q_melded <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">mi.meld</span>(<span style="color:#a6e22e">as.matrix</span>(r2s<span style="color:#f92672">$</span>Q), <span style="color:#a6e22e">as.matrix</span>(r2s<span style="color:#f92672">$</span>se))

<span style="color:#75715e"># Inverse transform Q to R and square it</span>
r2_melded <span style="color:#f92672">&lt;-</span> ((<span style="color:#a6e22e">exp</span>(<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> Q_melded<span style="color:#f92672">$</span>q.mi) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">/</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">exp</span>(<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> Q_melded<span style="color:#f92672">$</span>q.mi)))^2
r2_melded
<span style="color:#75715e">##       [,1]</span>
<span style="color:#75715e">## [1,] 0.651</span>
</code></pre></div><p>The correctly pooled/melded <code>\(R^2\)</code> is thus 0.651. Neat.</p>
<p>How does this compare to just the average of all the <code>\(R^2\)</code>s from all the imputations?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">r2s_avg <span style="color:#f92672">&lt;-</span> models_imputations <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">ungroup</span>() <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">unnest</span>(glance) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">summarize</span>(adj.r.squared_avg <span style="color:#f92672">=</span> <span style="color:#a6e22e">mean</span>(adj.r.squared)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">pull</span>(adj.r.squared_avg)
r2s_avg
<span style="color:#75715e">## [1] 0.651</span>
</code></pre></div><p>The incorrectly averaged <code>\(R^2\)</code> is 0.651, which is basically identical to the correctly melded 0.651. This is probably because the models from the five imputed models are already fairly similar—there might be more variance in <code>\(R^2\)</code> in data that&rsquo;s less neat. But for this situation, the two approaches are essentially the same. Other model diagnostics like the F-statistic can probably be pooled just with averages as well. I haven&rsquo;t found any specific algorithms for melding them with fancy math.</p>
<p>So, in summary, combine the coefficients and standard errors from multiply imputed models with <code>mi.meld()</code> and combine other model parameters like <code>\(R^2\)</code> either with Harel&rsquo;s fancy method or by simply averaging them.</p>
%!s(MISSING)]]></content>
        <category term="r" />
        <category term="imputation" />
        <category term="tidyverse" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Fun with empirical and function-based derivatives in R]]></title>
        <link href="https://www.shagunjhaver.com/blog/2018/02/15/derivatives-r-fun/" rel="alternate" />
        <published>2018-02-15T00:00:00+00:00</published>
        <updated>2018-02-15T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2018/02/15/derivatives-r-fun/</id>
        <summary type="html"><![CDATA[Use R to do things with derivatives, both with actual functions and with existing empirical data.]]></summary>
        <content type="html"><![CDATA[<script src="/blog/2018/02/15/derivatives-r-fun/index_files/kePrint-0.0.1/kePrint.js"></script>
<link href="/blog/2018/02/15/derivatives-r-fun/index_files/lightable-0.0.1/lightable.css" rel="stylesheet" />
<p><span class="small">(<a href="https://github.com/andrewheiss/derivatives-r-fun">See this notebook on GitHub</a>)</span></p>
<hr>
<p><em>tl;dr</em>: Use functions like <code>Deriv::Deriv()</code>, <code>splinefun()</code>, <code>approxfun()</code>, and <code>uniroot()</code> to do things with derivatives in R, both with actual functions and with existing empirical data</p>
<hr>
<p>A typical microeconomics problem involves finding the optimal price and quantity of a product, given its demand and cost across different quantities. You can optimize this price and quantity and maximize profit by finding the point where the marginal cost and the marginal revenue (or the first derivatives of the cost and revenue functions) are equal to each other.</p>
<p>For instance, the demand for some product can be defined as <code>\(Q = 10 - 2P\)</code> (where <code>\(Q =\)</code> quantity and <code>\(P =\)</code> price). The revenue you get from selling that product is defined as <code>\(R = PQ\)</code> (just multiplying price × quantity), so through some algebraic trickery and rearranging of Ps and Qs, you can create a revenue function for this demand curve: <code>\(R = 5Q - 0.5Q^2\)</code>. The cost function for this product can be defined as <code>\(C = 0.25Q + 0.5Q^2\)</code>.</p>
<p>To figure out the optimal profit, we set the marginal cost and marginal revenue equations equal to each other and solve for Q. Here, <code>\(\frac{dC}{dQ} = MC = 0.25 + 0.5Q\)</code> and <code>\(\frac{dR}{dQ} = MR = 5 - Q\)</code>, so with algebra we can find the optimal point:</p>
<p>$$
<code>\begin{aligned} MC &amp;= MR \\ 0.25 + 0.5Q &amp;= 5 - Q \\ 1.5Q &amp;= 4.75 \\ Q &amp;= 3.1\overline{66} \end{aligned}</code>
$$</p>
<p>Phew. Calculus.</p>
<p>Doing this in R is fairly straightforward and far more flexible and far less algebra-intensive. First, define the functions:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">library</span>(tidyverse)
<span style="color:#a6e22e">library</span>(Deriv)
<span style="color:#a6e22e">library</span>(pander)

demand <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">function</span>(q) <span style="color:#ae81ff">5</span> <span style="color:#f92672">-</span> (<span style="color:#ae81ff">0.5</span> <span style="color:#f92672">*</span> q)
revenue <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">function</span>(q) (<span style="color:#ae81ff">5</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">0.5</span> <span style="color:#f92672">*</span> q) <span style="color:#f92672">*</span> q

cost <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">function</span>(q) (<span style="color:#ae81ff">0.25</span> <span style="color:#f92672">*</span> q) <span style="color:#f92672">+</span> (<span style="color:#ae81ff">0.5</span> <span style="color:#f92672">*</span> q)^2
</code></pre></div><p>Plotting these functions is easy with <code>geom_function()</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">ggplot</span>(data <span style="color:#f92672">=</span> <span style="color:#a6e22e">tibble</span>(x <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">:</span><span style="color:#ae81ff">10</span>), <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_function</span>(fun <span style="color:#f92672">=</span> cost, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">aes</span>(color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Total cost&#34;</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_function</span>(fun <span style="color:#f92672">=</span> revenue, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">aes</span>(color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Total revenue&#34;</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Quantity&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Price&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_y_continuous</span>(labels <span style="color:#f92672">=</span> scales<span style="color:#f92672">::</span>dollar) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_color_manual</span>(values <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;Total cost&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;red&#34;</span>, <span style="color:#e6db74">&#34;Total revenue&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;blue&#34;</span>),
                     name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Function&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_light</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(legend.position <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bottom&#34;</span>)
</code></pre></div><p><img src="/blog/2018/02/15/derivatives-r-fun/index_files/figure-html/plot-functions-1.png" width="75%" style="display: block; margin: auto;" /></p>
<p>Then, using <code>Deriv::Deriv()</code>, create derivative functions for the marginal cost and marginal revenue equations:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">mr <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">Deriv</span>(revenue, <span style="color:#e6db74">&#34;q&#34;</span>)
mc <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">Deriv</span>(cost, <span style="color:#e6db74">&#34;q&#34;</span>)
</code></pre></div><p>We can also plot these:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">ggplot</span>(data <span style="color:#f92672">=</span> <span style="color:#a6e22e">tibble</span>(x <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">:</span><span style="color:#ae81ff">10</span>), <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_function</span>(fun <span style="color:#f92672">=</span> mc, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">aes</span>(color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Marginal cost&#34;</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_function</span>(fun <span style="color:#f92672">=</span> mr, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">aes</span>(color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Marginal revenue&#34;</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Quantity&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Price&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_y_continuous</span>(labels <span style="color:#f92672">=</span> scales<span style="color:#f92672">::</span>dollar) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_color_manual</span>(values <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;Marginal cost&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;red&#34;</span>, <span style="color:#e6db74">&#34;Marginal revenue&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;blue&#34;</span>),
                     name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Function&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">coord_cartesian</span>(ylim <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">6</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_light</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(legend.position <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bottom&#34;</span>)
</code></pre></div><p><img src="/blog/2018/02/15/derivatives-r-fun/index_files/figure-html/plot-marginal-functions-1.png" width="75%" style="display: block; margin: auto;" /></p>
<p>Finally, use the <code>uniroot()</code> function to look for the point where <code>mc</code> and <code>mr</code> intersect within a given range (here I&rsquo;m looking between 1 and 10 since the demand curve goes negative after <code>\(Q =\)</code> 10):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">optimal_q <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">uniroot</span>(<span style="color:#a6e22e">function</span>(x) <span style="color:#a6e22e">mc</span>(x) <span style="color:#f92672">-</span> <span style="color:#a6e22e">mr</span>(x), <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">10</span>))
optimal_q<span style="color:#f92672">$</span>root
<span style="color:#75715e">## [1] 3.166667</span>
</code></pre></div><p>It&rsquo;s the same answer!</p>
<p>We can then plug <code>optimal_q$root</code> back into the marginal revenue and demand functions to find the optimal price (in a competitive market, the price should be equal to the marginal revenue, but this happens to be a monopoly, so the actual price is higher, but that&rsquo;s totally unrelated to the topic here):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">mr</span>(optimal_q<span style="color:#f92672">$</span>root)
<span style="color:#75715e">## [1] 1.833333</span>
<span style="color:#a6e22e">demand</span>(optimal_q<span style="color:#f92672">$</span>root)
<span style="color:#75715e">## [1] 3.416667</span>
<span style="color:#75715e"># oh noes monopolies</span>
</code></pre></div><p><strong>However! Wait! Stop!</strong> This is all well and fine if you have precise formulas for demand and cost. But real life is far messier than this. What if you don&rsquo;t know the underlying equations?</p>
<p>Often in economics, you have a set of quantities and prices based on empirical data. Market research and surveys can estimate the demand for a product, and tracking how fixed and variable costs change over time can estimate the costs for a product, but this data is all empirically based and not based in actual formulas.</p>
<p>For instance, suppose you have this table of prices, quantities, and costs (which is actually really based on the demand and cost functions from earlier):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">costs_revenues <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">tibble</span>(Quantity <span style="color:#f92672">=</span> <span style="color:#a6e22e">seq</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">1</span>),
                         Price <span style="color:#f92672">=</span> <span style="color:#a6e22e">demand</span>(Quantity),
                         `Total Revenue` <span style="color:#f92672">=</span> <span style="color:#a6e22e">revenue</span>(Quantity),
                         `Total Cost` <span style="color:#f92672">=</span> <span style="color:#a6e22e">cost</span>(Quantity),
                         Profit <span style="color:#f92672">=</span> `Total Revenue` <span style="color:#f92672">-</span> `Total Cost`)
</code></pre></div><table class=" pure-table pure-table-horizontal" style="margin-left: auto; margin-right: auto;">
 <thead>
  <tr>
   <th style="text-align:right;"> Quantity </th>
   <th style="text-align:left;"> Price </th>
   <th style="text-align:left;"> Total Revenue </th>
   <th style="text-align:left;"> Total Cost </th>
   <th style="text-align:left;"> Profit </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:right;"> 0 </td>
   <td style="text-align:left;"> $5.00 </td>
   <td style="text-align:left;"> $0.00 </td>
   <td style="text-align:left;"> $0.00 </td>
   <td style="text-align:left;"> $0.00 </td>
  </tr>
  <tr>
   <td style="text-align:right;"> 1 </td>
   <td style="text-align:left;"> $4.50 </td>
   <td style="text-align:left;"> $4.50 </td>
   <td style="text-align:left;"> $0.50 </td>
   <td style="text-align:left;"> $4.00 </td>
  </tr>
  <tr>
   <td style="text-align:right;"> 2 </td>
   <td style="text-align:left;"> $4.00 </td>
   <td style="text-align:left;"> $8.00 </td>
   <td style="text-align:left;"> $1.50 </td>
   <td style="text-align:left;"> $6.50 </td>
  </tr>
  <tr>
   <td style="text-align:right;"> 3 </td>
   <td style="text-align:left;"> $3.50 </td>
   <td style="text-align:left;"> $10.50 </td>
   <td style="text-align:left;"> $3.00 </td>
   <td style="text-align:left;"> $7.50 </td>
  </tr>
  <tr>
   <td style="text-align:right;"> 4 </td>
   <td style="text-align:left;"> $3.00 </td>
   <td style="text-align:left;"> $12.00 </td>
   <td style="text-align:left;"> $5.00 </td>
   <td style="text-align:left;"> $7.00 </td>
  </tr>
  <tr>
   <td style="text-align:right;"> 5 </td>
   <td style="text-align:left;"> $2.50 </td>
   <td style="text-align:left;"> $12.50 </td>
   <td style="text-align:left;"> $7.50 </td>
   <td style="text-align:left;"> $5.00 </td>
  </tr>
  <tr>
   <td style="text-align:right;"> 6 </td>
   <td style="text-align:left;"> $2.00 </td>
   <td style="text-align:left;"> $12.00 </td>
   <td style="text-align:left;"> $10.50 </td>
   <td style="text-align:left;"> $1.50 </td>
  </tr>
  <tr>
   <td style="text-align:right;"> 7 </td>
   <td style="text-align:left;"> $1.50 </td>
   <td style="text-align:left;"> $10.50 </td>
   <td style="text-align:left;"> $14.00 </td>
   <td style="text-align:left;"> -$3.50 </td>
  </tr>
  <tr>
   <td style="text-align:right;"> 8 </td>
   <td style="text-align:left;"> $1.00 </td>
   <td style="text-align:left;"> $8.00 </td>
   <td style="text-align:left;"> $18.00 </td>
   <td style="text-align:left;"> -$10.00 </td>
  </tr>
  <tr>
   <td style="text-align:right;"> 9 </td>
   <td style="text-align:left;"> $0.50 </td>
   <td style="text-align:left;"> $4.50 </td>
   <td style="text-align:left;"> $22.50 </td>
   <td style="text-align:left;"> -$18.00 </td>
  </tr>
  <tr>
   <td style="text-align:right;"> 10 </td>
   <td style="text-align:left;"> $0.00 </td>
   <td style="text-align:left;"> $0.00 </td>
   <td style="text-align:left;"> $27.50 </td>
   <td style="text-align:left;"> -$27.50 </td>
  </tr>
</tbody>
</table>
<p>We can still use R to find the optimal quantity, <em><strong>even without actual formulas</strong></em>. R has two base functions for approximating functions based on existing data. <code>approxfun()</code> will try to fit data linearly, and <code>splinefun()</code> will try to fit data with cubic splines (i.e. it can handle curvy lines better than <code>approxfun()</code>).</p>
<p>First, we can plot the revenue and cost columns to see their shape:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">costs_revenues_plot <span style="color:#f92672">&lt;-</span> costs_revenues <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">select</span>(Quantity, <span style="color:#a6e22e">starts_with</span>(<span style="color:#e6db74">&#34;Total&#34;</span>)) <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">gather</span>(Variable, Price, <span style="color:#f92672">-</span>Quantity)

<span style="color:#a6e22e">ggplot</span>(costs_revenues_plot, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> Quantity, y <span style="color:#f92672">=</span> Price, color <span style="color:#f92672">=</span> Variable)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_line</span>(size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_y_continuous</span>(labels <span style="color:#f92672">=</span> scales<span style="color:#f92672">::</span>dollar) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_color_manual</span>(values <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;red&#34;</span>, <span style="color:#e6db74">&#34;blue&#34;</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_light</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(legend.position <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bottom&#34;</span>)
</code></pre></div><p><img src="/blog/2018/02/15/derivatives-r-fun/index_files/figure-html/empirical-cost-revenue-1.png" width="75%" style="display: block; margin: auto;" /></p>
<p>Because both variables are curvilinear, it&rsquo;s probably best to approximate their functions using splines with <code>splinefun()</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">cost_empirical <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">splinefun</span>(x <span style="color:#f92672">=</span> costs_revenues<span style="color:#f92672">$</span>Quantity, 
                            y <span style="color:#f92672">=</span> costs_revenues<span style="color:#f92672">$</span>`Total Cost`)

revenue_empirical <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">splinefun</span>(x <span style="color:#f92672">=</span> costs_revenues<span style="color:#f92672">$</span>Quantity, 
                               y <span style="color:#f92672">=</span> costs_revenues<span style="color:#f92672">$</span>`Total Revenue`)
</code></pre></div><p>If we compare the empirically-based functions with their real-life counterparts, we can see that the approximation worked great:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">cost</span>(<span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#ae81ff">10</span>)
<span style="color:#75715e">##  [1]  0.5  1.5  3.0  5.0  7.5 10.5 14.0 18.0 22.5 27.5</span>
<span style="color:#a6e22e">cost_empirical</span>(<span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#ae81ff">10</span>)
<span style="color:#75715e">##  [1]  0.5  1.5  3.0  5.0  7.5 10.5 14.0 18.0 22.5 27.5</span>

<span style="color:#a6e22e">revenue</span>(<span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#ae81ff">10</span>)
<span style="color:#75715e">##  [1]  4.5  8.0 10.5 12.0 12.5 12.0 10.5  8.0  4.5  0.0</span>
<span style="color:#a6e22e">revenue_empirical</span>(<span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#ae81ff">10</span>)
<span style="color:#75715e">##  [1]  4.5  8.0 10.5 12.0 12.5 12.0 10.5  8.0  4.5  0.0</span>
</code></pre></div><p>Determining the marginal cost and revenue functions from these approximations is surprisingly easy because <code>splinefun()</code> objects have a built-in mechanism for returning derivatives with a <code>deriv</code> argument:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">mc</span>(<span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#ae81ff">10</span>)
<span style="color:#75715e">##  [1] 0.75 1.25 1.75 2.25 2.75 3.25 3.75 4.25 4.75 5.25</span>
<span style="color:#a6e22e">cost_empirical</span>(<span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#ae81ff">10</span>, deriv <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>)
<span style="color:#75715e">##  [1] 0.75 1.25 1.75 2.25 2.75 3.25 3.75 4.25 4.75 5.25</span>

<span style="color:#a6e22e">mr</span>(<span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#ae81ff">10</span>)
<span style="color:#75715e">##  [1]  4  3  2  1  0 -1 -2 -3 -4 -5</span>
<span style="color:#a6e22e">revenue_empirical</span>(<span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#ae81ff">10</span>, deriv <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>)
<span style="color:#75715e">##  [1]  4  3  2  1  0 -1 -2 -3 -4 -5</span>
</code></pre></div><p>Magic!</p>
<p>We can plot these empirically-approximated marginal functions and see that they intersect, as expected:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">ggplot</span>(data <span style="color:#f92672">=</span> <span style="color:#a6e22e">tibble</span>(x <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">:</span><span style="color:#ae81ff">10</span>), <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_function</span>(fun <span style="color:#f92672">=</span> cost_empirical, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, args <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(deriv <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>),
                <span style="color:#a6e22e">aes</span>(color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Marginal cost&#34;</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_function</span>(fun <span style="color:#f92672">=</span> revenue_empirical, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, args <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(deriv <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>),
                <span style="color:#a6e22e">aes</span>(color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Marginal revenue&#34;</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Quantity&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Price&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_y_continuous</span>(labels <span style="color:#f92672">=</span> scales<span style="color:#f92672">::</span>dollar) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_color_manual</span>(values <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;Marginal cost&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;red&#34;</span>, <span style="color:#e6db74">&#34;Marginal revenue&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;blue&#34;</span>),
                     name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Empirical function&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">coord_cartesian</span>(ylim <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">6</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_light</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(legend.position <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bottom&#34;</span>)
</code></pre></div><p><img src="/blog/2018/02/15/derivatives-r-fun/index_files/figure-html/plot-empirical-marginal-functions-1.png" width="75%" style="display: block; margin: auto;" /></p>
<p>Finally, we can use <code>uniroot()</code> to find where these two functions intersect:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">optimal_q_empirical <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">uniroot</span>(<span style="color:#a6e22e">function</span>(x) <span style="color:#a6e22e">cost_empirical</span>(x, deriv <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">-</span> 
                                 <span style="color:#a6e22e">revenue_empirical</span>(x, deriv <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>), <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">10</span>))
optimal_q_empirical<span style="color:#f92672">$</span>root
<span style="color:#75715e">## [1] 3.166667</span>
</code></pre></div><p>It&rsquo;s the same!</p>
<p>And just like before, we can find the optimal price, given this quantity. But first we have to create an empirical function for the demand. The demand variable is linear here, so we can use <code>approxfun()</code>, but <code>splinefun()</code> works just fine too (and it has built-in derivative capabilities, while <code>approxfun()</code> doesn&rsquo;t).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">revenue_empirical</span>(optimal_q_empirical<span style="color:#f92672">$</span>root, deriv <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>)
<span style="color:#75715e">## [1] 1.833333</span>

demand_empricial_spline <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">splinefun</span>(x <span style="color:#f92672">=</span> costs_revenues<span style="color:#f92672">$</span>Quantity,
                                     y <span style="color:#f92672">=</span> costs_revenues<span style="color:#f92672">$</span>Price)

demand_empricial_approx <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">approxfun</span>(x <span style="color:#f92672">=</span> costs_revenues<span style="color:#f92672">$</span>Quantity,
                                     y <span style="color:#f92672">=</span> costs_revenues<span style="color:#f92672">$</span>Price)

<span style="color:#a6e22e">demand_empricial_spline</span>(optimal_q_empirical<span style="color:#f92672">$</span>root)
<span style="color:#75715e">## [1] 3.416667</span>
<span style="color:#a6e22e">demand_empricial_approx</span>(optimal_q_empirical<span style="color:#f92672">$</span>root)
<span style="color:#75715e">## [1] 3.416667</span>
<span style="color:#75715e"># oh noes monopolies again</span>
</code></pre></div><p>We can plot all of these things together:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">ggplot</span>(data <span style="color:#f92672">=</span> <span style="color:#a6e22e">tibble</span>(x <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">:</span><span style="color:#ae81ff">10</span>), <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_function</span>(fun <span style="color:#f92672">=</span> demand_empricial_spline, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>,
                <span style="color:#a6e22e">aes</span>(color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Demand&#34;</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_function</span>(fun <span style="color:#f92672">=</span> cost_empirical, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, args <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(deriv <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>),
                <span style="color:#a6e22e">aes</span>(color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Marginal cost&#34;</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_function</span>(fun <span style="color:#f92672">=</span> revenue_empirical, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, args <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(deriv <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>),
                <span style="color:#a6e22e">aes</span>(color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Marginal revenue&#34;</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_vline</span>(xintercept <span style="color:#f92672">=</span> optimal_q_empirical<span style="color:#f92672">$</span>root, 
             color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;grey50&#34;</span>, linetype <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;dashed&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_hline</span>(yintercept <span style="color:#f92672">=</span> <span style="color:#a6e22e">revenue_empirical</span>(optimal_q_empirical<span style="color:#f92672">$</span>root, deriv <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>), 
             color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;grey50&#34;</span>, linetype <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;dashed&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Quantity&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Price&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_y_continuous</span>(labels <span style="color:#f92672">=</span> scales<span style="color:#f92672">::</span>dollar) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_color_manual</span>(values <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;Marginal cost&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;red&#34;</span>, <span style="color:#e6db74">&#34;Marginal revenue&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;blue&#34;</span>,
                                <span style="color:#e6db74">&#34;Demand&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;darkgreen&#34;</span>),
                     name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Function&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">coord_cartesian</span>(ylim <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">6</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_light</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(legend.position <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bottom&#34;</span>)
</code></pre></div><p><img src="/blog/2018/02/15/derivatives-r-fun/index_files/figure-html/plot-all-empirical-1.png" width="75%" style="display: block; margin: auto;" /></p>
<p>In this case, the empirical solution and the function-based solution are identical, but that&rsquo;s only because I created the empirical data from the functions. In real life, though, this same process should work on any empirical price, quantity, and cost data.</p>
%!s(MISSING)]]></content>
        <category term="r" />
        <category term="ggplot" />
        <category term="dataviz" />
        <category term="economics" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Working with R, Cairo graphics, custom fonts, and ggplot]]></title>
        <link href="https://www.shagunjhaver.com/blog/2017/09/27/working-with-r-cairo-graphics-custom-fonts-and-ggplot/" rel="alternate" />
        <published>2017-09-27T00:00:00+00:00</published>
        <updated>2017-09-27T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2017/09/27/working-with-r-cairo-graphics-custom-fonts-and-ggplot/</id>
        <summary type="html"><![CDATA[The Cairo graphics library makes it easy to embed custom fonts in PDFs and create high resolution PNGs.]]></summary>
        <content type="html"><![CDATA[<p>Skip to instructions for <a href="#mac">macOS</a> or <a href="#windows">Windows</a></p>
<hr>
<p>R and ggplot can create fantastic graphs, but the default Arial/Helvetica font is too boring and standard. You can change the font used in a plot fairly easily three different ways:</p>
<ol>
<li>All of the built-in ggplot themes have a <code>base_family</code> argument for setting the overall font family for the plot</li>
<li><code>element_text()</code> has a <code>family</code> argument for changing fonts on individual plot elements</li>
<li><code>geom_text()</code> and <code>annotate(geom = &quot;text&quot;, ...)</code> have a <code>family</code> argument for changing fonts on text layers</li>
</ol>
<p>For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Load libraries</span>
<span style="color:#a6e22e">library</span>(tidyverse)

<span style="color:#75715e"># Create plot</span>
p <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(mpg, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> cyl, y <span style="color:#f92672">=</span> hwy)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_point</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_smooth</span>(method <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;lm&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">annotate</span>(<span style="color:#e6db74">&#34;text&#34;</span>, x <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>, y <span style="color:#f92672">=</span> <span style="color:#ae81ff">35</span>, label <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;There aren&#39;t a lot of\n5 cylinder cars&#34;</span>,
           family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Source Sans Pro Semibold&#34;</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#DC5B44&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Highway miles per gallon and cylinders&#34;</span>,
       subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;This is an interesting relationship, I guess&#34;</span>,
       caption <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Source: ggplot&#39;s built-in data&#34;</span>,
       x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Cylinders&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Highway miles per gallon&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_light</span>(base_family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Source Sans Pro&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(plot.caption <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_text</span>(family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Source Sans Pro ExtraLight&#34;</span>))
p
</code></pre></div><figure class="img-75"><img src="example-plot-1.png"
         alt="Example nice plot"/>
</figure>

<p>However, there are a couple difficulties when using custom fonts like this:</p>
<ol>
<li>R on Windows does not automatically see custom fonts and will throw an error if you try to use them.</li>
<li><code>ggsave()</code> on its own cannot correctly save PDF versions of plots with custom fonts—it cannot embed the fonts.</li>
</ol>
<p>Fixing both of these issues is relatively easy. On Windows, you can either load fonts into R on the fly with <code>windowsFonts(name_of_font_inside_r = windowsFont(&quot;Name of actual font&quot;))</code>, or you can use <code>extrafonts::load_fonts()</code> from the <code>extrafonts</code> library to permanently load fonts into R&rsquo;s internal database. A full example of this <a href="#windows">is included below</a>.</p>
<p>Embedding fonts in PDFs is also fairly easy. Instead of using R&rsquo;s default PDF-writing engine, you can use the <a href="https://www.cairographics.org/">Cairo graphics library</a> (which, nowadays, is conveniently packaged with R). Cairo has full Unicode support and can handle embedding custom fonts just fine. To make <code>ggsave()</code> use the Cairo engine when writing a PDF, specify the device:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">ggsave</span>(<span style="color:#66d9ef">...</span>, filename <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;whatever.pdf&#34;</span>, <span style="color:#66d9ef">...</span>, device <span style="color:#f92672">=</span> cairo_pdf)
</code></pre></div><p>You can also use Cairo&rsquo;s PNG engine when writing PNG files. R&rsquo;s default PNG-writing engine can sometimes have issues with correctly setting the resolution. In theory, if you specify a width and a height and a DPI, <code>ggsave()</code> will generate a file with those dimensions. However, if you place the PNG into Word, PowerPoint, InDesign, or any other programs, the graphic will be too large, for reasons unknown. If you save the graphic with the Cairo library, though, these programs will respect the size and DPI and place the image correctly.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">ggsave</span>(<span style="color:#66d9ef">...</span>, filename <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;whatever.png&#34;</span>, <span style="color:#66d9ef">...</span>, dpi <span style="color:#f92672">=</span> <span style="color:#ae81ff">300</span>, type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;cairo&#34;</span>)
</code></pre></div><p>Using the Cairo PNG library makes a significant difference when you use the image in other programs. Notice how the Cairo-based PNG is actually 4 inches wide in Word, while R&rsquo;s default PNG takes up the full width of the page and uses a lower resolution:</p>
<figure class="img-75"><img src="cairo_notcairo_word.png"
         alt="Cairo vs. not Cairo in Word"/>
</figure>

<p>Finally, if you use R Markdown and knitr, you can specify the Cairo device for each output type in the document metadata:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">---
<span style="color:#f92672">title</span>: <span style="color:#e6db74">&#34;Whatever&#34;</span>
<span style="color:#f92672">output</span>:
  <span style="color:#f92672">pdf_document</span>:
    <span style="color:#f92672">dev</span>: <span style="color:#ae81ff">cairo_pdf</span>
  <span style="color:#f92672">html_document</span>:
    <span style="color:#f92672">dev</span>: <span style="color:#ae81ff">png</span>
---
</code></pre></div><hr>
<p> </p>
<p>Here&rsquo;s how you can use <code>ggplot::ggsave()</code> and Cairo to create PDF with embedded custom fonts and PNGs with correct resolutions:</p>
<h2 id="mac">Full instructions for macOS</h2>
<p>The Cairo graphics library should be installed behind the scenes when you install R—you should not need to install any R-specific Cairo libraries or anything for this to work. However, you <em>do</em> need to install an X11 window system first, like <a href="https://www.xquartz.org/">XQuartz</a>.</p>
<p>You can verify that you have Cairo support by running the <code>capabilities()</code> function; <code>TRUE</code> should show up under <code>cairo</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">capabilities</span>()
<span style="color:#75715e">#&gt;        jpeg         png        tiff       tcltk         X11        aqua</span>
<span style="color:#75715e">#&gt;        TRUE        TRUE        TRUE        TRUE        TRUE        TRUE</span>
<span style="color:#75715e">#&gt;    http/ftp     sockets      libxml        fifo      cledit       iconv</span>
<span style="color:#75715e">#&gt;        TRUE        TRUE        TRUE        TRUE       FALSE        TRUE</span>
<span style="color:#75715e">#&gt;         NLS     profmem       cairo         ICU long.double     libcurl</span>
<span style="color:#75715e">#&gt;        TRUE        TRUE        TRUE        TRUE        TRUE        TRUE</span>
</code></pre></div><p>R on macOS should automatically see the fonts you have installed on your computer.</p>
<p>Here&rsquo;s a full example of loading and using a custom font on macOS:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Load libraries</span>
<span style="color:#a6e22e">library</span>(tidyverse)

<span style="color:#75715e"># Create sample data</span>
<span style="color:#a6e22e">set.seed</span>(<span style="color:#ae81ff">1234</span>)  <span style="color:#75715e"># This makes R run the same random draw</span>
df <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">data_frame</span>(x <span style="color:#f92672">=</span> <span style="color:#a6e22e">rnorm</span>(<span style="color:#ae81ff">100</span>),
                 y <span style="color:#f92672">=</span> <span style="color:#a6e22e">rnorm</span>(<span style="color:#ae81ff">100</span>))

<span style="color:#75715e"># Create plot</span>
p <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(df, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> y)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_point</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;This is a title&#34;</span>,
       subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;This is a subtitle&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">annotate</span>(<span style="color:#e6db74">&#34;text&#34;</span>, x <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, y <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, label <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;This is some text&#34;</span>,
           family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Papyrus&#34;</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;darkred&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">8</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_light</span>(base_family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Comic Sans MS&#34;</span>)
p
</code></pre></div><figure class="img-75"><img src="full-example-mac-1.png"
         alt="Example plot on macOS"/>
</figure>

<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Save the plot as a PDF with ggsave and Cairo</span>
<span style="color:#75715e"># R will want to autocomplete cairo_pdf to cairo_pdf() (note the parentheses)</span>
<span style="color:#75715e"># This will not work with the parentheses; ensure there aren&#39;t any</span>
<span style="color:#a6e22e">ggsave</span>(p, filename <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;example.pdf&#34;</span>, device <span style="color:#f92672">=</span> cairo_pdf,
       width <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>, height <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>, units <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;in&#34;</span>)

<span style="color:#75715e"># You can also save the plot as a high resolution PNG using Cairo</span>
<span style="color:#75715e"># Note the difference here; instead of using device = cairo_pdf, you use</span>
<span style="color:#75715e"># type = &#34;cairo&#34;. It&#39;s confusing and weird and that&#39;s just life.</span>
<span style="color:#a6e22e">ggsave</span>(p, filename <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;example.png&#34;</span>, dpi <span style="color:#f92672">=</span> <span style="color:#ae81ff">300</span>, type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;cairo&#34;</span>,
       width <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>, height <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>, units <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;in&#34;</span>)
</code></pre></div><h2 id="windows">Full instructions for Windows</h2>
<p>The Cairo graphics library should be installed behind the scenes when you install R—you should not need to install any special Cairo libraries or anything for this to work.</p>
<p>You can verify that you have Cairo support by running the <code>capabilities()</code> function; <code>TRUE</code> should show up under <code>cairo</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">capabilities</span>()
<span style="color:#75715e">#&gt;        jpeg         png        tiff       tcltk         X11        aqua</span>
<span style="color:#75715e">#&gt;        TRUE        TRUE        TRUE        TRUE       FALSE       FALSE</span>
<span style="color:#75715e">#&gt;    http/ftp     sockets      libxml        fifo      cledit       iconv</span>
<span style="color:#75715e">#&gt;        TRUE        TRUE        TRUE        TRUE       FALSE        TRUE</span>
<span style="color:#75715e">#&gt;         NLS     profmem       cairo         ICU long.double     libcurl</span>
<span style="color:#75715e">#&gt;        TRUE        TRUE        TRUE        TRUE        TRUE        TRUE</span>
</code></pre></div><p>R on Windows cannot see the fonts you have installed on your computer. You can see a list of fonts R does have access to with the <code>windowsFonts()</code> function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">windowsFonts</span>()
<span style="color:#75715e">#&gt; $serif</span>
<span style="color:#75715e">#&gt; [1] &#34;TT Times New Roman&#34;</span>
<span style="color:#75715e">#&gt;</span>
<span style="color:#75715e">#&gt; $sans</span>
<span style="color:#75715e">#&gt; [1] &#34;TT Arial&#34;</span>
<span style="color:#75715e">#&gt;</span>
<span style="color:#75715e">#&gt; $mono</span>
<span style="color:#75715e">#&gt; [1] &#34;TT Courier New&#34;</span>
</code></pre></div><p>You can add all your system fonts to that database by installing the <code>extrafont</code> library and running <code>font_import()</code>. This will take a while, though, and it will only pick up fonts that are currently installed. If you install a font later, R will not see it—you&rsquo;ll need to run <code>extrafont::font_import()</code> again.</p>
<p>Alternatively, you can load fonts into R on the fly, without loading the full database, using <code>windowsFonts(name_of_font_inside_r = windowsFont(&quot;Name of actual font&quot;))</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">windowsFonts</span>(`Comic Sans MS` <span style="color:#f92672">=</span> <span style="color:#a6e22e">windowsFont</span>(<span style="color:#e6db74">&#34;Comic Sans MS&#34;</span>))
</code></pre></div><p>Once you do this, the font will be loaded:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">windowsFonts</span>()
<span style="color:#75715e">#&gt; $serif</span>
<span style="color:#75715e">#&gt; [1] &#34;TT Times New Roman&#34;</span>
<span style="color:#75715e">#&gt;</span>
<span style="color:#75715e">#&gt; $sans</span>
<span style="color:#75715e">#&gt; [1] &#34;TT Arial&#34;</span>
<span style="color:#75715e">#&gt;</span>
<span style="color:#75715e">#&gt; $mono</span>
<span style="color:#75715e">#&gt; [1] &#34;TT Courier New&#34;</span>
<span style="color:#75715e">#&gt;</span>
<span style="color:#75715e">#&gt; $`Comic Sans MS`</span>
<span style="color:#75715e">#&gt; [1] &#34;Comic Sans MS&#34;</span>
</code></pre></div><p>This only takes effect for your current R session, so if you are knitting a document or if you ever plan on closing RStudio, you&rsquo;ll need to incorporate this font assignment code into your script. If you don&rsquo;t want to do that, run <code>extrafont::load_fonts()</code> to load all the fonts—once you do this, you won&rsquo;t need to repeatedly run <code>windowsFonts()</code> to load fonts each time you run a script.</p>
<p>Here&rsquo;s a full example of loading and using a custom font on Windows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Load specific fonts into R&#39;s internal database</span>
<span style="color:#a6e22e">windowsFonts</span>(`Comic Sans MS` <span style="color:#f92672">=</span> <span style="color:#a6e22e">windowsFont</span>(<span style="color:#e6db74">&#34;Comic Sans MS&#34;</span>))
<span style="color:#a6e22e">windowsFonts</span>(Papyrus <span style="color:#f92672">=</span> <span style="color:#a6e22e">windowsFont</span>(<span style="color:#e6db74">&#34;Papyrus&#34;</span>))
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Load libraries</span>
<span style="color:#a6e22e">library</span>(tidyverse)

<span style="color:#75715e"># Create sample data</span>
<span style="color:#a6e22e">set.seed</span>(<span style="color:#ae81ff">1234</span>)  <span style="color:#75715e"># This makes R run the same random draw</span>
df <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">data_frame</span>(x <span style="color:#f92672">=</span> <span style="color:#a6e22e">rnorm</span>(<span style="color:#ae81ff">100</span>),
                 y <span style="color:#f92672">=</span> <span style="color:#a6e22e">rnorm</span>(<span style="color:#ae81ff">100</span>))

<span style="color:#75715e"># Create plot</span>
p <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(df, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> y)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_point</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">annotate</span>(<span style="color:#e6db74">&#34;text&#34;</span>, x <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, y <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, label <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;This is some text&#34;</span>,
           family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Papyrus&#34;</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;darkred&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">8</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;This is a title&#34;</span>,
       subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;This is a subtitle&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_light</span>(base_family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Comic Sans MS&#34;</span>)
p
</code></pre></div><figure class="img-75"><img src="full-example-windows2-1.png"
         alt="Example plot in Windows"/>
</figure>

<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Save the plot as a PDF with ggsave and Cairo</span>
<span style="color:#75715e"># R will want to autocomplete cairo_pdf to cairo_pdf() (note the parentheses)</span>
<span style="color:#75715e"># This will not work with the parentheses; ensure there aren&#39;t any</span>
<span style="color:#a6e22e">ggsave</span>(p, filename <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;example.pdf&#34;</span>, device <span style="color:#f92672">=</span> cairo_pdf,
       width <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>, height <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>, units <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;in&#34;</span>)

<span style="color:#75715e"># You can also save the plot as a high resolution PNG using Cairo</span>
<span style="color:#75715e"># Note the difference here; instead of using device = cairo_pdf, you use</span>
<span style="color:#75715e"># type = &#34;cairo&#34;. It&#39;s confusing and weird and that&#39;s just life.</span>
<span style="color:#a6e22e">ggsave</span>(p, filename <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;example.png&#34;</span>, dpi <span style="color:#f92672">=</span> <span style="color:#ae81ff">300</span>, type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;cairo&#34;</span>,
       width <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>, height <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>, units <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;in&#34;</span>)
<span style="color:#a6e22e">ggsave</span>(p, filename <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;example_no_cairo.png&#34;</span>, dpi <span style="color:#f92672">=</span> <span style="color:#ae81ff">300</span>,
       width <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>, height <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>, units <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;in&#34;</span>)
</code></pre></div>%!s(MISSING)]]></content>
        <category term="r" />
        <category term="ggplot" />
        <category term="dataviz" />
        <category term="cairo" />
        <category term="fonts" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Create supply and demand economics curves with ggplot2]]></title>
        <link href="https://www.shagunjhaver.com/blog/2017/09/15/create-supply-and-demand-economics-curves-with-ggplot2/" rel="alternate" />
        <published>2017-09-15T00:00:00+00:00</published>
        <updated>2017-09-15T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2017/09/15/create-supply-and-demand-economics-curves-with-ggplot2/</id>
        <summary type="html"><![CDATA[Use ggplot to create economics-style, non-data-based conceptual graphs.]]></summary>
        <content type="html"><![CDATA[<div class="alert alert-primary">This is now an R package named <a href="https://github.com/andrewheiss/reconPlots"><code>reconPlots</code></a>.</div>
<p><span class="small">(<a href="#tldr">Skip to the tl;dr complete example</a>; <a href="https://github.com/andrewheiss/supply-demand-ggplot">see this mini project on GitHub</a>)</span></p>
<p>So far, teaching at BYU has been delightful. I&rsquo;ve been using static course-specific websites for the two classes I&rsquo;m teaching this semester—<a href="https://datavizf17.classes.andrewheiss.com/">data visualization</a> and <a href="https://storiesf17.classes.andrewheiss.com/">telling stories with data</a>—and it&rsquo;s been fantastic. Everything is self-contained and automated and magic and I&rsquo;m a huge fan of <a href="https://bookdown.org/yihui/blogdown/">blogdown</a>.</p>
<p>I&rsquo;m teaching basic microeconomics for public managers next semester. Economics is full of graphs, with supply curves, demand curves, intersections, lines, and shaded areas galore. However, these graphics are rarely connected to real data—they&rsquo;re conceptual—which makes them a little harder to plot with statistical graphics packages.</p>
<p>In the econ classes I took at BYU and Duke, I either drew problem set graphs by hand on paper or by hand in Illustrator, which was tedious and not very automatable. Since I&rsquo;m hoping to create another course-specific website with blogdown, I headed out to find an R-based solution for creating conceptual, non-data-based graphs.</p>
<p>After an <a href="https://twitter.com/bechhof/status/908484621800583168">initial call out on Twitter</a> and searches on Google, I found that the cool kids in econ either use OmniGraffle or Illustrator (which requires manual labor) or <a href="https://en.wikibooks.org/wiki/LaTeX/PGF/TikZ">tikz</a> to create their graphs. R Markdown and knitr <a href="https://github.com/yihui/knitr-examples/blob/master/058-engine-tikz.Rmd">support raw tikz chunks</a>, but only in LaTeX/PDF output (which makes sense, since tikz is essentially TeX). There&rsquo;s <a href="https://stackoverflow.com/a/41337307/120898">a hacky workaround to get tikz graphics in HTML output</a>, but <a href="https://twitter.com/andrewheiss/status/908506601849470976">it looks horrible</a>. Beyond these issues, I didn&rsquo;t want to learn yet another scripting language, so it was back to looking for R-only solutions.</p>
<p>To my delight, I came across <a href="http://is-r.tumblr.com/post/37631901708/economics-style-graphs-with-bezier-from-hmisc">this post from is.R() from 2012</a> where <a href="https://twitter.com/dsparks">David Sparks</a> essentially did exactly what I want to do—use ggplot to create conceptual non-data-based graphs. I borrowed extensively from David&rsquo;s original code and updated his system for my own graphs.</p>
<p>There are a couple key functions that make this work. First is <code>bezier()</code> from the <a href="https://cran.r-project.org/package=Hmisc">Hmisc package</a>, which generates a <a href="https://en.wikipedia.org/wiki/B%C3%A9zier_curve">Bézier curve</a> from a set of coordinates. Importantly, though, we don&rsquo;t need to actually load the Hmisc package, since we only need <code>Hmisc::bezier()</code>. Loading the whole package muddies up the environment—in particular <code>Hmisc::summarize()</code> conflicts with <code>dplyr::summarize()</code> and can cause problems later.</p>
<p>First, we can create a supply curve:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">library</span>(dplyr)
<span style="color:#a6e22e">library</span>(ggplot2)
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">supply <span style="color:#f92672">&lt;-</span> Hmisc<span style="color:#f92672">::</span><span style="color:#a6e22e">bezier</span>(x <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">9</span>),
                        y <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">9</span>)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">as_data_frame</span>()

<span style="color:#a6e22e">ggplot</span>(supply, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> y)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_path</span>(color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#0073D9&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_classic</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">coord_equal</span>()
</code></pre></div><figure class="img-75"><img src="generate-supply-1.png"
         alt="Generate supply curve"/>
</figure>

<p>We can adjust the curviness of the curve by moving the x and y coordinates around. For instance:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">supply1 <span style="color:#f92672">&lt;-</span> Hmisc<span style="color:#f92672">::</span><span style="color:#a6e22e">bezier</span>(x <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">9</span>),
                         y <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">9</span>)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">as_data_frame</span>()

supply2 <span style="color:#f92672">&lt;-</span> Hmisc<span style="color:#f92672">::</span><span style="color:#a6e22e">bezier</span>(x <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">9</span>),
                         y <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">9</span>)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">as_data_frame</span>()

all_supply_curves <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">bind_rows</span>(supply, supply1, supply2, .id <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;id&#34;</span>)

<span style="color:#a6e22e">ggplot</span>(all_supply_curves, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> y, colour <span style="color:#f92672">=</span> id)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_path</span>(size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_color_manual</span>(values <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;#0073D9&#34;</span>, <span style="color:#e6db74">&#34;#001F40&#34;</span>, <span style="color:#e6db74">&#34;#80DBFF&#34;</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_classic</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">coord_equal</span>()
</code></pre></div><figure class="img-75"><img src="generate-supplies-1.png"
         alt="Lots of supply curves"/>
</figure>

<p>We can make a downward-sloping demand curve the same way. Since we&rsquo;re using two <code>geom_path()</code> layers here, we remove the <code>data</code> parameter to the main <code>ggplot()</code> function, but keep the aesthetic mapping.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">demand <span style="color:#f92672">&lt;-</span> Hmisc<span style="color:#f92672">::</span><span style="color:#a6e22e">bezier</span>(<span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">9</span>),
                        <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">1</span>)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">as_data_frame</span>()

<span style="color:#a6e22e">ggplot</span>(mapping <span style="color:#f92672">=</span> <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> y)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_path</span>(data <span style="color:#f92672">=</span> supply, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#0073D9&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_path</span>(data <span style="color:#f92672">=</span> demand, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#FF4036&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_classic</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">coord_equal</span>()
</code></pre></div><figure class="img-75"><img src="generate-demand-1.png"
         alt="Generate demand curve"/>
</figure>

<p>The second key function for plotting these supply and demand graphs is a combination of <code>approxfun()</code> and <code>uniroot()</code>, which we use to find the intersection of the two curves. In his original post, Sparks created an <code>approxIntersection()</code> function to figure out intersections with brute force (i.e. create curves with hundreds of points and then look along the points to find where the coordinates are closest). In his post, he notes:</p>
<blockquote>
<p>This probably doesn’t work well in a lot of cases, and I would be interested in hearing of anyone’s less hacky solutions.</p>
</blockquote>
<p>So I wanted to try to find a less hacky solution. In <a href="https://stat.ethz.ch/pipermail/r-help/2011-July/282967.html">this old e-mail to r-help</a> about finding the intersection of two lines, it was suggested that:</p>
<blockquote>
<p>With linear interpolation, <code>uniroot()</code> on the difference between the two <code>approxfun()</code>s should get you there [the intersection of two curves] rather quickly.</p>
</blockquote>
<p>I&rsquo;ve used R for years and I&rsquo;d never heard of either of those functions. But I figured I&rsquo;d give it a try.</p>
<p><code>approxfun()</code> takes a matrix of data and approximates a function to fit that data. For example, we can generate a function for the supply curve and then plug in any x value to calculate the corresponding y. Here are the y values for 2, 6, and 8 (they should match the graphs above):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># I honestly have no idea why rule = 2, but things break when rule = 1, so ¯\_(ツ)_/¯</span>
fun_supply <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">approxfun</span>(supply<span style="color:#f92672">$</span>x, supply<span style="color:#f92672">$</span>y, rule <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>)

<span style="color:#a6e22e">fun_supply</span>(<span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">8</span>))

<span style="color:#75715e">## [1] 1.590161 4.521605 6.805785</span>
</code></pre></div><p>Magic.</p>
<p>The <code>uniroot()</code> function can take a function and search across an interval for the root of that function (or, in this case, where two functions intersect). As said in the r-help post, we want to the root of the difference of the supply and demand curves. <code>uniroot</code> only accepts a single function, so we create an anonymous function where we calculate the difference between the two (<code>function(x) fun_supply(x) - fun_demand(x)</code>). We also want to search along the whole range of x, which currently goes from 1 to 9:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">fun_demand <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">approxfun</span>(demand<span style="color:#f92672">$</span>x, demand<span style="color:#f92672">$</span>y, rule <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>)

intersection_funs <span style="color:#f92672">&lt;-</span>  <span style="color:#a6e22e">uniroot</span>(<span style="color:#a6e22e">function</span>(x) <span style="color:#a6e22e">fun_supply</span>(x) <span style="color:#f92672">-</span> <span style="color:#a6e22e">fun_demand</span>(x), <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">9</span>))
intersection_funs

<span style="color:#75715e">## $root</span>
<span style="color:#75715e">## [1] 4.654098</span>
<span style="color:#75715e">##</span>
<span style="color:#75715e">## $f.root</span>
<span style="color:#75715e">## [1] 0.000002875289</span>
<span style="color:#75715e">##</span>
<span style="color:#75715e">## $iter</span>
<span style="color:#75715e">## [1] 5</span>
<span style="color:#75715e">##</span>
<span style="color:#75715e">## $init.it</span>
<span style="color:#75715e">## [1] NA</span>
<span style="color:#75715e">##</span>
<span style="color:#75715e">## $estim.prec</span>
<span style="color:#75715e">## [1] 0.00006103516</span>
</code></pre></div><p>This gives a lot of output, but we only really care about the <code>$root</code> value, which is 4.654. And sure enough, it calculated the correct intersection!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">ggplot</span>(mapping <span style="color:#f92672">=</span> <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> y)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_path</span>(data <span style="color:#f92672">=</span> supply, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#0073D9&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_path</span>(data <span style="color:#f92672">=</span> demand, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#FF4036&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_vline</span>(xintercept <span style="color:#f92672">=</span> intersection_funs<span style="color:#f92672">$</span>root, linetype <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;dotted&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_classic</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">coord_equal</span>()
</code></pre></div><figure class="img-75"><img src="supply-demand-intersection-x-1.png"
         alt="Supply demand intersection for just x"/>
</figure>

<p>To get the horizontal intersection, we just have to find where the vertical intersection (4.654) shows up in the demand function. We calculate this by plugging the intersection into <code>fun_demand()</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">y_root <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">fun_demand</span>(intersection_funs<span style="color:#f92672">$</span>root)

<span style="color:#a6e22e">ggplot</span>(mapping <span style="color:#f92672">=</span> <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> y)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_path</span>(data <span style="color:#f92672">=</span> supply, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#0073D9&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_path</span>(data <span style="color:#f92672">=</span> demand, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#FF4036&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_vline</span>(xintercept <span style="color:#f92672">=</span> intersection_funs<span style="color:#f92672">$</span>root, linetype <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;dotted&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_hline</span>(yintercept <span style="color:#f92672">=</span> y_root, linetype <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;dotted&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_classic</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">coord_equal</span>()
</code></pre></div><figure class="img-75"><img src="supply-demand-intersection-xy-1.png"
         alt="Supply demand intersection for both x and y"/>
</figure>

<p>Finding the intersections involves a lot of code, so we can put it all in a single function to make life easier later. This function only works on one intersection—it&rsquo;ll find the first intersection in the full range of the first curve. Finding multiple intersections <a href="https://stackoverflow.com/a/15298121/120898">requires more complicated logic</a>, but since I&rsquo;m not planning on plotting anything more complicated, I&rsquo;m fine with this.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># curve1 and curve2 should be data.frames with an x and y column</span>
<span style="color:#75715e"># For instance, as_data_frame(Hmisc::bezier(c(1, 8, 9), c(1, 5, 9)))</span>
<span style="color:#75715e">#</span>
curve_intersect <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">function</span>(curve1, curve2) {
  <span style="color:#75715e"># Approximate the functional form of both curves</span>
  curve1_f <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">approxfun</span>(curve1<span style="color:#f92672">$</span>x, curve1<span style="color:#f92672">$</span>y, rule <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>)
  curve2_f <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">approxfun</span>(curve2<span style="color:#f92672">$</span>x, curve2<span style="color:#f92672">$</span>y, rule <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>)
  
  <span style="color:#75715e"># Calculate the intersection of curve 1 and curve 2 along the x-axis</span>
  point_x <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">uniroot</span>(<span style="color:#a6e22e">function</span>(x) <span style="color:#a6e22e">curve1_f</span>(x) <span style="color:#f92672">-</span> <span style="color:#a6e22e">curve2_f</span>(x),
                     <span style="color:#a6e22e">c</span>(<span style="color:#a6e22e">min</span>(curve1<span style="color:#f92672">$</span>x), <span style="color:#a6e22e">max</span>(curve1<span style="color:#f92672">$</span>x)))<span style="color:#f92672">$</span>root
  
  <span style="color:#75715e"># Find where point_x is in curve 2</span>
  point_y <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">curve2_f</span>(point_x)
  
  <span style="color:#75715e"># All done!</span>
  <span style="color:#a6e22e">return</span>(<span style="color:#a6e22e">list</span>(x <span style="color:#f92672">=</span> point_x, y <span style="color:#f92672">=</span> point_y))
}
</code></pre></div><p>The function returns a list with x and y values:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">intersection_xy <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">curve_intersect</span>(supply, demand)
intersection_xy

<span style="color:#75715e">## $x</span>
<span style="color:#75715e">## [1] 4.654098</span>
<span style="color:#75715e">##</span>
<span style="color:#75715e">## $y</span>
<span style="color:#75715e">## [1] 3.395557</span>
</code></pre></div><p>We can use this simpler list in the plot. Here, we stop using <code>geom_vline()</code> and <code>geom_hline()</code> and plot segments instead, stopping at the intersection of the curves (with a point at the intersection, just for fun):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">intersection_xy_df <span style="color:#f92672">&lt;-</span> intersection_xy <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">as_data_frame</span>()

<span style="color:#a6e22e">ggplot</span>(mapping <span style="color:#f92672">=</span> <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> y)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_path</span>(data <span style="color:#f92672">=</span> supply, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#0073D9&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_path</span>(data <span style="color:#f92672">=</span> demand, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#FF4036&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_segment</span>(data <span style="color:#f92672">=</span> intersection_xy_df,
               <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, xend <span style="color:#f92672">=</span> x, yend <span style="color:#f92672">=</span> y), lty <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;dotted&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_segment</span>(data <span style="color:#f92672">=</span> intersection_xy_df,
               <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, y <span style="color:#f92672">=</span> y, xend <span style="color:#f92672">=</span> x, yend <span style="color:#f92672">=</span> y), lty <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;dotted&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_point</span>(data <span style="color:#f92672">=</span> intersection_xy_df, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Quantity&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Price&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_classic</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">coord_equal</span>()
</code></pre></div><figure class="img-75"><img src="supply-demand-intersection-simple-1.png"
         alt="Simple supply demand intersection"/>
</figure>

<p>Now that we can quickly calculate the intersection of two curves, we can make more complicated plots, like adding a second demand curve and showing the change in price that results from the shift:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">demand2 <span style="color:#f92672">&lt;-</span> Hmisc<span style="color:#f92672">::</span><span style="color:#a6e22e">bezier</span>(<span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">11</span>),
                         <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">3</span>)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">as_data_frame</span>()

<span style="color:#75715e"># Make a data frame of the intersections of the supply curve and both demand curves</span>
intersections <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">bind_rows</span>(<span style="color:#a6e22e">curve_intersect</span>(supply, demand),
                           <span style="color:#a6e22e">curve_intersect</span>(supply, demand2))

<span style="color:#a6e22e">ggplot</span>(mapping <span style="color:#f92672">=</span> <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> y)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_path</span>(data <span style="color:#f92672">=</span> supply, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#0073D9&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_path</span>(data <span style="color:#f92672">=</span> demand, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#FF4036&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, linetype <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;dashed&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_path</span>(data <span style="color:#f92672">=</span> demand2, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#FF4036&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_segment</span>(data <span style="color:#f92672">=</span> intersections,
               <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, xend <span style="color:#f92672">=</span> x, yend <span style="color:#f92672">=</span> y), lty <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;dotted&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_segment</span>(data <span style="color:#f92672">=</span> intersections,
               <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, y <span style="color:#f92672">=</span> y, xend <span style="color:#f92672">=</span> x, yend <span style="color:#f92672">=</span> y), lty <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;dotted&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_point</span>(data <span style="color:#f92672">=</span> intersections, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Quantity&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Price&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_classic</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">coord_equal</span>()
</code></pre></div><figure class="img-75"><img src="add-second-demand-curve-1.png"
         alt="Add second demand curve"/>
</figure>

<p>Super magic!</p>
<p>We can put a few final touches on it:</p>
<ul>
<li>Add an arrow with <code>annotate(&quot;segment&quot;, ...)</code></li>
<li>Force the line segments to the axes with <code>scale_*_continuous(expand = c(0, 0), ...)</code></li>
<li>Add breaks and labels on the axes for the segments with <code>scale_*_continuous(..., breaks = XXX, labels = XXX)</code>
<ul>
<li>We use <a href="https://stat.ethz.ch/R-manual/R-devel/library/grDevices/html/plotmath.html">plotmath</a> to get superscripted text in the labels using <code>expression(Q[1], Q[2])</code></li>
</ul>
</li>
<li>Add text annotations directly to the plot with <code>geom_text()</code>. We can use plotmath here too, but only if <code>parse = TRUE</code>.</li>
<li>Use a nicer font and make the title slightly bigger</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Create a data frame for the in-plot labels</span>
plot_labels <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">data_frame</span>(label <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;S&#34;</span>, <span style="color:#e6db74">&#34;D[1]&#34;</span>, <span style="color:#e6db74">&#34;D[2]&#34;</span>),
                          x <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">5</span>),
                          y <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">8</span>))

<span style="color:#a6e22e">ggplot</span>(mapping <span style="color:#f92672">=</span> <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> y)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_path</span>(data <span style="color:#f92672">=</span> supply, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#0073D9&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_path</span>(data <span style="color:#f92672">=</span> demand, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#FF4036&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, linetype <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;dashed&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_path</span>(data <span style="color:#f92672">=</span> demand2, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#FF4036&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_segment</span>(data <span style="color:#f92672">=</span> intersections,
               <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, xend <span style="color:#f92672">=</span> x, yend <span style="color:#f92672">=</span> y), lty <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;dotted&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_segment</span>(data <span style="color:#f92672">=</span> intersections,
               <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, y <span style="color:#f92672">=</span> y, xend <span style="color:#f92672">=</span> x, yend <span style="color:#f92672">=</span> y), lty <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;dotted&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_text</span>(data <span style="color:#f92672">=</span> plot_labels,
            <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> y, label <span style="color:#f92672">=</span> label), parse <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>,
            family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Source Sans Pro&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">annotate</span>(<span style="color:#e6db74">&#34;segment&#34;</span>, x <span style="color:#f92672">=</span> <span style="color:#ae81ff">3.5</span>, xend <span style="color:#f92672">=</span> <span style="color:#ae81ff">4.5</span>, y <span style="color:#f92672">=</span> <span style="color:#ae81ff">6</span>, yend <span style="color:#f92672">=</span> <span style="color:#ae81ff">7</span>,
           arrow <span style="color:#f92672">=</span> <span style="color:#a6e22e">arrow</span>(length <span style="color:#f92672">=</span> <span style="color:#a6e22e">unit</span>(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;lines&#34;</span>)), colour <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;grey50&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_point</span>(data <span style="color:#f92672">=</span> intersections, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_x_continuous</span>(expand <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>), breaks <span style="color:#f92672">=</span> intersections<span style="color:#f92672">$</span>x,
                     labels <span style="color:#f92672">=</span> <span style="color:#a6e22e">expression</span>(Q[1], Q[2])) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_y_continuous</span>(expand <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>), breaks <span style="color:#f92672">=</span> intersections<span style="color:#f92672">$</span>y,
                     labels <span style="color:#f92672">=</span> <span style="color:#a6e22e">expression</span>(P[1], P[2])) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Quantity&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Price&#34;</span>,
       title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Rightward shift in demand&#34;</span>,
       subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;As demand increases, so does price&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">coord_equal</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_classic</span>(base_family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Source Sans Pro&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(plot.title <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_text</span>(family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Source Sans Pro Semibold&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#a6e22e">rel</span>(<span style="color:#ae81ff">1.3</span>)))
</code></pre></div><figure class="img-75"><img src="all-together-now-1.png"
         alt="All together now!"/>
</figure>

<p>Perfect!</p>
<p>The only thing I have left to figure out is shading areas under the lines and curves to show consumer and producer surplus, but I&rsquo;ll get to that later (in theory, it should be a matter of using <code>geom_ribbon()</code>, <a href="https://stackoverflow.com/a/24419687/120898">like this</a>.)</p>
<h2 id="tldr">tl;dr</h2>
<p>All that explanation above makes the process sound more complicated than it actually is. Here&rsquo;s a complete example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">supply <span style="color:#f92672">&lt;-</span> Hmisc<span style="color:#f92672">::</span><span style="color:#a6e22e">bezier</span>(<span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">9</span>),
                        <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">9</span>)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">data.frame</span>()

demand1 <span style="color:#f92672">&lt;-</span> Hmisc<span style="color:#f92672">::</span><span style="color:#a6e22e">bezier</span>(<span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">9</span>),
                         <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">1</span>)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">data.frame</span>()

demand2 <span style="color:#f92672">&lt;-</span> Hmisc<span style="color:#f92672">::</span><span style="color:#a6e22e">bezier</span>(<span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">11</span>),
                         <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">3</span>)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">data.frame</span>()

<span style="color:#75715e"># Calculate the intersections of the two curves</span>
intersections <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">bind_rows</span>(<span style="color:#a6e22e">curve_intersect</span>(supply, demand1),
                           <span style="color:#a6e22e">curve_intersect</span>(supply, demand2))

plot_labels <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">data_frame</span>(label <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;S&#34;</span>, <span style="color:#e6db74">&#34;D[1]&#34;</span>, <span style="color:#e6db74">&#34;D[2]&#34;</span>),
                          x <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">5</span>),
                          y <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">8</span>))

<span style="color:#a6e22e">ggplot</span>(mapping <span style="color:#f92672">=</span> <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> y)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_path</span>(data <span style="color:#f92672">=</span> supply, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#0073D9&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_path</span>(data <span style="color:#f92672">=</span> demand, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#FF4036&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, linetype <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;dashed&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_path</span>(data <span style="color:#f92672">=</span> demand2, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#FF4036&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_segment</span>(data <span style="color:#f92672">=</span> intersections,
               <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, xend <span style="color:#f92672">=</span> x, yend <span style="color:#f92672">=</span> y), lty <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;dotted&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_segment</span>(data <span style="color:#f92672">=</span> intersections,
               <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, y <span style="color:#f92672">=</span> y, xend <span style="color:#f92672">=</span> x, yend <span style="color:#f92672">=</span> y), lty <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;dotted&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_text</span>(data <span style="color:#f92672">=</span> plot_labels,
            <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> y, label <span style="color:#f92672">=</span> label), parse <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>,
            family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Source Sans Pro&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">annotate</span>(<span style="color:#e6db74">&#34;segment&#34;</span>, x <span style="color:#f92672">=</span> <span style="color:#ae81ff">3.5</span>, xend <span style="color:#f92672">=</span> <span style="color:#ae81ff">4.5</span>, y <span style="color:#f92672">=</span> <span style="color:#ae81ff">6</span>, yend <span style="color:#f92672">=</span> <span style="color:#ae81ff">7</span>,
           arrow <span style="color:#f92672">=</span> <span style="color:#a6e22e">arrow</span>(length <span style="color:#f92672">=</span> <span style="color:#a6e22e">unit</span>(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;lines&#34;</span>)), colour <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;grey50&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_point</span>(data <span style="color:#f92672">=</span> intersections, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_x_continuous</span>(expand <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>), breaks <span style="color:#f92672">=</span> intersections<span style="color:#f92672">$</span>x,
                     labels <span style="color:#f92672">=</span> <span style="color:#a6e22e">expression</span>(Q[1], Q[2])) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_y_continuous</span>(expand <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>), breaks <span style="color:#f92672">=</span> intersections<span style="color:#f92672">$</span>y,
                     labels <span style="color:#f92672">=</span> <span style="color:#a6e22e">expression</span>(P[1], P[2])) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Quantity&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Price&#34;</span>,
       title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Rightward shift in demand&#34;</span>,
       subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;As demand increases, so does price&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">coord_equal</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_classic</span>(base_family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Source Sans Pro&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(plot.title <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_text</span>(family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Source Sans Pro Semibold&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#a6e22e">rel</span>(<span style="color:#ae81ff">1.3</span>)))
</code></pre></div><figure class="img-75"><img src="complete-example-1.png"
         alt="Complete example"/>
</figure>

%!s(MISSING)]]></content>
        <category term="r" />
        <category term="ggplot" />
        <category term="dataviz" />
        <category term="economics" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Quickly play with Polity IV and OECD data (and see the danger of US democracy)]]></title>
        <link href="https://www.shagunjhaver.com/blog/2017/08/26/quickly-play-with-polity-iv-and-oecd-data-and-see-the-danger-of-us-democracy/" rel="alternate" />
        <published>2017-08-26T00:00:00+00:00</published>
        <updated>2017-08-26T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2017/08/26/quickly-play-with-polity-iv-and-oecd-data-and-see-the-danger-of-us-democracy/</id>
        <summary type="html"><![CDATA[Use ggplot to reproducibly see how much trouble the Polity Project thinks the US is in.]]></summary>
        <content type="html"><![CDATA[<p>The <a href="http://www.systemicpeace.org/polityproject.html">Polity IV Project</a> released new data yesterday, with democratization scores for 169 countries up to 2016. I wanted to check if the ongoing erosion of US democratic institutions since the 2016 elections registered in the US&rsquo;s Polity score, and, lo and behold, it did! We dropped from our solid, historically consistent 10 to an 8.</p>
<p>But is that bad? How does that compare to other advanced democracies, like countries in the OECD?</p>
<p>What follows below shows how relatively easy it is to quickly and reproducibly grab the new data, graph it, and compare scores across countries. (This notebook is also in <a href="https://github.com/andrewheiss/polity-oecd">a GitHub repository</a>.)</p>
<p>Before we start, we&rsquo;ll load all the libraries we&rsquo;ll need:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">library</span>(tidyverse)     <span style="color:#75715e"># dplyr, ggplot, etc.</span>
<span style="color:#a6e22e">library</span>(readxl)        <span style="color:#75715e"># Read Excel files</span>
<span style="color:#a6e22e">library</span>(forcats)       <span style="color:#75715e"># Deal with factors</span>
<span style="color:#a6e22e">library</span>(countrycode)   <span style="color:#75715e"># Deal with country codes and names</span>
<span style="color:#a6e22e">library</span>(rvest)         <span style="color:#75715e"># Scrape websites</span>
<span style="color:#a6e22e">library</span>(httr)          <span style="color:#75715e"># Download stuff</span>
<span style="color:#a6e22e">library</span>(ggrepel)       <span style="color:#75715e"># Place non-overlapping labels on plots</span>
</code></pre></div><p>First, we have to download the new Polity data. We could navigate to the <a href="http://www.systemicpeace.org/inscrdata.html">Polity IV data page</a> and download the data manually, but that&rsquo;s not scriptable. Instead, we can use <code>GET()</code> from the <code>httr</code> package (or <code>httr::GET()</code> for short) to download the file directly rather than hunting it down with a browser. After saving the Excel file to a temporary file, we use <code>readxl::read_excel()</code> to load and parse the data. The chain of functions following <code>read_excel()</code> (chained together with <code>dplyr</code>’s <code>%&gt;%</code> pipes) selects and renames the <a href="http://www.correlatesofwar.org/data-sets/cow-country-codes">Correlates of War country code</a>, year, and polity score; ensures that those columns are integers (rather than text or decimal-based numbers); and finally filters the data to 2001 and beyond.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">polity.url <span style="color:#f92672">&lt;-</span> <span style="color:#e6db74">&#34;http://www.systemicpeace.org/inscr/p4v2016.xls&#34;</span>

<span style="color:#75715e"># Download Polity data to temporary file</span>
<span style="color:#a6e22e">GET</span>(polity.url, <span style="color:#a6e22e">write_disk</span>(polity.temp <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">tempfile</span>(fileext <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;.xls&#34;</span>)))

<span style="color:#75715e">## Response [http://www.systemicpeace.org/inscr/p4v2016.xls]</span>
<span style="color:#75715e">## Date: 2017-08-27 01:23</span>
<span style="color:#75715e">## Status: 200</span>
<span style="color:#75715e">## Content-Type: application/vnd.ms-excel</span>
<span style="color:#75715e">## Size: 4.29 MB</span>
<span style="color:#75715e">## &lt;ON DISK&gt;  /var/folders/0h/6jl6g9317lv3k5w9h72m18kw0000gn/T//Rtmp0TEhay/file125c8561fd799.xls</span>
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Read and clean Polity data</span>
polity <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">read_excel</span>(polity.temp) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">select</span>(cowcode <span style="color:#f92672">=</span> ccode, year, polity <span style="color:#f92672">=</span> polity2) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate_at</span>(<span style="color:#a6e22e">vars</span>(year, cowcode, polity),
            <span style="color:#a6e22e">funs</span>(as.integer)) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">filter</span>(year <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">2000</span>)

polity <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">glimpse</span>()

<span style="color:#75715e">## Observations: 2,814</span>
<span style="color:#75715e">## Variables: 3</span>
<span style="color:#75715e">## $ cowcode &lt;int&gt; 700, 700, 700, 700, 700, 700, 700, 700, 700, 700, 700, 700, 700, 700, 700, 700, 700, 339, 339, 339,...</span>
<span style="color:#75715e">## $ year    &lt;int&gt; 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 201...</span>
<span style="color:#75715e">## $ polity  &lt;int&gt; -7, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, -1, -1, -1, 5, 5, 7, 7, 7, 9, 9, 9, 9, 9, 9...</span>
</code></pre></div><p>The Polity project does not include information about OECD membership, so we have to download that on our own. It&rsquo;s relatively easy to google &ldquo;OECD member countries&rdquo; and copy/paste the results from any of the resulting webpages into a CSV file, but that&rsquo;s not reproducible or scriptable.</p>
<p>Instead, we can use the <code>rvest</code> package to scrape data directly from the <a href="https://www.oecd.org/about/membersandpartners/list-oecd-member-countries.htm">OECD&rsquo;s most recent list of members</a>. There are several ways to target HTML elements on a page, including both CSS selectors and XPath queries, each with advantages and disadvantages. Using CSS is fairly simple if you&rsquo;re familiar with the structure of the HTML—if you want to select a table inside an <code>&lt;article&gt;</code> element in the main <code>&lt;section id=&quot;content&quot;&gt;</code> section, you can specify <code>#content &gt; article &gt; table</code>.</p>
<p>The syntax for XPath is easier to use, but is really hard to write by hand. Fortunately, you don&rsquo;t have to do it manually. In Chrome, go to the <a href="https://www.oecd.org/about/membersandpartners/list-oecd-member-countries.htm">OECD&rsquo;s list</a>, right click on the webpage, and select &ldquo;Inspect&rdquo; to open Chrome&rsquo;s built in web inspector. Activate the inspection tool and find the table with the list of countries:</p>
<p><img src="select-element.png" alt="Select HTML table"></p>
<p>Right click on <code>&lt;table align=&quot;center&quot; border=&quot;0&quot; style=&quot;width: 75%;&quot;&gt;</code> in the inspector and choose &ldquo;Copy&rdquo; &gt; &ldquo;Copy XPath&rdquo; to copy an XPath query for that table to the clipboard:</p>
<p><img src="copy-xpath.png" alt="Copy XPath"></p>
<p>We can then use that query (which should be something like <code>//*[@id=&quot;webEditContent&quot;]/table[2]</code>) in a <code>dplyr</code> chain that will load the webpage, select the HTML <code>&lt;table&gt;</code> element, and parse it into something R can read.</p>
<p>The <code>dplyr</code> chain has a few interesting quirks. <code>read_html()</code> will download the given URL as HTML, and <code>html_nodes()</code> will select the HTML element specified by the XPath query. <code>html_table()</code> will parse that element into an R object (here we specify <code>fill = TRUE</code> since not all the rows in the table have the same number of columns; filling the table adds additional empty columns to rows that lack them). <code>bind_rows()</code> and <code>as_data_frame()</code> convert the parsed HTML table into a data frame.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Pro tip: the HTML structure of the OECD page can change over time, and the</span>
<span style="color:#75715e"># XPath query will inevitably break. To avoid this, use a snapshot of the</span>
<span style="color:#75715e"># webpage from the Internet Archive instead of the current OECD page, since the</span>
<span style="color:#75715e"># archived version won&#39;t change.</span>

oecd.url <span style="color:#f92672">&lt;-</span> <span style="color:#e6db74">&#34;https://web.archive.org/web/20170821160714/https://www.oecd.org/about/membersandpartners/list-oecd-member-countries.htm&#34;</span>

oecd.countries.raw <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">read_html</span>(oecd.url) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#75715e"># Use single quotes instead of double quotes since XPath uses &#34; in the query</span>
  <span style="color:#a6e22e">html_nodes</span>(xpath <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;//*[@id=&#34;webEditContent&#34;]/table[2]&#39;</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">html_table</span>(fill <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">bind_rows</span>() <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">as_data_frame</span>()
</code></pre></div><p>Because this table has extra empty columns, R doesn&rsquo;t recognize header rows automatically and names each column <code>X1</code>, <code>X2</code>, and so on.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">oecd.countries.raw <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">head</span>()

<span style="color:#75715e">## # A tibble: 6 x 4</span>
<span style="color:#75715e">##      X1        X2                X3    X4</span>
<span style="color:#75715e">##   &lt;chr&gt;     &lt;chr&gt;             &lt;chr&gt; &lt;lgl&gt;</span>
<span style="color:#75715e">## 1         Country              Date    NA</span>
<span style="color:#75715e">## 2       AUSTRALIA       7 June 1971    NA</span>
<span style="color:#75715e">## 3         AUSTRIA 29 September 1961    NA</span>
<span style="color:#75715e">## 4         BELGIUM 13 September 1961    NA</span>
<span style="color:#75715e">## 5          CANADA     10 April 1961    NA</span>
<span style="color:#75715e">## 6           CHILE        7 May 2010    NA</span>
</code></pre></div><p>We can select and rename the country and date columns and ignore the empty first and last columns using <code>select()</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">oecd.countries.raw1 <span style="color:#f92672">&lt;-</span> oecd.countries.raw <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">select</span>(Country <span style="color:#f92672">=</span> X2, Date <span style="color:#f92672">=</span> X3)

oecd.countries.raw1 <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">head</span>()

<span style="color:#75715e">## # A tibble: 6 x 2</span>
<span style="color:#75715e">##     Country              Date</span>
<span style="color:#75715e">##       &lt;chr&gt;             &lt;chr&gt;</span>
<span style="color:#75715e">## 1   Country              Date</span>
<span style="color:#75715e">## 2 AUSTRALIA       7 June 1971</span>
<span style="color:#75715e">## 3   AUSTRIA 29 September 1961</span>
<span style="color:#75715e">## 4   BELGIUM 13 September 1961</span>
<span style="color:#75715e">## 5    CANADA     10 April 1961</span>
<span style="color:#75715e">## 6     CHILE        7 May 2010</span>
</code></pre></div><p>Because R didn&rsquo;t recognize the header, it included the header as an actual row of data. Additionally, the webpage put a note about membership in the final row:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">oecd.countries.raw1 <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">tail</span>()

<span style="color:#75715e">## # A tibble: 6 x 2</span>
<span style="color:#75715e">##                              Country                               Date</span>
<span style="color:#75715e">##                                &lt;chr&gt;                              &lt;chr&gt;</span>
<span style="color:#75715e">## 1                             SWEDEN                  28 September 1961</span>
<span style="color:#75715e">## 2                        SWITZERLAND                  28 September 1961</span>
<span style="color:#75715e">## 3                             TURKEY                      2 August 1961</span>
<span style="color:#75715e">## 4                     UNITED KINGDOM                         2 May 1961</span>
<span style="color:#75715e">## 5                      UNITED STATES                      12 April 1961</span>
<span style="color:#75715e">## 6 More on membership and enlargement More on membership and enlargement</span>
</code></pre></div><p>We can use <code>slice()</code> to select all rows in between the first and last, starting from row 2 to row <code>n() - 1</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">oecd.countries.raw2 <span style="color:#f92672">&lt;-</span> oecd.countries.raw1 <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">slice</span>(<span style="color:#ae81ff">2</span><span style="color:#f92672">:</span>(<span style="color:#a6e22e">n</span>() <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>))

oecd.countries.raw2 <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">head</span>()

<span style="color:#75715e">## # A tibble: 6 x 2</span>
<span style="color:#75715e">##          Country              Date</span>
<span style="color:#75715e">##            &lt;chr&gt;             &lt;chr&gt;</span>
<span style="color:#75715e">## 1      AUSTRALIA       7 June 1971</span>
<span style="color:#75715e">## 2        AUSTRIA 29 September 1961</span>
<span style="color:#75715e">## 3        BELGIUM 13 September 1961</span>
<span style="color:#75715e">## 4         CANADA     10 April 1961</span>
<span style="color:#75715e">## 5          CHILE        7 May 2010</span>
<span style="color:#75715e">## 6 CZECH REPUBLIC  21 December 1995</span>
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">oecd.countries.raw2 <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">tail</span>()

<span style="color:#75715e">## # A tibble: 6 x 2</span>
<span style="color:#75715e">##          Country              Date</span>
<span style="color:#75715e">##            &lt;chr&gt;             &lt;chr&gt;</span>
<span style="color:#75715e">## 1          SPAIN     3 August 1961</span>
<span style="color:#75715e">## 2         SWEDEN 28 September 1961</span>
<span style="color:#75715e">## 3    SWITZERLAND 28 September 1961</span>
<span style="color:#75715e">## 4         TURKEY     2 August 1961</span>
<span style="color:#75715e">## 5 UNITED KINGDOM        2 May 1961</span>
<span style="color:#75715e">## 6  UNITED STATES     12 April 1961</span>
</code></pre></div><p>Finally, we can use the <code>countrycode</code> package to convert the country names into Correlates of War (COW) codes:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">oecd.countries <span style="color:#f92672">&lt;-</span> oecd.countries.raw2 <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(cowcode <span style="color:#f92672">=</span> <span style="color:#a6e22e">countrycode</span>(Country, <span style="color:#e6db74">&#34;country.name&#34;</span>, <span style="color:#e6db74">&#34;cown&#34;</span>))

oecd.countries <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">glimpse</span>()

<span style="color:#75715e">## Observations: 35</span>
<span style="color:#75715e">## Variables: 3</span>
<span style="color:#75715e">## $ Country &lt;chr&gt; &#34;AUSTRALIA&#34;, &#34;AUSTRIA&#34;, &#34;BELGIUM&#34;, &#34;CANADA&#34;, &#34;CHILE&#34;, &#34;CZECH REPUBLIC&#34;, &#34;DENMARK&#34;, &#34;ESTONIA&#34;, &#34;FINL...</span>
<span style="color:#75715e">## $ Date    &lt;chr&gt; &#34;7 June 1971&#34;, &#34;29 September 1961&#34;, &#34;13 September 1961&#34;, &#34;10 April 1961&#34;, &#34;7 May 2010&#34;, &#34;21 Decembe...</span>
<span style="color:#75715e">## $ cowcode &lt;int&gt; 900, 305, 211, 20, 155, 316, 390, 366, 375, 220, 255, 350, 310, 395, 205, 666, 325, 740, 732, 367, ...</span>
</code></pre></div><p>Before we start plotting, we have to manipulate and filter the data a little bit more. First, we&rsquo;ll create a data frame of just US Polity scores, selecting only countries with a COW code of 2 (which is the US)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">us.polity <span style="color:#f92672">&lt;-</span> polity <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">filter</span>(cowcode <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span>)

us.polity <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">head</span>()

<span style="color:#75715e">## # A tibble: 6 x 3</span>
<span style="color:#75715e">##   cowcode  year polity</span>
<span style="color:#75715e">##     &lt;int&gt; &lt;int&gt;  &lt;int&gt;</span>
<span style="color:#75715e">## 1       2  2000     10</span>
<span style="color:#75715e">## 2       2  2001     10</span>
<span style="color:#75715e">## 3       2  2002     10</span>
<span style="color:#75715e">## 4       2  2003     10</span>
<span style="color:#75715e">## 5       2  2004     10</span>
<span style="color:#75715e">## 6       2  2005     10</span>
</code></pre></div><p>We then want to calculate the average Polity score for all OECD countries over time, excluding the US. We select all rows with a COW code in <code>oecd.countries$cowcode</code> using <code>%in%</code> in the filter query and then exclude the US with <code>cowcode != 2</code>. We then calculate the yearly mean with <code>group_by()</code> and <code>summarise()</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">oecd.polity <span style="color:#f92672">&lt;-</span> polity <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">filter</span>(cowcode <span style="color:#f92672">%in%</span> oecd.countries<span style="color:#f92672">$</span>cowcode,
         cowcode <span style="color:#f92672">!=</span> <span style="color:#ae81ff">2</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">group_by</span>(year) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">summarise</span>(polity <span style="color:#f92672">=</span> <span style="color:#a6e22e">mean</span>(polity, na.rm<span style="color:#f92672">=</span><span style="color:#66d9ef">TRUE</span>))

oecd.polity <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">head</span>()

<span style="color:#75715e">## # A tibble: 6 x 2</span>
<span style="color:#75715e">##    year   polity</span>
<span style="color:#75715e">##   &lt;int&gt;    &lt;dbl&gt;</span>
<span style="color:#75715e">## 1  2000 9.454545</span>
<span style="color:#75715e">## 2  2001 9.454545</span>
<span style="color:#75715e">## 3  2002 9.484848</span>
<span style="color:#75715e">## 4  2003 9.484848</span>
<span style="color:#75715e">## 5  2004 9.484848</span>
<span style="color:#75715e">## 6  2005 9.484848</span>
</code></pre></div><p>In the final plot, we want to include shaded regions showing Polity&rsquo;s general classifications of regime type, where autocracies range from −10 to −6, anocracies range from −5 to 5, and democracies range from 6 to 10. We can use <code>dplyr::tribble()</code> to quickly create a small data frame with these ranges. The <code>mutate()</code> command at the end uses <code>forcats::fct_inorder</code> to change the <code>democracy</code> column into an ordered factor so the ranges are plotted in the correct order. Finally, to prevent gaps, I add/subtract 0.5 from the start and end values (i.e. since democracies end at 6 and anocracies start at 5, there would be an empty gap in the plot between 5 and 6).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">polity.breaks <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">tribble</span>(
  <span style="color:#f92672">~</span>start, <span style="color:#f92672">~</span>end, <span style="color:#f92672">~</span>democracy,
  <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">5.5</span>, <span style="color:#e6db74">&#34;Democracy&#34;</span>,
  <span style="color:#ae81ff">5.5</span>, <span style="color:#ae81ff">-5.5</span>, <span style="color:#e6db74">&#34;Anocracy&#34;</span>,
  <span style="color:#ae81ff">-5.5</span>, <span style="color:#ae81ff">-10</span>, <span style="color:#e6db74">&#34;Autocracy&#34;</span>
) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(democracy <span style="color:#f92672">=</span> <span style="color:#a6e22e">fct_inorder</span>(democracy, ordered <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>))

polity.breaks

<span style="color:#75715e">## # A tibble: 3 x 3</span>
<span style="color:#75715e">##   start   end democracy</span>
<span style="color:#75715e">##   &lt;dbl&gt; &lt;dbl&gt;     &lt;ord&gt;</span>
<span style="color:#75715e">## 1  10.0   5.5 Democracy</span>
<span style="color:#75715e">## 2   5.5  -5.5  Anocracy</span>
<span style="color:#75715e">## 3  -5.5 -10.0 Autocracy</span>
</code></pre></div><p>Now that we have all the cleaned up data frames, we can finally put it all together in one final plot. Check the heavily commented code below for an explanation of each layer</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># We start with an empty ggplot object since we&#39;re using so many separate data frames</span>
<span style="color:#a6e22e">ggplot</span>() <span style="color:#f92672">+</span>
  <span style="color:#75715e"># First we include the shaded ranges for democracies, anocracies, and</span>
  <span style="color:#75715e"># autocracies. Since we want the regions to go from edge to edge</span>
  <span style="color:#75715e"># horizontally, we set xmin and xmax to ±Inf. ymin and ymax use the ranges we</span>
  <span style="color:#75715e"># created in the polity.breaks data frame. We use democracy as the fill</span>
  <span style="color:#75715e"># variable. The alpha value makes the layer 80% transparent.</span>
  <span style="color:#a6e22e">geom_rect</span>(data <span style="color:#f92672">=</span> polity.breaks, <span style="color:#a6e22e">aes</span>(xmin <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#66d9ef">Inf</span>, xmax <span style="color:#f92672">=</span> <span style="color:#f92672">+</span><span style="color:#66d9ef">Inf</span>,
                                      ymin <span style="color:#f92672">=</span> end, ymax <span style="color:#f92672">=</span> start,
                                      fill <span style="color:#f92672">=</span> democracy),
            alpha <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.2</span>) <span style="color:#f92672">+</span>
  <span style="color:#75715e"># We then add the line for the US polity score</span>
  <span style="color:#a6e22e">geom_line</span>(data <span style="color:#f92672">=</span> us.polity, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> year, y <span style="color:#f92672">=</span> polity), size <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#00A1B0&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#75715e"># And then the line for the average OECD polity score</span>
  <span style="color:#a6e22e">geom_line</span>(data <span style="color:#f92672">=</span> oecd.polity, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> year, y <span style="color:#f92672">=</span> polity), size <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#EB6642&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#75715e"># We add a label for the US line above the line at y = 11, using the same color</span>
  <span style="color:#a6e22e">geom_text</span>(<span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> <span style="color:#ae81ff">2000</span>, y <span style="color:#f92672">=</span> <span style="color:#ae81ff">11</span>, label <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;United States&#34;</span>),
            hjust <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Open Sans Condensed Bold&#34;</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#00A1B0&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#75715e"># We add a similar label for the OECD line at y = 8.5, again with the same color</span>
  <span style="color:#a6e22e">geom_text</span>(<span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> <span style="color:#ae81ff">2000</span>, y <span style="color:#f92672">=</span> <span style="color:#ae81ff">8.5</span>, label <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;OECD average&#34;</span>),
            hjust <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Open Sans Condensed Bold&#34;</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#EB6642&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#75715e"># All of the data happens in the democracy region, but we want to show the</span>
  <span style="color:#75715e"># full range of Polity values, so we force the y axis to go from -10 to 11</span>
  <span style="color:#a6e22e">coord_cartesian</span>(ylim <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">-10</span>)) <span style="color:#f92672">+</span>
  <span style="color:#75715e"># Remove the &#34;democracy&#34; title from the legend</span>
  <span style="color:#a6e22e">guides</span>(fill <span style="color:#f92672">=</span> <span style="color:#a6e22e">guide_legend</span>(title <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>)) <span style="color:#f92672">+</span>
  <span style="color:#75715e"># Add titles and labels and captions</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Polity IV score&#34;</span>,
       title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Democracy in the USA&#34;</span>, subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;I wonder what happened in 2016…&#34;</span>,
       caption <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Source: Polity IV Project&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#75715e"># Use a light theme with Open Sans Light as the default font</span>
  <span style="color:#a6e22e">theme_light</span>(base_family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Open Sans Light&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#75715e"># Move the legend to the bottom and make the title font bigger, bolder, and condenseder</span>
  <span style="color:#a6e22e">theme</span>(legend.position <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bottom&#34;</span>,
        plot.title <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_text</span>(family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Open Sans Condensed Bold&#34;</span>,
                                  size <span style="color:#f92672">=</span> <span style="color:#a6e22e">rel</span>(<span style="color:#ae81ff">1.6</span>)))
</code></pre></div><p><img src="unnamed-chunk-6-1.png" alt="Polity in the US and OECD"></p>
<p>Once we have this basic plot, we can extend it with more data. For instance, we can compare the US&rsquo;s Polity score not only to the OECD average, but to specific countries:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">lots.of.countries <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;United States&#34;</span>, <span style="color:#e6db74">&#34;Hungary&#34;</span>, <span style="color:#e6db74">&#34;Turkey&#34;</span>, <span style="color:#e6db74">&#34;Poland&#34;</span>, <span style="color:#e6db74">&#34;Mexico&#34;</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">countrycode</span>(<span style="color:#e6db74">&#34;country.name&#34;</span>, <span style="color:#e6db74">&#34;cown&#34;</span>)

lots.of.countries.polity <span style="color:#f92672">&lt;-</span> polity <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">filter</span>(cowcode <span style="color:#f92672">%in%</span> lots.of.countries) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(country <span style="color:#f92672">=</span> <span style="color:#a6e22e">countrycode</span>(cowcode, <span style="color:#e6db74">&#34;cown&#34;</span>, <span style="color:#e6db74">&#34;country.name&#34;</span>))
  
<span style="color:#a6e22e">ggplot</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_rect</span>(data <span style="color:#f92672">=</span> polity.breaks, <span style="color:#a6e22e">aes</span>(xmin <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#66d9ef">Inf</span>, xmax <span style="color:#f92672">=</span> <span style="color:#f92672">+</span><span style="color:#66d9ef">Inf</span>,
                                      ymin <span style="color:#f92672">=</span> end, ymax <span style="color:#f92672">=</span> start,
                                      fill <span style="color:#f92672">=</span> democracy),
            alpha <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.2</span>) <span style="color:#f92672">+</span>
  <span style="color:#75715e"># First we add the line for the average OECD polity score. This time we make it dashed</span>
  <span style="color:#a6e22e">geom_line</span>(data <span style="color:#f92672">=</span> oecd.polity, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> year, y <span style="color:#f92672">=</span> polity),
            size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#EB6642&#34;</span>, linetype <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;dashed&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#75715e"># We then add the lines for all the other countries</span>
  <span style="color:#a6e22e">geom_line</span>(data <span style="color:#f92672">=</span> lots.of.countries.polity,
            <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> year, y <span style="color:#f92672">=</span> polity, color <span style="color:#f92672">=</span> country), size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span>
  <span style="color:#75715e"># To create the labels we only select the 2005 values. If we didn&#39;t, labels</span>
  <span style="color:#75715e"># would appear on every year, and we&#39;d essentially have a plot of repeated</span>
  <span style="color:#75715e"># labels</span>
  <span style="color:#a6e22e">geom_label_repel</span>(data <span style="color:#f92672">=</span> <span style="color:#a6e22e">filter</span>(lots.of.countries.polity, year <span style="color:#f92672">==</span> <span style="color:#ae81ff">2005</span>),
                   <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> year, y <span style="color:#f92672">=</span> polity, color <span style="color:#f92672">=</span> country, label <span style="color:#f92672">=</span> country),
                   family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Open Sans Condensed Bold&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#75715e"># We add a label for the OECD line at y = 8.5, again with the same color</span>
  <span style="color:#a6e22e">geom_label</span>(<span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> <span style="color:#ae81ff">2000</span>, y <span style="color:#f92672">=</span> <span style="color:#ae81ff">8.5</span>, label <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;OECD average&#34;</span>),
            hjust <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Open Sans Condensed Bold&#34;</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#EB6642&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">coord_cartesian</span>(ylim <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">-10</span>)) <span style="color:#f92672">+</span>
  <span style="color:#75715e"># Turn off the legend for the color aesthetic</span>
  <span style="color:#a6e22e">guides</span>(fill <span style="color:#f92672">=</span> <span style="color:#a6e22e">guide_legend</span>(title <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>),
         color <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Polity IV score&#34;</span>,
       title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Democracy around the world&#34;</span>,
       subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Everyone&#39;s doing okay except the US (and Turkey)&#34;</span>,
       caption <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Source: Polity IV Project&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_light</span>(base_family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Open Sans Light&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(legend.position <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bottom&#34;</span>,
        plot.title <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_text</span>(family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Open Sans Condensed Bold&#34;</span>,
                                  size <span style="color:#f92672">=</span> <span style="color:#a6e22e">rel</span>(<span style="color:#ae81ff">1.6</span>)))
</code></pre></div><p><img src="unnamed-chunk-7-1.png" alt="Polity in the US, OECD, and others"></p>
<p>And thus we can quickly and reproducibly see that democracy in the USA post-2016 is pretty precariously positioned. (But we&rsquo;re not Turkey. Yet.)</p>
%!s(MISSING)]]></content>
        <category term="r" />
        <category term="ggplot" />
        <category term="dataviz" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Exploring Minard's 1812 plot with ggplot2]]></title>
        <link href="https://www.shagunjhaver.com/blog/2017/08/10/exploring-minards-1812-plot-with-ggplot2/" rel="alternate" />
        <published>2017-08-10T00:00:00+00:00</published>
        <updated>2017-08-10T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2017/08/10/exploring-minards-1812-plot-with-ggplot2/</id>
        <summary type="html"><![CDATA[Use ggplot to do fun and fancy things with Minard's famous plot of Napoleon's 1812 retreat from Russia.]]></summary>
        <content type="html"><![CDATA[<p>For whatever reason, I decided to start reading Tolstoy&rsquo;s <em>War and Peace</em> (via Audible) the week I had to turn in my dissertation. I still have a dozen or so hours to go, but the book has been incredible. I had no idea what it was about going into it, and was delighted to find that the &ldquo;war&rdquo; parts of the book deal with the Napolonic wars—both his 1804–1805 campaign in the <a href="https://en.wikipedia.org/wiki/War_of_the_Third_Coalition">War of the Third Coalition</a> (like the <a href="https://en.wikipedia.org/wiki/Battle_of_Austerlitz">Battle of Austerlitz</a>), and his <a href="https://en.wikipedia.org/wiki/French_invasion_of_Russia">1812 campaign to invade Russia</a>, from whence we get <a href="https://en.wikipedia.org/wiki/1812_Overture">Tchaikovsky&rsquo;s <em>1812 Overture</em></a>. I knew <em>nothing</em> about these wars and Tolstoy&rsquo;s descriptions are incredible and gripping.</p>
<p>It&rsquo;s been especially exciting because I&rsquo;m preparing a course on data visualization this fall and had been looking forward to using <a href="https://en.wikipedia.org/wiki/Charles_Joseph_Minard#Work">Charles Minard&rsquo;s famous plot</a> about Napoleon&rsquo;s 1812 winter retreat from Moscow, where the Grande Armée dropped from 422,000 to 10,000 troops.</p>
<p><img src="Minard.png" alt="Original Minard plot"></p>
<p>Edward Tufte has said that Minard&rsquo;s plot &ldquo;may well be the best statistical graphic ever drawn&rdquo; because it manages to pack a ton of information into one dense figure. The plot contains six variables, each mapped to a different aesthetic:</p>





<table class="pure-table pure-table-horizontal">
<thead>
<tr>
<th>Information</th>
<th>Aesthetic</th>
</tr>
</thead>
<tbody>
<tr>
<td>Size of Napoleon&rsquo;s Grande Armée</td>
<td>Width of path</td>
</tr>
<tr>
<td>Longitude of the army&rsquo;s position</td>
<td>x-axis</td>
</tr>
<tr>
<td>Latitude of the army&rsquo;s position</td>
<td>y-axis</td>
</tr>
<tr>
<td>Direction of the army&rsquo;s movement</td>
<td>Color of path</td>
</tr>
<tr>
<td>Date of points along retreat path</td>
<td>Text below plot</td>
</tr>
<tr>
<td>Temperature during the army&rsquo;s retreat</td>
<td>Line below plot</td>
</tr>
</tbody>
</table>


<p>Designers and statisticians have recreated this plot dozens of times—there are <a href="http://www.datavis.ca/gallery/re-minard.php">galleries of attempts</a> all around the internet. It&rsquo;s even included in Hadley Wickham&rsquo;s <a href="http://vita.had.co.nz/papers/layered-grammar.pdf">original article introducting <code>ggplot2</code></a>. Creating the plot in R is fairly trivial and <a href="http://www.datavis.ca/gallery/minard/ggplot2/minard.r">requires minimal code</a>, thanks to ggplot&rsquo;s clear grammar for data graphics.</p>
<p>In the seven years since Hadley&rsquo;s original article, ggplot and R have matured significantly (thanks, in large part, due to the <a href="http://www.tidyverse.org/">tidyverse</a>). With these improvements, we can add fancier elements to the basic ggplot Minard plot and play around with some fun R features.</p>
<h2 id="getting-started">Getting started</h2>
<p>First, we load the necessary libraries and data (data available at <a href="http://www.datavis.ca/gallery/re-minard.php">Michael Friendly&rsquo;s Minard gallery</a> or in the <a href="https://github.com/andrewheiss/fancy-minard/tree/master/input/minard">GitHub repository for this notebook</a>.)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">library</span>(tidyverse)
<span style="color:#a6e22e">library</span>(lubridate)
<span style="color:#a6e22e">library</span>(ggmap)
<span style="color:#a6e22e">library</span>(ggrepel)
<span style="color:#a6e22e">library</span>(gridExtra)
<span style="color:#a6e22e">library</span>(pander)

cities <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">read.table</span>(<span style="color:#e6db74">&#34;input/minard/cities.txt&#34;</span>,
                     header <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>, stringsAsFactors <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>)

troops <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">read.table</span>(<span style="color:#e6db74">&#34;input/minard/troops.txt&#34;</span>,
                     header <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>, stringsAsFactors <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>)

temps <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">read.table</span>(<span style="color:#e6db74">&#34;input/minard/temps.txt&#34;</span>,
                    header <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>, stringsAsFactors <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(date <span style="color:#f92672">=</span> <span style="color:#a6e22e">dmy</span>(date))  <span style="color:#75715e"># Convert string to actual date</span>
</code></pre></div><h2 id="geography">Geography</h2>
<p>The troops data includes five variables about troop movement: location, number of survivors, direction (advancing or retreating) and group (since Napoleon had generals commanding different elements of the army).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">troops <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">head</span>() <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">pandoc.table</span>()
</code></pre></div>




<table class="pure-table pure-table-horizontal">
<thead>
<tr>
<th style="text-align:center">long</th>
<th style="text-align:center">lat</th>
<th style="text-align:center">survivors</th>
<th style="text-align:center">direction</th>
<th style="text-align:center">group</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">24</td>
<td style="text-align:center">54.9</td>
<td style="text-align:center">340000</td>
<td style="text-align:center">A</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">24.5</td>
<td style="text-align:center">55</td>
<td style="text-align:center">340000</td>
<td style="text-align:center">A</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">25.5</td>
<td style="text-align:center">54.5</td>
<td style="text-align:center">340000</td>
<td style="text-align:center">A</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">26</td>
<td style="text-align:center">54.7</td>
<td style="text-align:center">320000</td>
<td style="text-align:center">A</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">27</td>
<td style="text-align:center">54.8</td>
<td style="text-align:center">300000</td>
<td style="text-align:center">A</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">28</td>
<td style="text-align:center">54.9</td>
<td style="text-align:center">280000</td>
<td style="text-align:center">A</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>


<p>Each of these variables maps well into ggplot&rsquo;s aesthetic-based paradigm. If we include just geographic and group information (so there are separate lines for the different divisions), we get a basic skeleton of the original plot:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">ggplot</span>(troops, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> long, y <span style="color:#f92672">=</span> lat, group <span style="color:#f92672">=</span> group)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_path</span>()
</code></pre></div><p><img src="troops-1-1.png" alt="Troops, line"></p>
<p>We can map data to other aesthetics, like color and size:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">ggplot</span>(troops, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> long, y <span style="color:#f92672">=</span> lat, group <span style="color:#f92672">=</span> group,
                   color <span style="color:#f92672">=</span> direction, size <span style="color:#f92672">=</span> survivors)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_path</span>()
</code></pre></div><p><img src="troops-2-1.png" alt="Troops, line with color and thickness"></p>
<p>The individual segments of the path don&rsquo;t fit together very well and leave big gaps. We can fix that by adding a rounded line ending to each segment.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">ggplot</span>(troops, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> long, y <span style="color:#f92672">=</span> lat, group <span style="color:#f92672">=</span> group,
                   color <span style="color:#f92672">=</span> direction, size <span style="color:#f92672">=</span> survivors)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_path</span>(lineend <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;round&#34;</span>)
</code></pre></div><p><img src="troops-3-1.png" alt="Troops, line with color and thickness and rounded ends"></p>
<p>The size of the path hides the drama of the plot. Napoleon started the 1812 campaign with 422,000 troops and returned with only 10,000. ggplot automatically makes discrete categories for the <code>survivors</code> variable, resulting in three not-very-granular categories. We can adjust the scale to allow for more categories, thus showing more variation in size and highlighting the devasation of the army:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">ggplot</span>(troops, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> long, y <span style="color:#f92672">=</span> lat, group <span style="color:#f92672">=</span> group,
                   color <span style="color:#f92672">=</span> direction, size <span style="color:#f92672">=</span> survivors)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_path</span>(lineend <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;round&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_size</span>(range <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0.5</span>, <span style="color:#ae81ff">15</span>))
</code></pre></div><p><img src="troops-4-1.png" alt="Troops, big lines"></p>
<p>Finally, we can remove the labels, legends, and change the colors to match <span style="color:#DFC17E;">the shade of brown</span> from Minard&rsquo;s original plot (which I figured out with Photoshop&rsquo;s eyedropper tool).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">ggplot</span>(troops, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> long, y <span style="color:#f92672">=</span> lat, group <span style="color:#f92672">=</span> group,
                   color <span style="color:#f92672">=</span> direction, size <span style="color:#f92672">=</span> survivors)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_path</span>(lineend <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;round&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_size</span>(range <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0.5</span>, <span style="color:#ae81ff">15</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_colour_manual</span>(values <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;#DFC17E&#34;</span>, <span style="color:#e6db74">&#34;#252523&#34;</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>, y <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">guides</span>(color <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>, size <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>)
</code></pre></div><p><img src="troops-5-1.png" alt="Troops, correct colors"></p>
<p>One of the amazing things about this plot is that it is actually a map—the x and y axes show the longitude and latitude of the troops. This means we can overlay geographic details, like cities. The cities in the original data can easily be added with <code>geom_point()</code> and <code>geom_text()</code>. We use <code>vjust</code> in <code>geom_text()</code> to move the labels down away from their points.</p>
<p>(Now that we&rsquo;re adding graphical layers from different sources, it&rsquo;s good to move the aesthetics defined in <code>aes()</code> to the layers where they&rsquo;re actually used.)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">ggplot</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_path</span>(data <span style="color:#f92672">=</span> troops, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> long, y <span style="color:#f92672">=</span> lat, group <span style="color:#f92672">=</span> group,
                               color <span style="color:#f92672">=</span> direction, size <span style="color:#f92672">=</span> survivors),
            lineend <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;round&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_point</span>(data <span style="color:#f92672">=</span> cities, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> long, y <span style="color:#f92672">=</span> lat)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_text</span>(data <span style="color:#f92672">=</span> cities, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> long, y <span style="color:#f92672">=</span> lat, label <span style="color:#f92672">=</span> city), vjust <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.5</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_size</span>(range <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0.5</span>, <span style="color:#ae81ff">15</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_colour_manual</span>(values <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;#DFC17E&#34;</span>, <span style="color:#e6db74">&#34;#252523&#34;</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>, y <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">guides</span>(color <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>, size <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>)
</code></pre></div><p><img src="troops-map-1-1.png" alt="Troops, with city names"></p>
<p>Alternatively, we can use <code>geom_text_repel</code> from the <a href="https://github.com/slowkow/ggrepel"><code>ggrepel</code> package</a> to automatically move the labels away from points and to ensure none of the labels overlap. We can also adjust the labels so they&rsquo;re easier to read (using <a href="https://fonts.google.com/specimen/Open+Sans">Open Sans</a>).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">ggplot</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_path</span>(data <span style="color:#f92672">=</span> troops, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> long, y <span style="color:#f92672">=</span> lat, group <span style="color:#f92672">=</span> group,
                               color <span style="color:#f92672">=</span> direction, size <span style="color:#f92672">=</span> survivors),
            lineend <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;round&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_point</span>(data <span style="color:#f92672">=</span> cities, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> long, y <span style="color:#f92672">=</span> lat),
             color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#DC5B44&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_text_repel</span>(data <span style="color:#f92672">=</span> cities, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> long, y <span style="color:#f92672">=</span> lat, label <span style="color:#f92672">=</span> city),
                  color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#DC5B44&#34;</span>, family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Open Sans Condensed Bold&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_size</span>(range <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0.5</span>, <span style="color:#ae81ff">15</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_colour_manual</span>(values <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;#DFC17E&#34;</span>, <span style="color:#e6db74">&#34;#252523&#34;</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>, y <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">guides</span>(color <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>, size <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>)
</code></pre></div><p><img src="troops-map-2-1.png" alt="Troops, with nicer city names"></p>
<p>Also, because this is a map, we can overlay it on other maps. It&rsquo;s fairly easy to get map data from Google or from the <a href="https://www.openstreetmap.org/">OpenStreetMap project</a> (through the <a href="http://maps.stamen.com/">Stamen project</a>) with the <a href="https://github.com/dkahle/ggmap"><code>ggmap</code> package</a>. There are some weird quirks you have to deal with, though:</p>
<ul>
<li>
<p>You can supply <code>ggmap</code> with a four-number bounding box to get a specific region of a map. OpenStreetMap makes this really easy to do. Vavigate to the area you want to map at openstreetmap.org and click on &ldquo;Export&rdquo; in the top toolbar. The left sidebar should show the latitudes and longitudes for the current view. If you click on &ldquo;Manually select a different area,&rdquo; you can create your own bounding box.</p>
<p><img src="bounding-box.png" alt="OpenStreetMap screenshot"></p>
</li>
<li>
<p>OpenStreetMap is the only data source ggmap uses that can use exact bounding boxes. When you use Google as a source, Google will find the center of the bounding box and estimate the region you want, and it&rsquo;s often wrong and will get too much of the map (or too little). OpenStreetMap is thus better for getting exact areas.</p>
</li>
<li>
<p>BUUUUUT <a href="https://github.com/dkahle/ggmap/issues/117">OpenStreetMap no longer allows ggmap to access its API</a>, which stinks. Fortunatley, the <a href="http://maps.stamen.com/">Stamen project</a> <em>does</em> work with <code>ggmap</code>, and it&rsquo;s based on OpenStreetMap data, so all is well(ish).</p>
</li>
</ul>
<p>With those caveats, we can get map tiles from Stamen with <code>get_stamenmap()</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">march.1812.europe <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">c</span>(left <span style="color:#f92672">=</span> <span style="color:#ae81ff">-13.10</span>, bottom <span style="color:#f92672">=</span> <span style="color:#ae81ff">35.75</span>, right <span style="color:#f92672">=</span> <span style="color:#ae81ff">41.04</span>, top <span style="color:#f92672">=</span> <span style="color:#ae81ff">61.86</span>)

<span style="color:#75715e"># &#34;zoom&#34; ranges from 3 (continent) to 21 (building)</span>
<span style="color:#75715e"># &#34;where&#34; is a path to a folder where the downloaded tiles are cached</span>
march.1812.europe.map <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">get_stamenmap</span>(bbox <span style="color:#f92672">=</span> march.1812.europe, zoom <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>,
                                       maptype <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;terrain&#34;</span>, where <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;cache&#34;</span>)
</code></pre></div><p>Once we have the tiles, the <code>ggmap()</code> function plots them nicely:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">ggmap</span>(march.1812.europe.map)
</code></pre></div><p><img src="show-europe-only-1.png" alt="Map of Europe"></p>
<p>We can even use Stamen&rsquo;s fancier map types, like watercolor:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">march.1812.europe.map.wc <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">get_stamenmap</span>(bbox <span style="color:#f92672">=</span> march.1812.europe, zoom <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>,
                                          maptype <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;watercolor&#34;</span>, where <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;cache&#34;</span>)
<span style="color:#a6e22e">ggmap</span>(march.1812.europe.map.wc)
</code></pre></div><p><img src="get-tiles-wc-1.png" alt="Watercolor map of Europe"></p>
<p>Now we can overlay the Minard plot to see where the march took place in relation to the rest of Europe:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">ggmap</span>(march.1812.europe.map.wc) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_path</span>(data <span style="color:#f92672">=</span> troops, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> long, y <span style="color:#f92672">=</span> lat, group <span style="color:#f92672">=</span> group,
                               color <span style="color:#f92672">=</span> direction, size <span style="color:#f92672">=</span> survivors),
            lineend <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;round&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_size</span>(range <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0.5</span>, <span style="color:#ae81ff">5</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_colour_manual</span>(values <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;#DFC17E&#34;</span>, <span style="color:#e6db74">&#34;#252523&#34;</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">guides</span>(color <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>, size <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_nothing</span>()  <span style="color:#75715e"># This is a special theme that comes with ggmap</span>
</code></pre></div><p><img src="europe-minard-1.png" alt="Watercolor map with troops"></p>
<p>We can also zoom in on just northeastern Europe and add the cities back in. We&rsquo;ll save this plot to an object (<code>march.1812.plot</code>) so we can use it later.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">march.1812.ne.europe <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">c</span>(left <span style="color:#f92672">=</span> <span style="color:#ae81ff">23.5</span>, bottom <span style="color:#f92672">=</span> <span style="color:#ae81ff">53.4</span>, right <span style="color:#f92672">=</span> <span style="color:#ae81ff">38.1</span>, top <span style="color:#f92672">=</span> <span style="color:#ae81ff">56.3</span>)

march.1812.ne.europe.map <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">get_stamenmap</span>(bbox <span style="color:#f92672">=</span> march.1812.ne.europe, zoom <span style="color:#f92672">=</span> <span style="color:#ae81ff">8</span>,
                                          maptype <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;terrain-background&#34;</span>, where <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;cache&#34;</span>)

march.1812.plot <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggmap</span>(march.1812.ne.europe.map) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_path</span>(data <span style="color:#f92672">=</span> troops, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> long, y <span style="color:#f92672">=</span> lat, group <span style="color:#f92672">=</span> group,
                               color <span style="color:#f92672">=</span> direction, size <span style="color:#f92672">=</span> survivors),
            lineend <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;round&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_point</span>(data <span style="color:#f92672">=</span> cities, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> long, y <span style="color:#f92672">=</span> lat),
             color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#DC5B44&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_text_repel</span>(data <span style="color:#f92672">=</span> cities, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> long, y <span style="color:#f92672">=</span> lat, label <span style="color:#f92672">=</span> city),
                  color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#DC5B44&#34;</span>, family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Open Sans Condensed Bold&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_size</span>(range <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0.5</span>, <span style="color:#ae81ff">10</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_colour_manual</span>(values <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;#DFC17E&#34;</span>, <span style="color:#e6db74">&#34;#252523&#34;</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">guides</span>(color <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>, size <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_nothing</span>()

march.1812.plot
</code></pre></div><p><img src="russia-minard-1.png" alt="Troops with map background"></p>
<p>Magic!</p>
<h2 id="temperatures-and-time">Temperatures and time</h2>
<p>So far we have four of the variables from Minard&rsquo;s original plot—we&rsquo;re still missing the temperatures during the retreat and the days of the retreat. Minard put this infomration in a separate plot under the map, which is fairly easy to do with <a href="https://cran.r-project.org/web/packages/gridExtra/index.html"><code>gridExtra</code></a>.</p>
<p>First we have to create the panel, which is a basic line graph with longitude along the x-axis and temperature along the y-axis, with text added at each point.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">ggplot</span>(data <span style="color:#f92672">=</span> temps, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> long, y <span style="color:#f92672">=</span> temp)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_line</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_text</span>(<span style="color:#a6e22e">aes</span>(label <span style="color:#f92672">=</span> temp), vjust <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.5</span>)
</code></pre></div><p><img src="temps-1-1.png" alt="Temperatures"></p>
<p>We can create a new variable for nicer labels, combining temperature with the date. We&rsquo;ll also clean up the theme, move the axis label to the right, and only include major horizontal gridlines. When we overlay the two plots, we have to make sure the x-axes align, so we need to use the same x-axis limits used in <code>march.1812.plot</code>. Those limits are buried inside the plot object, the parts of which can be accessed with <code>ggplot_build()</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">ggplot_build</span>(march.1812.plot)<span style="color:#f92672">$</span>layout<span style="color:#f92672">$</span>panel_ranges[[1]]<span style="color:#f92672">$</span>x.range
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e">## [1] 23.5 38.1</span>
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">temps.nice <span style="color:#f92672">&lt;-</span> temps <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(nice.label <span style="color:#f92672">=</span> <span style="color:#a6e22e">paste0</span>(temp, <span style="color:#e6db74">&#34;°, &#34;</span>, month, <span style="color:#e6db74">&#34;. &#34;</span>, day))

temps.1812.plot <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(data <span style="color:#f92672">=</span> temps.nice, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> long, y <span style="color:#f92672">=</span> temp)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_line</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_label</span>(<span style="color:#a6e22e">aes</span>(label <span style="color:#f92672">=</span> nice.label),
            family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Open Sans Condensed Bold&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">2.5</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;° Celsius&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_x_continuous</span>(limits <span style="color:#f92672">=</span> <span style="color:#a6e22e">ggplot_build</span>(march.1812.plot)<span style="color:#f92672">$</span>layout<span style="color:#f92672">$</span>panel_ranges[[1]]<span style="color:#f92672">$</span>x.range) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_y_continuous</span>(position <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;right&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">coord_cartesian</span>(ylim <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">-35</span>, <span style="color:#ae81ff">5</span>)) <span style="color:#f92672">+</span>  <span style="color:#75715e"># Add some space above/below</span>
  <span style="color:#a6e22e">theme_bw</span>(base_family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Open Sans Condensed Light&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(panel.grid.major.x <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>(),
        panel.grid.minor.x <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>(),
        panel.grid.minor.y <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>(),
        axis.text.x <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>(), axis.ticks <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>(),
        panel.border <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>())

temps.1812.plot
</code></pre></div><p><img src="temps-2-1.png" alt="Temperatures, cleaner"></p>
<h2 id="combining-the-plots">Combining the plots</h2>
<p>Finally, we use functions in <code>gridExtra</code> to combine the two plots. The easiest way to combine plot objects with <code>gridExtra</code> is to use <code>grid.arrange()</code>, but doing so doesn&rsquo;t align the axes of the plot. For instance, look at these two example plots—they&rsquo;re no longer comparable vertically because the left side of the bottom plot extends to the edge of the plot, expanding under the long axis label in the top plot:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">example.data <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">data_frame</span>(x <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#ae81ff">10</span>, y <span style="color:#f92672">=</span> <span style="color:#a6e22e">rnorm</span>(<span style="color:#ae81ff">10</span>))

plot1 <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(example.data, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> y)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_line</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;This is a really\nreally really really\nreally tall label&#34;</span>)

plot2 <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(example.data, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> x, y <span style="color:#f92672">=</span> y)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_line</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(y <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>)

<span style="color:#a6e22e">grid.arrange</span>(plot1, plot2)
</code></pre></div><p><img src="align-example-1.png" alt="Combined plots"></p>
<p>Instead of using <code>grid.arrange</code>, we can use <code>gridExtra</code>’s special version of <code>rbind()</code> (or <code>cbind()</code>) for <code>ggplotGrob</code> objects:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">plot.both <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">rbind</span>(<span style="color:#a6e22e">ggplotGrob</span>(plot1),
                   <span style="color:#a6e22e">ggplotGrob</span>(plot2))

grid<span style="color:#f92672">::</span><span style="color:#a6e22e">grid.newpage</span>()
grid<span style="color:#f92672">::</span><span style="color:#a6e22e">grid.draw</span>(plot.both)
</code></pre></div><p><img src="align-example-good-1.png" alt="Combined with gtable"></p>
<p>Now that we can align plots correctly, we can combine the map and the temperature:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">both.1812.plot <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">rbind</span>(<span style="color:#a6e22e">ggplotGrob</span>(march.1812.plot),
                        <span style="color:#a6e22e">ggplotGrob</span>(temps.1812.plot))

grid<span style="color:#f92672">::</span><span style="color:#a6e22e">grid.newpage</span>()
grid<span style="color:#f92672">::</span><span style="color:#a6e22e">grid.draw</span>(both.1812.plot)
</code></pre></div><p><img src="align-minard-1.png" alt="All combined"></p>
<p>They&rsquo;re aligned, but there&rsquo;s an obvious problem—the map is way too small and the temperatures are too tall. With <code>grid.arrange</code> it&rsquo;s possible to pass a vector of relative panel heights, which would let us shrink the bottom panel. While using <code>gtable::rbind()</code> does let us align the two plots, it doesn&rsquo;t provide an easy way to mess with panel heights. Following <a href="https://stackoverflow.com/questions/24331107/the-perils-of-aligning-plots-in-ggplot/24333504#24333504">this StackOverflow answer</a>, though, we can mess with the ggplot object and adjust the panels manually.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Identify which layout elements are panels</span>
panels <span style="color:#f92672">&lt;-</span> both.1812.plot<span style="color:#f92672">$</span>layout<span style="color:#f92672">$</span>t<span style="color:#a6e22e">[grep</span>(<span style="color:#e6db74">&#34;panel&#34;</span>, both.1812.plot<span style="color:#f92672">$</span>layout<span style="color:#f92672">$</span>name)]

<span style="color:#75715e"># Normally we can pass a vector of null units that represent relative heights.</span>
<span style="color:#75715e"># For instance, `unit(c(3, 1), &#34;null&#34;)` would make the top panel 3 times as</span>
<span style="color:#75715e"># tall as the bottom.</span>

<span style="color:#75715e"># But, the map here uses coord_equal() to show the correct dimensions of the</span>
<span style="color:#75715e"># map, and this messes with the panel height for whatever reason. So instead,</span>
<span style="color:#75715e"># we extract the original map panel height, which is really small, and then</span>
<span style="color:#75715e"># make the bottom panel smaller in the same scale.</span>
map.panel.height <span style="color:#f92672">&lt;-</span> both.1812.plot<span style="color:#f92672">$</span>heights[panels][1]

<span style="color:#75715e"># See, super small</span>
map.panel.height
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e">## [1] 0.345197879241894null</span>
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Apply new panel heights to object</span>
both.1812.plot<span style="color:#f92672">$</span>heights[panels] <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">unit</span>(<span style="color:#a6e22e">c</span>(map.panel.height, <span style="color:#ae81ff">0.1</span>), <span style="color:#e6db74">&#34;null&#34;</span>)

grid<span style="color:#f92672">::</span><span style="color:#a6e22e">grid.newpage</span>()
grid<span style="color:#f92672">::</span><span style="color:#a6e22e">grid.draw</span>(both.1812.plot)
</code></pre></div><p><img src="adjust-panels-1.png" alt="Combined with correct heights"></p>
<p>We can follow the same process to create a backgroundless version of the map:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># No map this time</span>
march.1812.plot.simple <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_path</span>(data <span style="color:#f92672">=</span> troops, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> long, y <span style="color:#f92672">=</span> lat, group <span style="color:#f92672">=</span> group,
                               color <span style="color:#f92672">=</span> direction, size <span style="color:#f92672">=</span> survivors),
            lineend <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;round&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_point</span>(data <span style="color:#f92672">=</span> cities, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> long, y <span style="color:#f92672">=</span> lat),
             color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#DC5B44&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_text_repel</span>(data <span style="color:#f92672">=</span> cities, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> long, y <span style="color:#f92672">=</span> lat, label <span style="color:#f92672">=</span> city),
                  color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#DC5B44&#34;</span>, family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Open Sans Condensed Bold&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_size</span>(range <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0.5</span>, <span style="color:#ae81ff">10</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_colour_manual</span>(values <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;#DFC17E&#34;</span>, <span style="color:#e6db74">&#34;#252523&#34;</span>)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">guides</span>(color <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>, size <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme_nothing</span>()

<span style="color:#75715e"># Change the x-axis limits to match the simple map</span>
temps.1812.plot <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(data <span style="color:#f92672">=</span> temps.nice, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> long, y <span style="color:#f92672">=</span> temp)) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_line</span>() <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">geom_label</span>(<span style="color:#a6e22e">aes</span>(label <span style="color:#f92672">=</span> nice.label),
            family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Open Sans Condensed Bold&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">2.5</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;° Celsius&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_x_continuous</span>(limits <span style="color:#f92672">=</span> <span style="color:#a6e22e">ggplot_build</span>(march.1812.plot.simple)<span style="color:#f92672">$</span>layout<span style="color:#f92672">$</span>panel_ranges[[1]]<span style="color:#f92672">$</span>x.range) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">scale_y_continuous</span>(position <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;right&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">coord_cartesian</span>(ylim <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">-35</span>, <span style="color:#ae81ff">5</span>)) <span style="color:#f92672">+</span>  <span style="color:#75715e"># Add some space above/below</span>
  <span style="color:#a6e22e">theme_bw</span>(base_family <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Open Sans Condensed Light&#34;</span>) <span style="color:#f92672">+</span>
  <span style="color:#a6e22e">theme</span>(panel.grid.major.x <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>(),
        panel.grid.minor.x <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>(),
        panel.grid.minor.y <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>(),
        axis.text.x <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>(), axis.ticks <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>(),
        panel.border <span style="color:#f92672">=</span> <span style="color:#a6e22e">element_blank</span>())

<span style="color:#75715e"># Combine the two plots</span>
both.1812.plot.simple <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">rbind</span>(<span style="color:#a6e22e">ggplotGrob</span>(march.1812.plot.simple),
                               <span style="color:#a6e22e">ggplotGrob</span>(temps.1812.plot))

<span style="color:#75715e"># Adjust panels</span>
panels <span style="color:#f92672">&lt;-</span> both.1812.plot.simple<span style="color:#f92672">$</span>layout<span style="color:#f92672">$</span>t<span style="color:#a6e22e">[grep</span>(<span style="color:#e6db74">&#34;panel&#34;</span>, both.1812.plot.simple<span style="color:#f92672">$</span>layout<span style="color:#f92672">$</span>name)]

<span style="color:#75715e"># Because this plot doesn&#39;t use coord_equal, since it&#39;s not a map, we can use</span>
<span style="color:#75715e"># whatever relative numbers we want, like a 3:1 ratio</span>
both.1812.plot.simple<span style="color:#f92672">$</span>heights[panels] <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">unit</span>(<span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">1</span>), <span style="color:#e6db74">&#34;null&#34;</span>)

grid<span style="color:#f92672">::</span><span style="color:#a6e22e">grid.newpage</span>()
grid<span style="color:#f92672">::</span><span style="color:#a6e22e">grid.draw</span>(both.1812.plot.simple)
</code></pre></div><p><img src="combined-simple-1.png" alt="Recreation of Minard&rsquo;s plot"></p>
<h2 id="conclusion">Conclusion</h2>
<p>Recreating Minard&rsquo;s famous 1812 plot is relatively easy to do with ggplot. Adding fancy bells and whistles like maps and aligned panels is a little trickier, but the end result is worth the extra effort.</p>
%!s(MISSING)]]></content>
        <category term="r" />
        <category term="ggplot" />
        <category term="dataviz" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Super basic practical guide to Docker and RStudio]]></title>
        <link href="https://www.shagunjhaver.com/blog/2017/04/27/super-basic-practical-guide-to-docker-and-rstudio/" rel="alternate" />
        <published>2017-04-27T00:00:00+00:00</published>
        <updated>2017-04-27T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2017/04/27/super-basic-practical-guide-to-docker-and-rstudio/</id>
        <summary type="html"><![CDATA[Use RStudio inside Docker containers for portable and reproducible development environments.]]></summary>
        <content type="html"><![CDATA[<p>All the cool data science kids seem to be using <a href="https://www.docker.com/">Docker</a> these days, and being able to instantly spin up a pre-built computer with a complete development or production environment is magic. The R community has also jumped on the Docker whale, and <a href="https://ropensci.org/">rOpenSci</a> maintains <a href="https://hub.docker.com/u/rocker/">dozens of pre-built Docker images</a>. <a href="https://ropensci.org/blog/blog/2014/10/23/introducing-rocker">These images are well documented</a> and there are <a href="https://github.com/rocker-org/rocker/wiki/Using-the-RStudio-image">helpful guides explaining how to get started</a>.</p>
<p>Read all that first. This post doesn&rsquo;t explain how Docker works. Instead, it&rsquo;s a quick super basic beginner&rsquo;s guide about how I use these Docker images in real-world R development and research.</p>
<p><strong>Contents:</strong></p>
<ul>
<li><a href="#why-even-do-this">Why even do this</a></li>
<li><a href="#run-locally-with-a-gui">Run locally with a GUI</a></li>
<li><a href="#run-on-a-remote-server">Run on a remote server</a></li>
<li><a href="#getting-stuff-in-and-out-of-the-container">Getting stuff in and out of the container</a></li>
<li><a href="#running-on-a-remote-server-without-rstudio">Running on a remote server without RStudio</a></li>
<li><a href="#making-a-custom-dockerfile">Making a custom Dockerfile</a></li>
</ul>
<hr>
<h2 id="why-even-do-this">Why even do this</h2>
<p>I&rsquo;ve found two general reasons for running R in a Docker container:</p>
<ol>
<li>
<p><strong>Reproducibility and consistent development environments</strong>: Python virtual environments are awesome—anyone can install all the packages/libraries your script needs in a local Python installation. R doesn&rsquo;t have virtual environments. R has <a href="https://rstudio.github.io/packrat/"><code>packrat</code></a>, which is incorporated into RStudio, but it&rsquo;s a hassle and I hate using it and can never get it working right.</p>
<p>Instead of using packrat, you can develop an R project within a Docker container. (This idea comes from a <a href="https://twitter.com/noamross/status/842196567050330112">Twitter conversation</a> with <a href="https://twitter.com/noamross">@noamross</a>.) Create a custom Dockerfile for your project where you install any additional packages your project needs (<a href="#making-a-custom-dockerfile">more on that below</a>), and then develop your project in the browser-based RStudio from the container. (Or, be lazy like me and keep developing in your local R installation without containers and periodically check to make sure it all works in a pristine development environment in a container).</p>
<p>All someone needs to do to run your project is pull the Docker image for your project, which will already have all the packages and dependencies and extra files installed.</p>
<p>In an ideal world, you can create a Dockerfile for a specific project, develop everything in RStudio in the browser, and the distribute both the <a href="https://github.com/andrewheiss/docker-donors-ngo-restrictions">Dockerfile</a> and the <a href="https://github.com/andrewheiss/donors-ngo-restrictions">project repository</a> so others can reproduce everything.</p>
</li>
<li>
<p><strong>Offloading computationally intensive stuff</strong>: I often build Bayesian models with <a href="http://mc-stan.org/">Stan</a> and <a href="http://mc-stan.org/interfaces/rstanarm"><code>rstanarm</code></a>. Complicated Bayesian models take forever to run, though, because of long Monte Carlo Markov chains (it takes hours to run dozens of Bayesian random effects effects models with <code>rstanarm::stan_glmer()</code>, for instance). Rather than tie up my computer and make it so I can&rsquo;t put it to sleep, I create a virtual server on <a href="https://www.digitalocean.com/">DigitalOcean</a> and run these intensive scripts in a Docker container there.</p>
</li>
</ol>
<h2 id="run-locally-with-a-gui">Run locally with a GUI</h2>
<p>The easiest possible way to play with Docker is to use <a href="https://kitematic.com/">Kitematic</a>, Docker&rsquo;s own cross-platform GUI. Kitematic automatically installs Docker and all its dependencies and it runs a virtual Linux machine in the background, which <em>then</em> runs Docker inside. With Kitematic you can search for public images and builds on <a href="https://hub.docker.com">Docker Hub</a> and manage all your running containers without having to deal with the command line.</p>
<ol>
<li>
<p>Download and install <a href="https://kitematic.com/">Kitematic</a></p>
</li>
<li>
<p>Search for a Docker image, like <a href="https://hub.docker.com/r/rocker/tidyverse/"><code>rocker/tidyverse</code></a> and create it</p>
<p><img src="kitematic-search.png" alt="Search for a container in Kitematic" title="Search for a container in Kitematic"></p>
</li>
<li>
<p>Access a containerized RStudio installation at the URL shown in Kitematic (in this case <code>192.168.99.100:32769</code> (default username and password are both <code>rstudio</code>)</p>
<p><img src="kitematic-rstudio.png" alt="RStudio running in a Docker container in Kitematic" title="RStudio running in a Docker container in Kitematic"></p>
</li>
<li>
<p>Stop the container when you&rsquo;re all done</p>
</li>
</ol>
<h2 id="run-on-a-remote-server">Run on a remote server</h2>
<p>Running a container remotely lets you offload computationally intensive tasks. There&rsquo;s no fancy GUI for starting remote containers, but it&rsquo;s easy enough.</p>
<ol>
<li>
<p>Create a <a href="https://www.digitalocean.com/">DigitalOcean droplet</a>. Use one of the pre-built Docker one-click apps and choose some size for your server (number of CPUs and amount of RAM).</p>
<p><img src="do-create.png" alt="Create DigitalOcean droplet with Docker pre-installed" title="Create DigitalOcean droplet with Docker pre-installed"></p>
</li>
<li>
<p>Once the server is live, log into it via <code>ssh</code> from your local machine: <code>ssh root@ip_address_here</code></p>
</li>
<li>
<p>Get the latest version of the Docker image of your choice by typing <code>docker pull rocker/tidyverse</code></p>
</li>
<li>
<p>Run that image <code>docker run -d -p 8787:8787 rocker/tidyverse</code></p>
</li>
<li>
<p>Access the remote RStudio installation at <code>ip_address_here:8787</code></p>
</li>
<li>
<p>Stop the container or destroy the DigitalOcean droplet when you&rsquo;re done.</p>
</li>
</ol>
<p>Bonus things:</p>
<ul>
<li>
<p>If you select &ldquo;User data&rdquo; in the additional options section when creating the droplet, you can paste a <a href="https://www.digitalocean.com/community/tutorials/how-to-use-cloud-config-for-your-initial-server-setup"><code>cloud-config</code></a> file that contains a list of directives to run when the droplet is initialized.</p>
<p><img src="do-cloud-config.png" alt="User data option in DigitalOcean" title="User data option in DigitalOcean"></p>
<p>You can use this to automatically pull and run the Docker image when you create the droplet so there&rsquo;s no need to even SSH into the new machine. Just wait a couple minutes for Docker to do its thing and you&rsquo;ll have an RStudio installation waiting at <code>ip_address_here:8787</code>.</p>
<p>Here&rsquo;s a basic <code>cloud-config</code> file I use to automatically start the server and set a password:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">#cloud-config
runcmd:
  - docker run -d -p 8787:8787 -e PASSWORD=supersekrit rocker/tidyverse
</code></pre></div></li>
<li>
<p>If you <a href="https://www.digitalocean.com/community/tutorials/how-to-use-ssh-keys-with-digitalocean-droplets">upload your public SSH key to DigitalOcean</a> you can automatically add it to the droplet when creating it, making it so you can log in via SSH without a password.</p>
<p><img src="do-ssh.png" alt="Enable SSH key in DigitalOcean" title="Enable SSH key in DigitalOcean"></p>
</li>
</ul>
<h2 id="getting-stuff-in-and-out-of-the-container">Getting stuff in and out of the container</h2>
<p>When you pull an image from Docker Hub, they&rsquo;re typically empty and pristine. You have to add your own files and data. Also, Docker containers are ephemeral. Once you stop running a container, any data stored in it disappears—when you start the container again, it&rsquo;ll be back in its pristine state.</p>
<p>There are multiple ways to get files in and out of a container though:</p>
<ul>
<li>
<p><strong>Locally mounted volume</strong>: It&rsquo;s possible to run a Docker container that mounts a local folder into the container&rsquo;s file system, making local files accessible to the container. Setting this up in Kitematic is trivial—change the container&rsquo;s &ldquo;Volumes&rdquo; setting to map the built-in <code>kitematic</code> folder to some local directory on your computer, and anything you save in the <code>kitematic</code> folder within the container will actually be saved on your computer. Setting this up from terminal (like on a remote computer) is trickier (Google &ldquo;docker mount local directory&rdquo;). However, since I create and delete remote servers willy nilly, I don&rsquo;t ever really get around to mounting directories remotely.</p>
<p><img src="kitematic-mount.png" alt="Volume mounting settings in Kitematic" title="Volume mounting settings in Kitematic"></p>
</li>
<li>
<p><strong>Upload and download with RStudio</strong>: You can use the &ldquo;Upload&rdquo; button in the &ldquo;Files&rdquo; panel in RStudio to get individual files or whole directories into the container. Use &ldquo;More &gt; Export&rdquo; to download files.</p>
<p><img src="rstudio-upload-download.png" alt="Upload and download with RStudio" title="Upload and download with RStudio"></p>
</li>
<li>
<p><strong>git</strong>: You can clone and pull a git repository using RStudio.</p>
<p><img src="rstudio-git.png" alt="Git push/pull in RStudio" title="Git push/pull in RStudio"></p>
</li>
</ul>
<h2 id="running-on-a-remote-server-without-rstudio">Running on a remote server without RStudio</h2>
<p>When running computationally intensive stuff, RStudio in the browser can sometimes cause problems. I often can&rsquo;t get back into the session if it&rsquo;s stuck running a script for hours, meaning I just have to trust that it&rsquo;s working, which is awful.</p>
<p>Instead, I run long scripts in the background without using RStudio and monitor them using a log file.</p>
<ol>
<li>Log in to the remote server with <code>ssh</code>.</li>
<li>Find the name or the ID of the Docker container that&rsquo;s running RStudio by running <code>docker ps</code></li>
<li>Connect to that container by running <code>docker exec -it hash_of_container bash</code> (like <code>fcab1f00f1d1</code>) or <code>docker exec -it name_of_container bash</code>. You&rsquo;re now inside the container.</li>
<li>Navigate to the script you want to run: <code>cd home/rstudio/name_of_your_file.R</code></li>
<li>Run the script. There are a billion different ways to do this, like with <code>screen</code> or <code>tmux</code> or <code>dtach</code>. I find it easiest to use <code>nohup</code> and redirect the output of the script to a log file. I run <code>nohup Rscript name_of_your_file.R &gt; process_of_script.log 2&gt;&amp;1 &amp;</code> to send all output to <code>process_of_script.log</code>.</li>
<li>Monitor the script periodically. You can do this in RStudio by logging in and opening the log file (and because the script is running in the background, there won&rsquo;t be any problems restoring an RStudio session), or by typing <code>tail process_of_script.log</code> from the terminal inside the container.</li>
</ol>
<h2 id="making-a-custom-dockerfile">Making a custom Dockerfile</h2>
<p>The <a href="https://hub.docker.com/r/rocker/tidyverse/">base <code>rocker/tidyverse</code> container</a> has most of the packages I typically need for projects, but I also regularly use packages that it doesn&rsquo;t have by default, like <a href="https://rapporter.github.io/pander/"><code>pander</code></a>, <a href="https://cran.r-project.org/web/packages/ggstance/index.html"><code>ggstance</code></a>, and <a href="https://cran.r-project.org/web/packages/countrycode/index.html"><code>countrycode</code></a>.  Because containers come in a pristine state, you have to install all additional packages by hand in a new container, which is tedious and not reproducible.</p>
<p>To fix this, you can create your own Dockerfile that is based on another Dockerfile. This is actually what all the rocker images do—they&rsquo;re based on a  basic <a href="https://hub.docker.com/r/rocker/rstudio/~/dockerfile/"><code>rocker/r-base</code></a> image and then add additional installation commands and directives (for instance, <code>rocker/tidyverse</code> is based on <code>rocker/rstudio</code> which is based on <code>rocker/r-base</code>). If you make your own Dockerfile based on your favorite rocker image, you can host it as an automated build on Docker Hub and then pull it just like any other image.</p>
<p>Making Dockerfiles is tricky and full of tons of options that are well covered elsewhere. Here are some examples I&rsquo;ve made:</p>
<ul>
<li><a href="https://hub.docker.com/r/andrewheiss/docker-example-r-environment/~/dockerfile/"><strong>Super basic easy example</strong></a>: This is <code>rocker/tidyverse</code> with the CRAN versions of <code>pander</code>, <code>stargazer</code>, <code>countrycode</code>, and <code>WDI</code> and the development version of <code>ggrepel</code>.</li>
<li><a href="https://hub.docker.com/r/andrewheiss/tidyverse-rstanarm/~/dockerfile/"><strong><code>tidyverse_rstanarm</code></strong></a>: This installs Stan and <code>rstanarm</code> in the <code>rocker/tidyverse</code> image. Installing Stan from source is tricky and it took me hours to get the right incantation of commands, but it works!</li>
<li><a href="https://hub.docker.com/r/andrewheiss/docker-donors-ngo-restrictions/~/dockerfile/"><strong><code>docker-donors-ngo-restrictions</code></strong></a>: This is <code>tidyverse_rstanarm</code> with all the packages needed for a <a href="https://github.com/andrewheiss/donors-ngo-restrictions">specific project</a>. It does fancy stuff like installing custom fonts and some Python packages.</li>
</ul>
<p>You can host these custom Dockerfiles on GitHub and connect them to Docker Hub as automated builds. Every time you push to the GitHub repository, Docker Hub will automatically rebuild the image so when people run <code>docker pull repository/name</code>, they&rsquo;ll get the latest version. Magic.</p>
%!s(MISSING)]]></content>
        <category term="r" />
        <category term="docker" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Save base graphics as pseudo-objects in R]]></title>
        <link href="https://www.shagunjhaver.com/blog/2016/12/08/save-base-graphics-as-pseudo-objects-in-r/" rel="alternate" />
        <published>2016-12-08T00:00:00+00:00</published>
        <updated>2016-12-08T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2016/12/08/save-base-graphics-as-pseudo-objects-in-r/</id>
        <summary type="html"><![CDATA[Use pryr to save a series of R commands as a kind of macro you can call repeatedly.]]></summary>
        <content type="html"><![CDATA[<p><strong>tl;dr:</strong> Use <code>pryr::%&lt;a-%</code> to save a series of R commands as a kind of macro you can call repeatedly.</p>
<hr>
<h2 id="saving-grid-based-plots-to-objects">Saving grid-based plots to objects</h2>
<p>One nice thing about ggplot (and grid graphics in general) is that you can save plots as objects and use them later in other functions like <code>gridExtra::grid.arrange()</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">library</span>(tidyverse)
<span style="color:#a6e22e">library</span>(gridExtra)

df <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">data_frame</span>(x <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#ae81ff">100</span>, y<span style="color:#f92672">=</span><span style="color:#a6e22e">rnorm</span>(<span style="color:#ae81ff">100</span>),
                 z<span style="color:#f92672">=</span><span style="color:#a6e22e">sample</span>(<span style="color:#66d9ef">LETTERS</span>[1<span style="color:#f92672">:</span><span style="color:#ae81ff">3</span>], <span style="color:#ae81ff">100</span>, replace<span style="color:#f92672">=</span><span style="color:#66d9ef">TRUE</span>))

<span style="color:#75715e"># Scatterplot</span>
p1 <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(df, <span style="color:#a6e22e">aes</span>(x<span style="color:#f92672">=</span>x, y<span style="color:#f92672">=</span>y, color<span style="color:#f92672">=</span>z)) <span style="color:#f92672">+</span> <span style="color:#a6e22e">geom_point</span>()

<span style="color:#75715e"># Distribution</span>
p2 <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ggplot</span>(df, <span style="color:#a6e22e">aes</span>(x<span style="color:#f92672">=</span>y, fill<span style="color:#f92672">=</span>z)) <span style="color:#f92672">+</span> <span style="color:#a6e22e">geom_density</span>(alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">0.5</span>)

<span style="color:#75715e"># Combine plots</span>
<span style="color:#75715e"># arrangeGrob() is basically grid.arrange(), but allows you to save as an object</span>
p.both <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">arrangeGrob</span>(p1, p2)
grid<span style="color:#f92672">::</span><span style="color:#a6e22e">grid.draw</span>(p.both)
</code></pre></div><p><img src="ggplot-example-1.png" alt="ggplot-example-1"><!-- --></p>
<p>This is particularly useful when saving plots with <code>ggsave</code>; you can simultaneously make PDF and PNG versions of your plots for use in LaTeX (PDF) or Word, PowerPoint, or HTML (PNG).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">ggsave</span>(p.both, filename<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;blah.pdf&#34;</span>)
<span style="color:#a6e22e">ggsave</span>(p.both, filename<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;blah.png&#34;</span>)
</code></pre></div><h2 id="saving-base-graphics-based-plots-to-objects">Saving base graphics-based plots to objects</h2>
<p>However, saving base R graphics to objects for later reuse is a little trickier, since plots are built line-by-line into specific devices. One approach is to make plots on a null device, record the plot, and then display it later:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Save plot to an object using a null PDF device</span>
<span style="color:#75715e"># http://stackoverflow.com/a/14742001/120898</span>
<span style="color:#a6e22e">pdf</span>(<span style="color:#66d9ef">NULL</span>)
<span style="color:#a6e22e">dev.control</span>(displaylist<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;enable&#34;</span>)
<span style="color:#a6e22e">plot</span>(df<span style="color:#f92672">$</span>x, df<span style="color:#f92672">$</span>y)
<span style="color:#a6e22e">text</span>(<span style="color:#ae81ff">40</span>, <span style="color:#ae81ff">0</span>, <span style="color:#e6db74">&#34;Random&#34;</span>)
<span style="color:#a6e22e">text</span>(<span style="color:#ae81ff">60</span>, <span style="color:#ae81ff">2</span>, <span style="color:#e6db74">&#34;Text&#34;</span>)
<span style="color:#a6e22e">lines</span>(stats<span style="color:#f92672">::</span><span style="color:#a6e22e">lowess</span>(df<span style="color:#f92672">$</span>x, df<span style="color:#f92672">$</span>y))
p1.base <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">recordPlot</span>()
<span style="color:#a6e22e">invisible</span>(<span style="color:#a6e22e">dev.off</span>())

<span style="color:#75715e"># Display the saved plot</span>
grid<span style="color:#f92672">::</span><span style="color:#a6e22e">grid.newpage</span>()
p1.base
</code></pre></div><p><img src="recordplot-1.png" alt="recordplot-1"><!-- --></p>
<p>One advantage of this is that you can then reuse the plot object to simultaneously save a PDF and a PNG without recreating the plot:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">pdf</span>(<span style="color:#e6db74">&#34;blah_base.pdf&#34;</span>)
p1.base
<span style="color:#a6e22e">dev.off</span>()

<span style="color:#a6e22e">png</span>(<span style="color:#e6db74">&#34;blah_base.png&#34;</span>)
p1.base
<span style="color:#a6e22e">dev.off</span>()
</code></pre></div><p>This is particularly helpful if you want to use nicer fonts or higher resolutions with Cairo:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">cairo_pdf</span>(<span style="color:#e6db74">&#34;blah_base.pdf&#34;</span>,
          width<span style="color:#f92672">=</span><span style="color:#ae81ff">8</span>, height<span style="color:#f92672">=</span><span style="color:#ae81ff">3.5</span>, family<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Comic Sans&#34;</span>)
p1.base
<span style="color:#a6e22e">dev.off</span>()

<span style="color:#a6e22e">png</span>(<span style="color:#e6db74">&#34;blah_base.png&#34;</span>, 
    width<span style="color:#f92672">=</span><span style="color:#ae81ff">8</span>, height<span style="color:#f92672">=</span><span style="color:#ae81ff">3.5</span>, family<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Comic Sans&#34;</span>, 
    bg<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;white&#34;</span>, units<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;in&#34;</span>, res<span style="color:#f92672">=</span><span style="color:#ae81ff">300</span>, type<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;cairo&#34;</span>)
p1.base
<span style="color:#a6e22e">dev.off</span>()
</code></pre></div><p>There are situations, though, where recorded base graphics plot are clunky and don&rsquo;t work well, since the plots have device information embedded in them. Rearranging saved plots with <code>par(mfrow()</code>, <code>layout()</code> or <a href="http://seananderson.ca/courses/11-multipanel/multipanel.pdf">other multipanel techniques</a> can be tricky. Saved plots that make heavy modifications to <code>par()</code> (like Sankey diagrams created from the <a href="https://cran.r-project.org/web/packages/riverplot/index.html">riverplot package</a>) can also be unwieldy when laying out with multiple base graphics plots. It seems that the best way to use multipanel techniques with base R is to use the actual plot commands rather than inserting recorded plots. Which means that if you want to simultaneously output a PNG and a PDF, you have to repeat the code twice, which is awful.</p>
<p><img src="show-split-1.png" alt="show-split-1"><!-- --></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">pdf</span>(<span style="color:#e6db74">&#34;blah.pdf&#34;</span>)
<span style="color:#a6e22e">split.screen</span>(<span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>))

<span style="color:#a6e22e">screen</span>(<span style="color:#ae81ff">1</span>)
<span style="color:#a6e22e">plot</span>(df<span style="color:#f92672">$</span>x, df<span style="color:#f92672">$</span>y)
<span style="color:#a6e22e">text</span>(<span style="color:#ae81ff">40</span>, <span style="color:#ae81ff">0</span>, <span style="color:#e6db74">&#34;Random&#34;</span>)
<span style="color:#a6e22e">text</span>(<span style="color:#ae81ff">60</span>, <span style="color:#ae81ff">2</span>, <span style="color:#e6db74">&#34;Text&#34;</span>)
<span style="color:#a6e22e">lines</span>(stats<span style="color:#f92672">::</span><span style="color:#a6e22e">lowess</span>(df<span style="color:#f92672">$</span>x, df<span style="color:#f92672">$</span>y))

<span style="color:#a6e22e">screen</span>(<span style="color:#ae81ff">2</span>)
<span style="color:#a6e22e">plot</span>(<span style="color:#a6e22e">density</span>(df<span style="color:#f92672">$</span>y))

<span style="color:#a6e22e">close.screen</span>(all<span style="color:#f92672">=</span><span style="color:#66d9ef">TRUE</span>) 
<span style="color:#a6e22e">dev.off</span>()

<span style="color:#75715e"># Once more, with feeling</span>
<span style="color:#a6e22e">png</span>(<span style="color:#e6db74">&#34;blah.png&#34;</span>)
<span style="color:#a6e22e">split.screen</span>(<span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>))

<span style="color:#a6e22e">screen</span>(<span style="color:#ae81ff">1</span>)
<span style="color:#a6e22e">plot</span>(df<span style="color:#f92672">$</span>x, df<span style="color:#f92672">$</span>y)
<span style="color:#a6e22e">text</span>(<span style="color:#ae81ff">40</span>, <span style="color:#ae81ff">0</span>, <span style="color:#e6db74">&#34;Random&#34;</span>)
<span style="color:#a6e22e">text</span>(<span style="color:#ae81ff">60</span>, <span style="color:#ae81ff">2</span>, <span style="color:#e6db74">&#34;Text&#34;</span>)
<span style="color:#a6e22e">lines</span>(stats<span style="color:#f92672">::</span><span style="color:#a6e22e">lowess</span>(df<span style="color:#f92672">$</span>x, df<span style="color:#f92672">$</span>y))

<span style="color:#a6e22e">screen</span>(<span style="color:#ae81ff">2</span>)
<span style="color:#a6e22e">plot</span>(<span style="color:#a6e22e">density</span>(df<span style="color:#f92672">$</span>y))

<span style="color:#a6e22e">close.screen</span>(all<span style="color:#f92672">=</span><span style="color:#66d9ef">TRUE</span>) 
<span style="color:#a6e22e">dev.off</span>()
</code></pre></div><h2 id="a-solution-active-bindings-in-pryr">A solution: active bindings in <code>pryr</code></h2>
<p>Instead of recording a plot and saving all its device-specific settings, you can use the <code>%&lt;a-%</code> function in <a href="https://github.com/hadley/pryr">Hadley Wickham&rsquo;s <code>pryr</code></a> package to essentially <a href="https://stackoverflow.com/questions/29583849/r-saving-a-plot-in-an-object">save a chunk of R code as an object that can then be re-run later</a>, almost like a macro.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">library</span>(pryr)

p1.pryr <span style="color:#f92672">%&lt;a-%</span> {
  <span style="color:#a6e22e">plot</span>(df<span style="color:#f92672">$</span>x, df<span style="color:#f92672">$</span>y)
  <span style="color:#a6e22e">text</span>(<span style="color:#ae81ff">40</span>, <span style="color:#ae81ff">0</span>, <span style="color:#e6db74">&#34;Random&#34;</span>)
  <span style="color:#a6e22e">text</span>(<span style="color:#ae81ff">60</span>, <span style="color:#ae81ff">2</span>, <span style="color:#e6db74">&#34;Text&#34;</span>)
  <span style="color:#a6e22e">lines</span>(stats<span style="color:#f92672">::</span><span style="color:#a6e22e">lowess</span>(df<span style="color:#f92672">$</span>x, df<span style="color:#f92672">$</span>y))
}

p2.pryr <span style="color:#f92672">%&lt;a-%</span> {
  <span style="color:#a6e22e">plot</span>(<span style="color:#a6e22e">density</span>(df<span style="color:#f92672">$</span>y))
}
</code></pre></div><p>Every time <code>p1.pryr</code> is called from now on, R will run everything assinged to it in <code>{}</code>. The plot itself is not saved as an object—rather, the code that generates the plot is saved as an object.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">p1.pryr
</code></pre></div><p><img src="pryr-show-1.png" alt="pryr-show-1"><!-- --></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">p2.pryr
</code></pre></div><p><img src="pryr-show-2.png" alt="pryr-show-2"><!-- --></p>
<p>Including these plots in a multipanel layout is trivial:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">split.screen</span>(<span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>))

<span style="color:#a6e22e">screen</span>(<span style="color:#ae81ff">1</span>)
p1.pryr

<span style="color:#a6e22e">screen</span>(<span style="color:#ae81ff">2</span>)
p2.pryr

<span style="color:#a6e22e">close.screen</span>(all<span style="color:#f92672">=</span><span style="color:#66d9ef">TRUE</span>) 
</code></pre></div><p><img src="pryr-multipanel-1.png" alt="pryr-multipanel-1"><!-- --></p>
<p>Saving these plots as PDFs and PNGs is the same as saving recorded plots:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">pdf</span>(<span style="color:#e6db74">&#34;blah_base_pryr.pdf&#34;</span>)
p1.pryr
<span style="color:#a6e22e">dev.off</span>()

<span style="color:#a6e22e">png</span>(<span style="color:#e6db74">&#34;blah_base_pryr.png&#34;</span>)
p1.pryr
<span style="color:#a6e22e">dev.off</span>()
</code></pre></div><p>But even better is saving multipanel plots as PDFs and PNGs. Save the whole multipanel plot code as an actively bound object and then wrap it in <code>pdf()</code> or <code>png()</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">p.both.pryr <span style="color:#f92672">%&lt;a-%</span> {
  <span style="color:#a6e22e">split.screen</span>(<span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>))

  <span style="color:#a6e22e">screen</span>(<span style="color:#ae81ff">1</span>)
  p1.pryr
  
  <span style="color:#a6e22e">screen</span>(<span style="color:#ae81ff">2</span>)
  p2.pryr
  
  <span style="color:#a6e22e">close.screen</span>(all<span style="color:#f92672">=</span><span style="color:#66d9ef">TRUE</span>)
}

<span style="color:#a6e22e">pdf</span>(<span style="color:#e6db74">&#34;blah_base_both_pryr.pdf&#34;</span>)
p.both.pryr
<span style="color:#a6e22e">dev.off</span>()

<span style="color:#a6e22e">png</span>(<span style="color:#e6db74">&#34;blah_base_both_pryr.png&#34;</span>)
p.both.pryr
<span style="color:#a6e22e">dev.off</span>()
</code></pre></div><p>Again, actively bound objects are <em>not</em> the objects themselves, but an expression that gets run every time the object is accessed. It is far easier to deal with saved base graphics as code instead of as recorded plots, since there is no inherent device information to contend with.</p>
<p>In the end, it&rsquo;s easiest to save grid-based graphics to objects, since they&rsquo;re designed to do that. But you can fake it with base graphics using <code>pryr</code>.</p>
<hr>
<p>One quick real-world use case. As mentioned, Sankey diagrams from <a href="https://cran.r-project.org/web/packages/riverplot/index.html">riverplot package</a> override all graphical parameters and can&rsquo;t be easily plotted in multipanel layouts if you record them with <code>recordPlot()</code>. With <code>pryr</code>, though, it&rsquo;s easy.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#a6e22e">library</span>(riverplot)

x <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">riverplot.example</span>()

riverplot.saved <span style="color:#f92672">%&lt;a-%</span> {
  <span style="color:#a6e22e">plot</span>(x)
  <span style="color:#a6e22e">text</span>(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">0</span>, <span style="color:#e6db74">&#34;Some text\n&#34;</span>, adj<span style="color:#f92672">=</span><span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0.5</span>, <span style="color:#ae81ff">-0.5</span>), font<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>)
  <span style="color:#a6e22e">points</span>(<span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#ae81ff">5</span>, <span style="color:#a6e22e">rep</span>(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">5</span>), pch<span style="color:#f92672">=</span><span style="color:#ae81ff">19</span>)
}

p.both.river <span style="color:#f92672">%&lt;a-%</span> {
  <span style="color:#a6e22e">split.screen</span>(<span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>))

  <span style="color:#a6e22e">screen</span>(<span style="color:#ae81ff">1</span>)
  riverplot.saved
  
  <span style="color:#a6e22e">screen</span>(<span style="color:#ae81ff">2</span>)
  <span style="color:#a6e22e">plot</span>(<span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#ae81ff">10</span>)
  
  <span style="color:#a6e22e">close.screen</span>(all<span style="color:#f92672">=</span><span style="color:#66d9ef">TRUE</span>)
}

p.both.river
</code></pre></div><p><img src="riverplot-example-1.png" alt="riverplot-example-1"><!-- --></p>
%!s(MISSING)]]></content>
        <category term="r" />
        <category term="ggplot" />
        <category term="graphics" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Convert logistic regression standard errors to odds ratios with R]]></title>
        <link href="https://www.shagunjhaver.com/blog/2016/04/25/convert-logistic-regression-standard-errors-to-odds-ratios-with-r/" rel="alternate" />
        <published>2016-04-25T00:00:00+00:00</published>
        <updated>2016-04-25T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2016/04/25/convert-logistic-regression-standard-errors-to-odds-ratios-with-r/</id>
        <summary type="html"><![CDATA[Correctly transform logistic regression standard errors to odds ratios using R]]></summary>
        <content type="html"><![CDATA[<p>Converting logistic regression coefficients and standard errors into odds ratios is trivial in Stata: just add <code>, or</code> to the end of a <code>logit</code> command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">. use &#34;http://www.ats.ucla.edu/stat/data/hsbdemo&#34;, clear

. logit honors i.female math read, or

Logistic regression                             Number of obs     =        200
                                                LR chi2(3)        =      80.87
                                                Prob &gt; chi2       =     0.0000
Log likelihood = -75.209827                     Pseudo R2         =     0.3496

------------------------------------------------------------------------------
      honors | Odds Ratio   Std. Err.      z    P&gt;|z|     [95% Conf. Interval]
-------------+----------------------------------------------------------------
      female |
     female  |   3.173393   1.377573     2.66   0.008      1.35524    7.430728
        math |   1.140779   .0370323     4.06   0.000     1.070458     1.21572
        read |   1.078145    .029733     2.73   0.006     1.021417    1.138025
       _cons |   1.99e-06   3.68e-06    -7.09   0.000     5.29e-08    .0000749
------------------------------------------------------------------------------
</code></pre></div><p>Doing the same thing in R is a little trickier. Calculating odds ratios for <em>coefficients</em> is trivial, and <code>exp(coef(model))</code> gives the same results as Stata:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r"><span style="color:#75715e"># Load libraries</span>
<span style="color:#a6e22e">library</span>(dplyr)  <span style="color:#75715e"># Data frame manipulation</span>
<span style="color:#a6e22e">library</span>(readr)  <span style="color:#75715e"># Read CSVs nicely</span>
<span style="color:#a6e22e">library</span>(broom)  <span style="color:#75715e"># Convert models to data frames</span>

<span style="color:#75715e"># Use treatment contrasts instead of polynomial contrasts for ordered factors</span>
<span style="color:#a6e22e">options</span>(contrasts<span style="color:#f92672">=</span><span style="color:#a6e22e">rep</span>(<span style="color:#e6db74">&#34;contr.treatment&#34;</span>, <span style="color:#ae81ff">2</span>))

<span style="color:#75715e"># Load and clean data</span>
df <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">read_csv</span>(<span style="color:#e6db74">&#34;http://www.ats.ucla.edu/stat/data/hsbdemo.csv&#34;</span>) <span style="color:#f92672">%&gt;%</span>
  <span style="color:#a6e22e">mutate</span>(honors <span style="color:#f92672">=</span> <span style="color:#a6e22e">factor</span>(honors, levels<span style="color:#f92672">=</span><span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;not enrolled&#34;</span>, <span style="color:#e6db74">&#34;enrolled&#34;</span>)),
         female <span style="color:#f92672">=</span> <span style="color:#a6e22e">factor</span>(female, levels<span style="color:#f92672">=</span><span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;male&#34;</span>, <span style="color:#e6db74">&#34;female&#34;</span>), ordered<span style="color:#f92672">=</span><span style="color:#66d9ef">TRUE</span>))

<span style="color:#75715e"># Run model</span>
model <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">glm</span>(honors <span style="color:#f92672">~</span> female <span style="color:#f92672">+</span> math <span style="color:#f92672">+</span> read, data<span style="color:#f92672">=</span>df, family<span style="color:#f92672">=</span><span style="color:#a6e22e">binomial</span>(link<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;logit&#34;</span>))
<span style="color:#a6e22e">summary</span>(model)
<span style="color:#75715e">#&gt;</span>
<span style="color:#75715e">#&gt; Call:</span>
<span style="color:#75715e">#&gt; glm(formula = honors ~ female + math + read, family = binomial(link = &#34;logit&#34;), </span>
<span style="color:#75715e">#&gt;     data = df)</span>
<span style="color:#75715e">#&gt;</span>
<span style="color:#75715e">#&gt; Deviance Residuals:</span>
<span style="color:#75715e">#&gt;     Min       1Q   Median       3Q      Max  </span>
<span style="color:#75715e">#&gt; -2.0055  -0.6061  -0.2730   0.4844   2.3953  </span>
<span style="color:#75715e">#&gt;</span>
<span style="color:#75715e">#&gt; Coefficients:</span>
<span style="color:#75715e">#&gt;               Estimate Std. Error z value Pr(&gt;|z|)    </span>
<span style="color:#75715e">#&gt; (Intercept)  -13.12749    1.85080  -7.093 1.31e-12 ***</span>
<span style="color:#75715e">#&gt; femalefemale   1.15480    0.43409   2.660  0.00781 ** </span>
<span style="color:#75715e">#&gt; math           0.13171    0.03246   4.058 4.96e-05 ***</span>
<span style="color:#75715e">#&gt; read           0.07524    0.02758   2.728  0.00636 ** </span>
<span style="color:#75715e">#&gt; ---</span>
<span style="color:#75715e">#&gt; Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1</span>
<span style="color:#75715e">#&gt;</span>
<span style="color:#75715e">#&gt; (Dispersion parameter for binomial family taken to be 1)</span>
<span style="color:#75715e">#&gt;</span>
<span style="color:#75715e">#&gt;     Null deviance: 231.29  on 199  degrees of freedom</span>
<span style="color:#75715e">#&gt; Residual deviance: 150.42  on 196  degrees of freedom</span>
<span style="color:#75715e">#&gt; AIC: 158.42</span>
<span style="color:#75715e">#&gt;</span>
<span style="color:#75715e">#&gt; Number of Fisher Scoring iterations: 5</span>

<span style="color:#75715e"># Exponentiate coefficients</span>
<span style="color:#a6e22e">exp</span>(<span style="color:#a6e22e">coef</span>(model))
<span style="color:#75715e">#&gt;  (Intercept) femalefemale         math         read </span>
<span style="color:#75715e">#&gt; 1.989771e-06 3.173393e+00 1.140779e+00 1.078145e+00</span>

<span style="color:#75715e"># Exponentiate standard errors</span>
<span style="color:#75715e"># WRONG</span>
ses <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">sqrt</span>(<span style="color:#a6e22e">diag</span>(<span style="color:#a6e22e">vcov</span>(model)))
<span style="color:#a6e22e">exp</span>(ses)
<span style="color:#75715e">#&gt;  (Intercept) femalefemale         math         read </span>
<span style="color:#75715e">#&gt;     6.364894     1.543557     1.032994     1.027961</span>
</code></pre></div><p>Calculating the odds-ratio adjusted <em>standard errors</em> is less trivial—<code>exp(ses)</code> does not work. This is because of the underlying math behind logistic regression (and all other models that use odds ratios, hazard ratios, etc.). Instead of exponentiating, the standard errors have to be calculated with calculus (Taylor series) or simulation (bootstrapping). Stata uses the <a href="https://www.stata.com/support/faqs/statistics/delta-rule/">Taylor series-based delta method</a>, which is <a href="http://www.ats.ucla.edu/stat/r/faq/deltamethod.htm">fairly easy to implement in R</a> (see Example 2).</p>
<p>Essentially, you can calculate the odds ratio-adjusted standard error with $\sqrt{\text{gradient} \times \text{coefficient variance} \times \text{gradient}}$, and since the first derivative/gradient of $e^x$ is just $e^x$, in this case the adjusted standard error is simply $\sqrt{e^{\text{coefficient}} \times \text{coefficient variance} \times e^{\text{coefficient}}}$ or $\sqrt{(e^{\text{coefficient}})^2 \times \text{coefficient variance}}$</p>
<p>Doing this in R is easy, especially with <a href="https://github.com/dgrtwo/broom"><code>broom::tidy()</code></a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">model.df <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">tidy</span>(model)  <span style="color:#75715e"># Convert model to dataframe for easy manipulation</span>
model.df
<span style="color:#75715e">#&gt;           term     estimate  std.error statistic      p.value</span>
<span style="color:#75715e">#&gt; 1  (Intercept) -13.12749111 1.85079765 -7.092883 1.313465e-12</span>
<span style="color:#75715e">#&gt; 2 femalefemale   1.15480121 0.43408932  2.660285 7.807461e-03</span>
<span style="color:#75715e">#&gt; 3         math   0.13171175 0.03246105  4.057532 4.959406e-05</span>
<span style="color:#75715e">#&gt; 4         read   0.07524236 0.02757725  2.728422 6.363817e-03</span>

model.df <span style="color:#f92672">%&gt;%</span> 
  <span style="color:#a6e22e">mutate</span>(or <span style="color:#f92672">=</span> <span style="color:#a6e22e">exp</span>(estimate),  <span style="color:#75715e"># Odds ratio/gradient</span>
         var.diag <span style="color:#f92672">=</span> <span style="color:#a6e22e">diag</span>(<span style="color:#a6e22e">vcov</span>(model)),  <span style="color:#75715e"># Variance of each coefficient</span>
         or.se <span style="color:#f92672">=</span> <span style="color:#a6e22e">sqrt</span>(or^2 <span style="color:#f92672">*</span> var.diag))  <span style="color:#75715e"># Odds-ratio adjusted </span>
<span style="color:#75715e">#&gt;           term     estimate  std.error statistic      p.value           or</span>
<span style="color:#75715e">#&gt; 1  (Intercept) -13.12749111 1.85079765 -7.092883 1.313465e-12 1.989771e-06</span>
<span style="color:#75715e">#&gt; 2 femalefemale   1.15480121 0.43408932  2.660285 7.807461e-03 3.173393e+00</span>
<span style="color:#75715e">#&gt; 3         math   0.13171175 0.03246105  4.057532 4.959406e-05 1.140779e+00</span>
<span style="color:#75715e">#&gt; 4         read   0.07524236 0.02757725  2.728422 6.363817e-03 1.078145e+00</span>
<span style="color:#75715e">#&gt;       var.diag        or.se</span>
<span style="color:#75715e">#&gt; 1 3.4254519469 3.682663e-06</span>
<span style="color:#75715e">#&gt; 2 0.1884335381 1.377536e+00</span>
<span style="color:#75715e">#&gt; 3 0.0010537198 3.703090e-02</span>
<span style="color:#75715e">#&gt; 4 0.0007605045 2.973228e-02</span>
</code></pre></div><p>This can all be wrapped up into a simple function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-r" data-lang="r">get.or.se <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">function</span>(model) {
  broom<span style="color:#f92672">::</span><span style="color:#a6e22e">tidy</span>(model) <span style="color:#f92672">%&gt;%</span>
    <span style="color:#a6e22e">mutate</span>(or <span style="color:#f92672">=</span> <span style="color:#a6e22e">exp</span>(estimate),
           var.diag <span style="color:#f92672">=</span> <span style="color:#a6e22e">diag</span>(<span style="color:#a6e22e">vcov</span>(model)),
           or.se <span style="color:#f92672">=</span> <span style="color:#a6e22e">sqrt</span>(or^2 <span style="color:#f92672">*</span> var.diag)) <span style="color:#f92672">%&gt;%</span>
    <span style="color:#a6e22e">select</span>(or.se) <span style="color:#f92672">%&gt;%</span> unlist <span style="color:#f92672">%&gt;%</span> unname
}

<span style="color:#a6e22e">get.or.se</span>(model)
<span style="color:#75715e">#&gt; [1] 3.682663e-06 1.377536e+00 3.703090e-02 2.973228e-02</span>
</code></pre></div><p>Same results in both programs!</p>
<p><img src="same.gif" alt="Same!" title="Same!"></p>
%!s(MISSING)]]></content>
        <category term="r" />
        <category term="regression" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Drone sightings in the US, visualized]]></title>
        <link href="https://www.shagunjhaver.com/blog/2016/04/03/drone-sightings-in-the-us-visualized/" rel="alternate" />
        <published>2016-04-03T00:00:00+00:00</published>
        <updated>2016-04-03T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2016/04/03/drone-sightings-in-the-us-visualized/</id>
        <summary type="html"><![CDATA[See where the FAA has reported hobbyist drone sightings from 2014–2016]]></summary>
        <content type="html"><![CDATA[<p>For my first entry into <a href="https://rud.is/b/2016/03/30/introducing-a-weekly-r-python-js-etc-vis-challenge/">@hrbrmstr&rsquo;s new weekly data visualization challenge</a>, I made two plots related to the <a href="https://www.faa.gov/uas/resources/public_records/uas_sightings_report/">dataset of unmanned aircraft (UAS) sightings</a>. The <a href="https://github.com/andrewheiss/2016-13/tree/master/andrewheiss">R code for these plots is on GitHub</a>.</p>
<p>First, I was interested in the type of drones being spotted. When I think of drones, I typically think of the ones the CIA and Air Force have flying over Yemen, Somalia, Afghanistan, and Pakistan shooting at suspected ISIS and Al-Qaeda members. To see if that&rsquo;s the case with these UAS sightings, I mapped out all US-based Air Force bases and all drone sightings, assuming that any military drone sightings would happen near bases.</p>
<p><img src="drones_af_map.png" alt="UAS sightings and Air Force bases"></p>
<p>While some sightings do occur near bases (like in Eastern Washington, Eastern Colorado, and Nebraska, for example), most don&rsquo;t. In fact, in Texas, there are almost no UAS sightings near Air Force bases. Thus, even though there are <a href="http://www.engadget.com/2016/03/09/pentagon-deployed-drones-in-us/">documented cases of military drones being used in the US</a>, these sightings are most definitely not military drones (unless they&rsquo;re all drones coming from unmapped CIA bases). They&rsquo;re quadrocopters and other hobbyist drones.</p>
<p>I noticed that in some cases (like Salt Lake City, Las Vegas, and Phoenix), almost all sightings were clustered around Air Force bases. However, this is not because the military is spying on everyone in the west, but because that&rsquo;s where everyone lives—very few hobbyist drone operators live in the Utah, Nevada, or Arizona deserts. Drone sightings (both the number of sightings and their location) might just be a function of state population.</p>
<p>For my second plot, I looked at the relationship between drone sightings and state population to see if there are states that see more drones than normal. The results were surprising.</p>
<p><img src="drones_states.png" alt="Drone sightings per capita"></p>
<p>While more populous states like New York, California, Florida, and Texas predictably see more drones (since there are likely more hobbyists), Washington, DC by far sees the most drone activity per capita. Maybe everyone there really is just trying to spy on Congress and the <a href="http://www.cnn.com/2015/05/14/politics/white-house-drone-arrest/">President</a>, even though <a href="http://www.usatoday.com/story/news/2015/10/09/drone-crash-white-house-ellipse-us-park-police-federal-aviation-administration/73641812/">drones are ostensibly banned in DC</a>.</p>
%!s(MISSING)]]></content>
        <category term="r" />
        <category term="dataviz" />
        <category term="hrbrmstr-challenge" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Fauxcasts: Use a podcast app to listen to audiobooks]]></title>
        <link href="https://www.shagunjhaver.com/blog/2016/02/11/fauxcasts/" rel="alternate" />
        <published>2016-02-11T00:00:00+00:00</published>
        <updated>2016-02-11T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2016/02/11/fauxcasts/</id>
        <summary type="html"><![CDATA[Create a temporary podcast feed of a CD-based audiobook and use a modern podcast app to listen to the book faster and better.]]></summary>
        <content type="html"><![CDATA[<p>Our public library has a huge collection of books on CD, including a bunch of <a href="https://en.wikipedia.org/wiki/Arkangel_Shakespeare">well dramatized versions of Shakespeare plays</a> that I&rsquo;ve always meant to read. However, out of all the music-listening devices I own, only two have optical drives: the ancient Mac Mini we use for our media center and our minivan. It&rsquo;s trivial to rip the audiobooks to MP3 on the Mac Mini, but I&rsquo;ve never been completely happy with the options for listening to them.</p>
<p>I listen to to pretty much all spoken word media on my iPhone or iPad through either <a href="https://overcast.fm/">Overcast</a> (for podcasts) or the <a href="https://www.audible.com/sw">Audible app</a> (for audiobooks). Both of these apps allow for faster playback (up to 2.5 or 3x), and Overcast uses the fantastic Smart Speed feature to cut out the silence in between sentences.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> Apple&rsquo;s native Music app has none of these extra features, which means I have to listen to CD-based audiobooks at 1x speed like a caveman.</p>
<p>In a perfect world I&rsquo;d be able fly through these CD-based audiobooks in Overcast.</p>
<p>Behold that perfect world: <a href="https://github.com/andrewheiss/fauxcasts">Fauxcasts</a>. I wrote up a little script that generates a podcast RSS feed from a folder of MP3 files. After running the script, I just have to upload the folder and feed to a server, subscribe to my fake podcast, and listen away.</p>
<p><img src="fauxcast.png" alt="Macbeth as a podcast"></p>
<p>Get <a href="https://github.com/andrewheiss/fauxcasts">Fauxcasts from GitHub</a> and make your own temporary podcasts.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Since Overcast came out in July 2014, Smart Speed has saved me an extra 42 hours beyond speed adjustments, which is kind of ridiculously awesome.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
%!s(MISSING)]]></content>
        <category term="rss" />
        <category term="podcasts" />
        <category term="audiobooks" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Use LibreOffice Base as a GUI for an SQLite database in OS X]]></title>
        <link href="https://www.shagunjhaver.com/blog/2016/02/10/libreoffice-base-sqlite-odbc-osx/" rel="alternate" />
        <published>2016-02-10T00:00:00+00:00</published>
        <updated>2016-02-10T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2016/02/10/libreoffice-base-sqlite-odbc-osx/</id>
        <summary type="html"><![CDATA[Connect LibreOffice to an SQLite database to take advantage of SQLite’s ubiquitousness and LibreOffice’s form-based GUI.]]></summary>
        <content type="html"><![CDATA[<h2 id="the-problem">The problem</h2>
<p>As I conduct interviews for my dissertation research, I&rsquo;ve been trying to figure out an open source database for storing interview notes and keeping track of the people and organizations I&rsquo;m talking to. My ideal requirements are simple:</p>
<ol>
<li>The format should be open source.</li>
<li>The format should be portable and not require an underlying server (sorry MongoDB and MySQL)—this way I can save the file in an encrypted file container for IRB data protection purposes.</li>
<li>The format should be easy to access with multiple languages (especially R and Python), ideally without external dependencies like Java.</li>
<li>The format should be compatible with some sort of Microsoft Access-esque form GUI to allow for easy data insertion.</li>
</ol>
<p>However, finding the right combination of programs and formats has been slightly more difficult. <a href="https://sqlite.org/">SQLite</a> is the best format, given that it&rsquo;s the <a href="https://sqlite.org/mostdeployed.html">most widely deployed and used database engine</a> <em>and</em> is open source <em>and</em> has native support in both <a href="https://cran.r-project.org/web/packages/dplyr/">R</a><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> and <a href="https://docs.python.org/3/library/sqlite3.html">Python</a>. The only thing it lacks is a nice form-based GUI front end.</p>
<p>There are <a href="http://sqlitebrowser.org/">plenty</a> of <a href="https://www.sqlitepro.com/">SQLite</a> <a href="https://addons.mozilla.org/en-US/firefox/addon/sqlite-manager-webext/">viewers</a>, but I haven&rsquo;t found any that let you create Access-like forms. I could use Python to program my own GUI (or even get fancy and learn Swift and make a native Cocoa app), but that seems like an excessive amount of work.</p>
<p><a href="https://www.libreoffice.org/discover/base/">LibreOffice Base</a> has excellent support for database-backed forms, but under the hood, LibreOffice uses the Java-based <a href="http://hsqldb.org/">HSQLDB</a>, which does not have native R and Python support and requires older Java runtime environments.</p>
<h2 id="the-solution">The solution</h2>
<p>Fortunately there&rsquo;s a way to use an SQLite database as the backend for LibreOffice Base using an ODBC driver, giving the best of both worlds: an open, universal, Java-free database behind a customizable form-based GUI.</p>
<p>There are <a href="https://wiki.openoffice.org/wiki/Documentation/How_Tos/Using_SQLite_With_OpenOffice.org">official instructions for doing this on Linux and Windows</a>, but there&rsquo;s nothing about doing it in OS X. So here&rsquo;s that missing tutorial.</p>
<ol>
<li>SQLite is already installed on OS X. Create a new SQLite database using <code>sqlite3</code> in Terminal (or even easier, use a <a href="http://sqlitebrowser.org/">GUI</a> <a href="https://www.sqlitepro.com/">program</a>). Add some tables to it, or don&rsquo;t—it doesn&rsquo;t matter. You just some sort of database file.</li>
<li>Download the <a href="http://www.ch-werner.de/sqliteodbc/">SQLite ODBC driver</a> for OS X. The page includes a link to a precompiled version (<em>currently it says &ldquo;Steve Palm kindly provided a build of version 0.9993 for MacOSX 10.{6,7,8,9,10,11} on Intel as installer package (sqliteodbc-0.9993.dmg)&quot;</em>). Install the driver by opening <code>sqliteodbc-0.9993.pkg</code>.</li>
<li>Download an ODBC manager app. Prior to OS X 10.5, Apple included one of these, but for whatever reason they stopped with Snow Leopard. There are two that work equally well: <a href="http://www.odbcmanager.net/index.php">ODBC Manager</a> and <a href="http://www.iodbc.org/dataspace/iodbc/wiki/iODBC/Downloads">iODBC Administrator</a>.</li>
<li>Open the ODBC manager/administrator app. Add a new driver using these settings:
<img src="driver_setup.png" alt="Driver setup dialog" title="Driver setup dialog"></li>
<li>Add a new User DSN (Data Source Name). Create a new key named &ldquo;database&rdquo; and use the full absolute path to the SQLite database file as the value:
<img src="dsn_setup.png" alt="DSN setup dialog" title="DSN setup dialog"></li>
<li>Quit the ODBC manager. The SQLite file is now accessible in any program that uses ODBC.</li>
<li>Open LibreOffice and create a new Base database. In the wizard, select &ldquo;Connect to an existing database&rdquo; and choose &ldquo;ODBC&rdquo;:
<img src="base_wizard.png" alt="LibreOffice Base wizard" title="LibreOffice Base wizard"></li>
<li>Click next to select which ODBC database to load. If you click on &ldquo;Browse…&rdquo;, you should see the name of the SQLite database you set up as a DSN earlier.</li>
<li>Click on &ldquo;Finish.&rdquo; LibreOffice will prompt you to save an <code>.odf</code> database. This is fine—it&rsquo;s not actually saving the database, just the accompanying form data.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></li>
<li>Create new tables and forms using LibreOffice:
<img src="ugly_form.png" alt="Super ugly example form" title="Super ugly example form"></li>
</ol>
<p>Any time you save, all edits will occur on the SQLite file. Create a table, insert some records, and open the SQLite file in a GUI program to see all the changes. Magic!</p>
<p>Even though there are 10 steps, it&rsquo;s not too difficult. tl;dr version: (1) install an SQLite ODBC driver, (2) install an ODBC manager, (3) use the manager to configure the SQLite ODBC driver and connect to an existing SQLite database, and (4) connect to the SQLite database through ODBC with LibreOffice Base.</p>
<p>Perfect!</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Technically RSQLite is a separate package, but it&rsquo;s a dependency of <a href="https://cran.r-project.org/web/packages/dplyr/index.html">dplyr</a>, which is as important as base R in my book.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>I think… I haven&rsquo;t actually checked or tested this.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
%!s(MISSING)]]></content>
        <category term="osx" />
        <category term="sqlite" />
        <category term="databases" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Toggle the Bluetooth menu item with AppleScript]]></title>
        <link href="https://www.shagunjhaver.com/blog/2013/05/28/toggle-bluetooth-menu-applescript/" rel="alternate" />
        <published>2013-05-28T00:00:00+00:00</published>
        <updated>2013-05-28T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2013/05/28/toggle-bluetooth-menu-applescript/</id>
        <summary type="html"><![CDATA[The OS X Bluetooth menu item re-enables itself every time a device battery gets low. This simple application turns it back off.]]></summary>
        <content type="html"><![CDATA[<p>I like to keep my menubar as uncluttered as possible, so I keep as many items hidden as possible—especially system programs like Time Machine, the displays menu, or the volume menu.</p>
<p><img src="menubar.png" alt="Clean menu bar"></p>
<p>I also keep the Bluetooth menu turned off. However, when the battery runs low on either my keyboard or mouse, the Bluetooth menu item comes back, and it doesn&rsquo;t turn back off after the batteries get replaced. The only way to turn it off is to go to the Bluetooth panel in System Preferences and disable the menu item manually. It&rsquo;s a tiny chore, but a chore nonetheless. One that can be automated!<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup><sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p>Save <a href="https://gist.github.com/andrewheiss/5667322">this</a> to an AppleScript application (or an Automator application) and run to (kludgingly) toggle the Bluetooth menu item.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-applescript" data-lang="applescript"><span style="color:#66d9ef">tell</span> application <span style="color:#e6db74">&#34;System Preferences&#34;</span>
  activate
  <span style="color:#66d9ef">set</span> the current pane <span style="color:#66d9ef">to</span> pane <span style="color:#e6db74">&#34;Bluetooth&#34;</span>
  delay <span style="color:#ae81ff">1</span>
<span style="color:#66d9ef">end</span> <span style="color:#66d9ef">tell</span>

<span style="color:#66d9ef">tell</span> application <span style="color:#e6db74">&#34;System Events&#34;</span>
  <span style="color:#66d9ef">tell</span> process <span style="color:#e6db74">&#34;System Preferences&#34;</span>
    <span style="color:#66d9ef">set</span> toggleBluetooth <span style="color:#66d9ef">to</span> the checkbox <span style="color:#e6db74">&#34;Show Bluetooth in menu bar&#34;</span> <span style="color:#66d9ef">of</span> the <span style="color:#a6e22e">window</span> <span style="color:#e6db74">&#34;Bluetooth&#34;</span>
    click toggleBluetooth
  <span style="color:#66d9ef">end</span> <span style="color:#66d9ef">tell</span>
<span style="color:#66d9ef">end</span> <span style="color:#66d9ef">tell</span>

<span style="color:#66d9ef">tell</span> application <span style="color:#e6db74">&#34;System Preferences&#34;</span>
  quit
<span style="color:#66d9ef">end</span> <span style="color:#66d9ef">tell</span>
</code></pre></div><section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>See <a href="geeks-vs-nongeeks-repetitive-tasks.png">this fantastic graph</a> originally posted by <a href="https://plus.google.com/+BrunoOliveira/posts/MGxauXypb1Y">Bruno Oliviera</a>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>And by spending 15 minutes figuring out the hidden Applescript API for System Preferences to automate a task that takes up 30 seconds every month, <a href="http://xkcd.com/1205/">I totally saved time in the long run</a>.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
%!s(MISSING)]]></content>
        <category term="osx" />
        <category term="automation" />
        <category term="AppleScript" />
    </entry>
    <entry>
        <title type="html"><![CDATA[True side-by-side page numbers in InDesign]]></title>
        <link href="https://www.shagunjhaver.com/blog/2013/03/15/side-by-side-page-numbers-indesign/" rel="alternate" />
        <published>2013-03-15T00:00:00+00:00</published>
        <updated>2013-03-15T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2013/03/15/side-by-side-page-numbers-indesign/</id>
        <summary type="html"><![CDATA[Automatically create side-by-side page numbers for parallel texts or spread numbers in InDesign.]]></summary>
        <content type="html"><![CDATA[<p>The books I make for the Middle East Texts Initiative contain side-by-side English-Arabic translations of old Arabic, Hebrew, and Latin texts. InDesign can generally handle the side-by-side parallel stories and text frames, but it cannot properly number the pages. After all the front matter and introductory text, the English translation starts on a verso page (left) with page 1, followed by a page of Arabic on the recto (right), also on page 1. The next verso is page 2.</p>
<p>InDesign doesn&rsquo;t include a way to insert automatic spread numbers instead of page numbers, which means there&rsquo;s no easy way to have automatic parallel, same-numbered pages. For years users have come up with kludgy solutions, like:</p>
<ul>
<li>Making a list of page numbers in Excel and placing that list in a threaded text box on every master page (kind of like <a href="http://indesignsecrets.com/making-numbered-tickets.php">this</a>)</li>
<li><a href="http://indesignsecrets.com/create-spread-numbers.php">Placing a document of empty lines</a> to take advantage of InDesign&rsquo;s automatic paragraph numbering</li>
<li><a href="http://indesignsecrets.com/create-spread-numbers.php#comment-497592">Making a special text variable</a> for each page (<a href="http://benmilander.com/content/number-spreads-free-script">automated version</a>)</li>
</ul>
<p>These methods all work, but with one big caveat—they don&rsquo;t deal with any of the <em>actual</em> page numbers. If you try to build an automatic table of contents after using any of these methods, you&rsquo;ll get page numbers, not the spread numbers. Similarly, the exported PDF will show page numbers instead of spread numbers.</p>
<p>The only real way to get true side-by-side numbering is to create new sections for each page. Right click on one of your pages, start a section at page 1. Right click on the next page, start a section at page 1 with some prefix (so there aren&rsquo;t duplicate pages). Right click on the next page, start a section at page 2. And so on for the all the side-by-side pages.</p>
<p>Crazy tedious. But totally automatable with a script. <a href="https://github.com/andrewheiss/Side-by-side-page-numbers-in-InDesign">Find said script at GitHub</a>.</p>
%!s(MISSING)]]></content>
        <category term="arabic" />
        <category term="graphic design" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Gutenberg ipsum]]></title>
        <link href="https://www.shagunjhaver.com/blog/2012/07/02/gutenberg-ipsum/" rel="alternate" />
        <published>2012-07-02T00:00:00+00:00</published>
        <updated>2012-07-02T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2012/07/02/gutenberg-ipsum/</id>
        <summary type="html"><![CDATA[Stop using boring, boilerplate Lorem ipsum filler text and build your own random, semi-coherent text from Project Gutenberg books.]]></summary>
        <content type="html"><![CDATA[<p>I&rsquo;ve decided to try to be more like <a href="http://bencrowder.net/">Ben Crowder</a>, <a href="http://www.todrobbins.com/">Tod Robbins</a>, and <a href="http://brettterpstra.com/">Brett Terpstra</a> and release my code tinkerings into the public more often.</p>
<p>Since upgrading to <a href="http://smilesoftware.com/TextExpander/">TextExpander 4</a> a couple weeks ago, I&rsquo;ve decided to delve into it a lot more. I recently converted from <a href="http://www.ergonis.com/products/typinator/">Typinator</a>, where I only really used a few expansions for <a href="http://www.andrewheiss.com/blog/2009/04/26/typing-transliterated-arabic-quickly/">typing transliterated Arabic</a>. After belatedly stumbling upon a couple posts by <a href="http://brettterpstra.com/dammit-again-with-the-lipsum/">Brett</a> and <a href="http://www.leancrew.com/all-this/2011/02/dissociated-darwin/">Dr. Drang</a>, I found that TextExpander can be used for some pretty fun stuff. Like random Lorem Ipsum-like text based on <em>n</em>-gram algorithms!</p>
<p>I really liked Dr. Drang&rsquo;s concept of using text from Project Gutenberg to build completely random—yet mostly sensible—dummy text, since the standard &ldquo;Lorem ipsum&rdquo; looks really repetitive and boring. Isn&rsquo;t this <em>Brothers Karamazov</em>-esque paragraph a lot better?</p>
<blockquote>
<p>Mitya uttered his wild speech. He turned quickly on his way. “Do you suppose gentlemen, that doesn’t care for an escort, for?” I am gone? You won’t be frightened and cry out: ‘I want to join the choir and shout nastiness into both ears,’ while he ran to his bedroom, lay down and I walked along both of us. Dear ones, why do you wait.</p>
</blockquote>
<p>Or this Homeric sounding stuff?</p>
<blockquote>
<p>And of bounding steeds: Seven captives next a little space Then rush d amid the bright band: great Ithacus, before, First of mortals! for the gods Then swift pursued her urged, and crown&rsquo;d Then sunk unpitied to the dire alarms; Both breathing slaughter, follow&rsquo;d and Patroclus loved remains defend. Beneath.</p>
</blockquote>
<p>I made a couple minor modifications to Dr. Drang&rsquo;s original Perl script, clunkily removing paired characters like quotes and parentheses and allowing new corpus files to be specified with the command line, which makes it easier to repeat the code for multiple TextExpander snippets.</p>
<p>Here&rsquo;s how to get it working:</p>
<ul>
<li>Copy the script below and save it somewhere on your computer (mine is in <code>~/bin/gutenberg_ipsum/</code>).</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-perl" data-lang="perl"><span style="color:#75715e">#!/usr/bin/perl -w</span>
<span style="color:#75715e"># Modified from Dr. Drang&#39;s original script at http://www.leancrew.com/all-this/2011/02/dissociated-darwin/</span>

<span style="color:#66d9ef">use</span> Games::Dissociate;

<span style="color:#75715e"># Choose the corpus file</span>
<span style="color:#66d9ef">if</span> ($#ARGV <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) {
  $corpus <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;totc.txt&#34;</span>;
} <span style="color:#66d9ef">else</span> {
  $corpus <span style="color:#f92672">=</span> $ARGV[<span style="color:#ae81ff">0</span>];
}

<span style="color:#75715e"># Slurp in the given corpus as a single string.</span>
open(<span style="color:#66d9ef">my</span> $fh, <span style="color:#e6db74">&#34;$ENV{HOME}/bin/gutenberg_ipsum/words/&#34;</span> <span style="color:#f92672">.</span> $corpus) <span style="color:#f92672">or</span> die <span style="color:#e6db74">&#34;Can&#39;t open&#34;</span>;
{local $/; $corpus <span style="color:#f92672">=</span> <span style="color:#e6db74">&lt;$fh&gt;</span>;}

<span style="color:#75715e"># Dissociate the corpus, using word pairs, and return 15-50 pairs.</span>
$length <span style="color:#f92672">=</span> int(<span style="color:#ae81ff">15</span> <span style="color:#f92672">+</span> rand(<span style="color:#ae81ff">35</span>));
$dis <span style="color:#f92672">=</span> dissociate($corpus, <span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>, $length);

<span style="color:#75715e"># Remove quotes and other paired characters, since there might be some that are unmatched</span>
<span style="color:#75715e"># But this is an incredibly clunky fix. If I had more time/better Perl chops, I&#39;d probably build some algorithm to find unmatched quotes or parentheses and insert them randomly in the text. But that&#39;s hard :)</span>
$dis <span style="color:#f92672">=~</span> <span style="color:#e6db74">s/[\&#34;\[\]\_\(\)]//gm</span>;

<span style="color:#75715e"># Capitalize the first word and end it with a period.</span>
$dis <span style="color:#f92672">=~</span> <span style="color:#e6db74">s/^(.)/\u$1/</span>;
$dis <span style="color:#f92672">=~</span> <span style="color:#e6db74">s/[.);:?&#39;&#34;, -]+$/./</span>;

<span style="color:#66d9ef">print</span> $dis;
</code></pre></div><ul>
<li>Go to <a href="http://www.gutenberg.org/">Project Gutenberg</a> and download the full text for some book (or create some other corpus), stripping out the legal text, table of contents, and anything else you don&rsquo;t want the script to use to generate random text. Save that file in some folder on your computer (mine is in <code>~/bin/gutenberg_ipsum/words/</code>).</li>
<li>Modify line 7 of the script to default to your newly downloaded and saved corpus (mine is <code>totc.txt</code>, for <em>A Tale of Two Cities</em>).</li>
<li>Modify line 14 to point to wherever you saved your script file and corpus file(s).</li>
<li>Make the script executable (<code>chmod +x gutenberg_ipsum.pl</code> at the terminal).</li>
<li>Install Games::Dissociate. You can either follow <a href="http://www.leancrew.com/all-this/2011/02/dissociated-darwin/">Dr. Drang&rsquo;s instructions</a> or use Perl&rsquo;s CPAN shell:
<ul>
<li>Type <code>sudo perl -MCPAN -e shell</code> at a terminal and hit enter for each of the configuration options if they haven&rsquo;t been preset previously</li>
<li>Type <code>install Games::Dissociate</code></li>
<li>Once everything has installed, type <code>q</code> to exit the Perl shell</li>
</ul>
</li>
<li>Test your script by running it from the terminal: <code>gutenberg_ipsum.pl</code>. You should get some fun random filler text.</li>
<li>Use other corpus texts by passing their filenames as arguments: <code>gutenberg_ipsum.pl alice.txt</code> for <em>Alice in Wonderland</em>, for example. Just make sure a corpus with that name lives in your corpus directory.</li>
</ul>
<p>Once the script is installed and running, It&rsquo;s trivial to make it work with TextExpander. Make a new Shell Script snippet with this code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh"><span style="color:#75715e">#!/usr/bin/env bash
</span><span style="color:#75715e"></span>~/bin/gutenberg_ipsum/gutenberg_ipsum.pl princessofmars.txt
</code></pre></div><p>Make as many snippets as you want—one for each of your corpus files. All you need to change in each script is the argument for the file. Replace <code>princessofmars.txt</code> with the name of whatever corpus you want that snippet to use.</p>
<p>In the end you can create a good collection of different automatic random filler text from any corpus you want.</p>
<p><img src="te-snippets-small.png" alt="Gutenberg ipsum snippets"></p>
<p>If TextExpander 4 allowed its new Fill Ins to work as variables in a shell script, this whole collection could be a lot simpler—it could just be one dropdown menu of all the corpus files in the <code>words</code> folder. But since that&rsquo;s not possible, this will have to do.</p>
<p>All the credit to this collection of snippets goes to <a href="http://www.leancrew.com/">Dr. Drang</a> and <a href="http://brettterpstra.com/">Brett Terpstra</a>. You should read their stuff—really.</p>
%!s(MISSING)]]></content>
        <category term="lorem ipusm" />
        <category term="text" />
        <category term="perl" />
        <category term="sh" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Install R, RStudio, and R Commander in Windows and OS X]]></title>
        <link href="https://www.shagunjhaver.com/blog/2012/04/17/install-r-rstudio-r-commander-windows-osx/" rel="alternate" />
        <published>2012-04-17T00:00:00+00:00</published>
        <updated>2012-04-17T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2012/04/17/install-r-rstudio-r-commander-windows-osx/</id>
        <summary type="html"><![CDATA[R, RStudio, and R Commander are all powerful open source statistical tools, but they can be a little tricky to install. These instructions make it easy to get everything working right.]]></summary>
        <content type="html"><![CDATA[<p><a href="http://www.r-project.org/">R</a> is an incredibly powerful open source program for statistics and graphics. It can run on pretty much any computer and has a very active and friendly support community online. Graphics created by R are extremely extensible and are used in high level publications like the New York Times (as explained by <a href="http://book.flowingdata.com/">this former NYT infographic designer</a>).</p>
<p><a href="http://rstudio.org/">RStudio</a> is an integrated development environment (IDE) for R. It&rsquo;s basically a nice front-end for R, giving you a console, a scripting window, a graphics window, and an R workspace, among other options.</p>
<p><a href="http://socserv.mcmaster.ca/jfox/Misc/Rcmdr/">R Commander</a> is a basic graphical user interface (GUI) for R. It provides a series of menus that allow you to run lots of statistic tests and create graphics without typing a line of code. More advanced features of R aren&rsquo;t accessible through R Commander, but you can use it for the majority of your statistics. <em>(Lots of people (like me) use R Commander as a crutch for a few months before they get the hang of the R language. As intimidating as it might be to constantly type stuff at the console, it really is a lot faster.)</em></p>
<p>However, as is the case with lots of free and open source software, it can be a little tricky to install all of these different programs and get them to work nicely together. The simple instructions below explain how to get everything working right.</p>
<h3 id="install-r-rstudio-and-r-commander-in-windows">Install R, RStudio, and R Commander in Windows</h3>
<ol>
<li>Download R from <a href="http://cran.us.r-project.org/">http://cran.us.r-project.org/</a> (click on &ldquo;Download R for Windows&rdquo; &gt; &ldquo;base&rdquo; &gt; &ldquo;Download R 2.x.x for Windows&rdquo;)</li>
<li>Install R. Leave all default settings in the installation options.</li>
<li>Download RStudio from <a href="http://rstudio.org/download/desktop">http://rstudio.org/download/desktop</a> and install it. Leave all default settings in the installation options.</li>
<li>Open RStudio.</li>
<li>Go to the &ldquo;Packages&rdquo; tab and click on &ldquo;Install Packages&rdquo;. The first time you&rsquo;ll do this you&rsquo;ll be prompted to choose a CRAN mirror. R will download all necessary files from the server you select here. Choose the location closest to you (probably &ldquo;USA CA 1&rdquo; or &ldquo;USA CA 2&rdquo;, which are housed at UC Berkeley and UCLA, respectively).<br>
<img src="install_packages_win.png" alt="Install packages in Windows"></li>
<li>Start typing &ldquo;Rcmdr&rdquo; until you see it appear in a list. Select the first option (or finish typing Rcmdr), ensure that &ldquo;Install dependencies&rdquo; is checked, and click &ldquo;Install&rdquo;.<br>
<img src="install_packages_win_1.png" alt="Install Rcmdr in Windows"></li>
<li>Wait while all the parts of the R Commander package are installed.</li>
<li>If you get permission errors while installing packages, close R Studio and reopen it with administrator privileges.<br>
<img src="run_as_administrator.png" alt="Run as administrator in Windows"></li>
</ol>
<h3 id="install-r-rstudio-and-r-commander-in-mac-os-x">Install R, RStudio, and R Commander in Mac OS X</h3>
<ol>
<li>Download R from <a href="http://cran.us.r-project.org/">http://cran.us.r-project.org/</a> (click on &ldquo;Download R for Mac OS X&rdquo; &gt; &ldquo;R-2.x.x.pkg (latest version)&quot;)</li>
<li>Install R.</li>
<li>Download RStudio from <a href="http://rstudio.org/download/desktop">http://rstudio.org/download/desktop</a>.</li>
<li>Install RStudio by dragging the application icon to your Applications folder.</li>
<li>Download Tcl/Tk from <a href="http://cran.r-project.org/bin/macosx/tools/">http://cran.r-project.org/bin/macosx/tools/</a> (click on <code>tcltk-8.x.x-x11.dmg</code>; OS X needs this to run R Commander.)</li>
<li>Install Tcl/Tk.</li>
<li>Go to your Applications folder and find a folder named Utilities. Verify that you have a program named &ldquo;X11&rdquo; there. If not, go to <a href="http://xquartz.macosforge.org/">http://xquartz.macosforge.org/</a> and download and install the latest version of XQuartz.<br>
<img src="x11_utilities.png" alt="X11 in Applications/Utilities"></li>
<li>Open RStudio.</li>
<li>Go to the &ldquo;Packages&rdquo; tab and click on &ldquo;Install Packages&rdquo;. The first time you&rsquo;ll do this you&rsquo;ll be prompted to choose a CRAN mirror. R will download all necessary files from the server you select here. Choose the location closest to you (probably &ldquo;USA CA 1&rdquo; or &ldquo;USA CA 2&rdquo;, which are housed at UC Berkeley and UCLA, respectively).<br>
<img src="install_packages_mac.png" alt="Install packages in OS X"></li>
<li>Start typing &ldquo;Rcmdr&rdquo; until you see it appear in a list. Select the first option (or finish typing Rcmdr), ensure that &ldquo;Install dependencies&rdquo; is checked, and click &ldquo;Install&rdquo;.<br>
<img src="install_packages_mac_1.png" alt="Install Rcmdr in OS X"></li>
<li>Wait while all the parts of the R Commander package are installed.</li>
</ol>
<h3 id="open-r-commander-in-windows-and-os-x">Open R Commander in Windows and OS X</h3>
<p>Once you&rsquo;ve installed R Commander, you won&rsquo;t have to go through all those steps again! Running R Commander from this point on is simple—follow the instructions below.</p>
<p>If you decide to stop using R Commander and just stick with R, all you ever need to do is open RStudio—even simpler!</p>
<ol>
<li>Open R Studio</li>
<li>In the console, type <code>windows()</code> if using Windows, <code>quartz()</code> if using Mac OS X. (This tells R Commander to output all graphs to a new window). If you don&rsquo;t do this, R Commander graphs will be output to the graphics window in RStudio.</li>
<li>Go to the &ldquo;Packages&rdquo; tab, scroll down to &ldquo;Rcmdr,&rdquo; and check the box to load the plugin. (Alternatively, type <code>library(Rcmdr)</code> at the console.)</li>
</ol>
%!s(MISSING)]]></content>
        <category term="statistics" />
        <category term="r" />
    </entry>
    <entry>
        <title type="html"><![CDATA[World-Ready Composer not Perfect]]></title>
        <link href="https://www.shagunjhaver.com/blog/2011/06/25/world-ready-composer-not-perfect/" rel="alternate" />
        <published>2011-06-25T00:00:00+00:00</published>
        <updated>2011-06-25T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2011/06/25/world-ready-composer-not-perfect/</id>
        <summary type="html"><![CDATA[Even though InDesign’s new World-Ready Composer is awesome, it is still buggy and struggles with a few Arabic fonts.]]></summary>
        <content type="html"><![CDATA[<p>Although Adobe has included the world-ready composer in InDesign CS4 and 5, <a href="http://www.andrewheiss.com/blog/2011/06/24/using-arabic-in-indesign-cs5-without-indesign-me/">like I said in my previous post</a>, it&rsquo;s not documented or supported at all. It&rsquo;s still buggy and unfinished, unfortunately.</p>
<p>Here&rsquo;s a little example of how buggy it really is. I typeset the same sentence in Arabic in different fonts I have installed on my computer. As you can see, most of the fonts work flawlessly (yay!), with two exceptions. Traditional Arabic can&rsquo;t display short vowels—they break up the connecting letters—and Geeza Pro is a sad, sad little font.</p>
<p><a href="Arabic%20Samples.pdf">Download PDF of sample</a></p>
<p><img src="Arabic-Samples.png" alt="Arabic typographic samples" title="Arabic typographic samples"></p>
<p>I don&rsquo;t know if this is a problem with the fonts themselves or with the composer. <del>Traditional Arabic was specially designed for Office 2007 to be a high quality Arabic font, and it comes with thousands of extra glyphs for every position possible, so it would seem like it <em>should</em> be able to display correctly.</del> Just kidding. Arabic Typesetting is the special Office 2007 font and it works just fine (it has a nice Naskh-y feel to it). Traditional Arabic has been included with Windows since Windows 2000 and apparently isn&rsquo;t very well made (?). Or maybe the composer is just buggy (?).</p>
<p>Geeza Pro, on the other hand, definitely has a problem with the font itself. One dead forum (formerly at <a href="http://forum.redlers.com/viewtopic.php?f=1&amp;t=2180">http://forum.redlers.com/viewtopic.php?f=1&amp;t=2180</a>) says that the version of Geeza Pro in Snow Leopard is faulty and doesn&rsquo;t connect. Hopefully Lion fixes that…</p>
%!s(MISSING)]]></content>
        <category term="arabic" />
        <category term="graphic design" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Using Arabic in InDesign CS5 without InDesign ME]]></title>
        <link href="https://www.shagunjhaver.com/blog/2011/06/24/using-arabic-in-indesign-cs5-without-indesign-me/" rel="alternate" />
        <published>2011-06-24T00:00:00+00:00</published>
        <updated>2011-06-24T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2011/06/24/using-arabic-in-indesign-cs5-without-indesign-me/</id>
        <summary type="html"><![CDATA[Use InDesign CS5‘s hidden World Ready Composer to typeset text in Arabic and other complex scripts.]]></summary>
        <content type="html"><![CDATA[<p>Nearly four years ago, <a href="/blog/2007/09/17/using-arabic-in-indesign-without-indesign-me/">I posted a workaround for InDesign CS3&rsquo;s lack of support for RTL support.</a> The only way to get proper Arabic or Hebrew text back then was to type backwards—something trivial (and scriptable) for Hebrew, but far more complicated for Arabic, with all its different letter forms that change depending on their position in the word. Rather than <em>type</em> backwards, you had to <em>manually</em> insert glyphs from the glyphs panel backwards. While this was extraordinarily tedious, it worked for times when you only needed to deal with a few words—maybe a short sentence.</p>
<p>For my job I&rsquo;ve been using InDesign CS3 ME with Tasmeem and have fallen in love with the super advanced typographic tools that it provides. But, I&rsquo;m not planning on keeping that job forever (I&rsquo;m graduating in less than a year!), and I don&rsquo;t want to go back to hunting for glyphs. I&rsquo;ve been spoiled :)</p>
<p>I heard rumors that CS4 and CS5 had a mysterious RTL editing mode that was only accessible through scripting, but I was in Egypt for both launches and wasn&rsquo;t able to get the educational upgrade. I finally upgraded to CS5 a couple days ago and immediately got to work figuring out this rumored Arabic mode.</p>
<p>Starting with CS4, Adobe began including a new &ldquo;world ready&rdquo; paragraph composer, which provides many of the same typographic controls offered by Winsoft&rsquo;s Middle Eastern editions. However, CS4 shipped before Adobe could polish off any of the controls. The internet world hoped that there&rsquo;d be some new world ready panel for CS5, but to no avail. The world ready composer was included (and improved?) with CS5, but is still mostly inaccessible.</p>
<p>Unless you do a cool trick :)</p>
<p>You can programmatically create paragraph styles that use the world ready composer, allowing you to typeset Arabic, Hebrew, Thai, Devangari-like languages, and a ton of other more complex scripts. Here&rsquo;s how you can enable native Arabic typography inside CS5 (courtesy of <a href="http://www.thomasphinney.com/2009/01/adobe-world-ready-composer/">Thomas Phinney</a>):</p>
<ol>
<li><a href="http://www.thomasphinney.com/wp-content/uploads/2009/01/r2l_scripts_for_id_cs4.zip">Download these scripts</a> by Thomas Phinney and Peter Kahrel and <a href="http://www.danrodney.com/scripts/directions-installingscripts.html">install them</a> in your script folder.</li>
<li>Run the &ldquo;r2l Paragraph Style Arabic&rdquo; script from the Scripts panel. A new paragraph style named &ldquo;RTL Arabic&rdquo; should appear in your Paragraph Styles panel.</li>
<li>Check the style settings and verify that the &ldquo;Adobe World-Ready Paragraph Composer&rdquo; is being used for the style.<br>
<img src="world-ready.png" alt="World-Ready Composer" title="World-Ready Composer"></li>
<li>Start using Arabic text!</li>
<li><em>Bonus:</em> To use the composer in other documents you can either run the script again or just copy the style. The composer is activated by the style. Theoretically you could save the Arabic style to a new template and never have to run the script again.</li>
</ol>
<p>This is definitely <em>not</em> a full replacement for Winsoft&rsquo;s CS5 InDesign ME, since it doesn&rsquo;t give you any graphical control over kashidas, digits, diacritic positions, or any of the other more detailed options available in the world ready composer. You can edit the script, change the options around, and create a new style, but you&rsquo;d need to know the API for the world ready composer. Phinney&rsquo;s script, for example, sets the default digits for the style as Arabic digits with <code>ps.digitsType = DigitsTypeOptions.arabicDigits;</code>. If you knew the option for Farsi-style numbers, you could edit the script. Unfortunately the whole composer is completely undocumented and unsupported. <a href="http://indesigning.net/right-to-left-arabic-hebrew-hindi-in-indesign-cs4-none-me">This site</a> includes many of the hidden options—you&rsquo;d just need to guess about how to use them in the script. Maybe Adobe will finally make all these options accessible in CS6?</p>
<p>There are a couple options for more graphical control over the hidden settings, but they cost money. <a href="https://sites.google.com/site/adoberighttoleft/Home">idRTL</a> created a plugin that provides a useful panel to edit all the hidden Middle Eastern settings. It&rsquo;s $50 and says it&rsquo;s made for CS4, although I&rsquo;m assuming it&rsquo;ll work with CS5 too. <a href="http://in-tools.com/products/plugins/world-tools/">Word Tools</a> creates a similar panel, costs $100, and supports CS5.</p>
<p>So, even though activating the world ready composer can be a little tricky, it&rsquo;s a fantastic little trick that lets you use real RTL text without tedious backward typing.</p>
%!s(MISSING)]]></content>
        <category term="arabic" />
        <category term="graphic design" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Fake CloudApp with Dropbox and Quicksilver]]></title>
        <link href="https://www.shagunjhaver.com/blog/2011/06/19/fake-cloud-app-dropbox/" rel="alternate" />
        <published>2011-06-19T00:00:00+00:00</published>
        <updated>2011-06-19T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2011/06/19/fake-cloud-app-dropbox/</id>
        <summary type="html"><![CDATA[Move files to your Dropbox public folder and generate a shareable URL instantly, <em>à la</em> CloudApp, with a combination of a few services and Quicksilver triggers.]]></summary>
        <content type="html"><![CDATA[<p>Recently a friend showed me <a href="http://getcloudapp.com/">CloudApp</a>, a fantastic little app that sits in your menu bar and lets you share files almost instantly. With a quick keystroke you upload a file to their servers and get a public URL to share with anyone. Neato.</p>
<p>However, with a basic (free) CloudApp account you are limited in the size and number of uploads you can make each month. I&rsquo;m also really picky about what goes in my menu bar, and I didn&rsquo;t really like having an extra app running just for when I need to upload something.</p>
<p>My current workflow for uploading and sending files is to drag a file into my Dropbox public folder, navigate to it, right click it, and copy its public Dropbox URL. I like this because Dropbox is already running on my computer (no need for extra menu bar apps) and because I feel like I have more control over the fate of my file than with CloudApp (regardless of <a href="http://daringfireball.net/linked/2011/05/17/dropbox-encryption">Dropbox&rsquo;s recent legal issues</a>). Plus there aren&rsquo;t any arbitrary upload or storage space restrictions.</p>
<p>The one downside to this workflow is that it&rsquo;s long and convoluted and lacks the magic instantaneousness of CloudApp. So I decided to make my own magical  CloudApp-esque instant upload + public URL system with programs I&rsquo;m already running: Dropbox and Quicksilver.</p>
<p>Here&rsquo;s how to do it:</p>
<ol>
<li>
<p>Download the <a href="http://dropboxwiki.com/Dropbox_Service">&ldquo;Post to Dropbox&rdquo;</a> OS X service.</p>
</li>
<li>
<p>Unzip and open the Copy to Dropbox service in Automator.</p>
</li>
<li>
<p><em>Optional:</em> If you don&rsquo;t want to clutter your public folder with random files, you can change the &ldquo;Copy Finder Items&rdquo; action in Automator to point to a subfolder in your public folder. Mine is set to &ldquo;~/Dropbox/Public/Uploaded,&rdquo; so I can periodically go and clear out any out of date uploads, like one-off screenshots and the like.</p>
</li>
<li>
<p>In the Run Shell Script section, replace <code>&lt;DROPBOX-ID&gt;</code> with your Dropbox user ID (the one from your public URLs, not your e-mail address).</p>
</li>
<li>
<p>If you want to use the Move to Dropbox service as well (I use both), open it and type your user ID there as well.</p>
</li>
<li>
<p>Move both services to ~/Library/Services. You can now access them from the system wide services menu. Right click on any file, go to &ldquo;Services&rdquo; and easily move or copy any file to your public Dropbox folder <em>and</em> get the URL for that file placed automatically in your clipboard.</p>
</li>
</ol>
<p>While these services eliminate most of the clicking and dragging I was doing before, they still require three clicks (select the file, right click to navigate to the services menu, click on the service). Luckily Quicksilver simplifies the process even more. You could probably use other Quicksilver-esque programs like Alfred and the like to get the universal service keyboard shortcuts.</p>
<ol>
<li>
<p>Enable the &ldquo;Services Menu Module&rdquo; in Quicksliver&rsquo;s plug-ins sheet in its preferences (⌘ + ,).<br>
<img src="qs-plugins_500.png" alt="Quicksilver plugin menu" title="Quicksilver plugin menu"></p>
</li>
<li>
<p>Go to Preferences and make sure &ldquo;Enable advanced features&rdquo; is checked.</p>
</li>
<li>
<p>Go to Catalog &gt; Quicksilver and check &ldquo;Proxy Objects&rdquo;</p>
</li>
<li>
<p>Create a new trigger to pipe the current selection through each of the services. I use ⌃⌥⌘U for Copy to Dropbox and ⌃⌥⇧⌘U (essentially mashing down the whole corner of my keyboard :) ) for Move to Dropbox.
<img src="trigger_500.png" alt="Setting a trigger in Quicksilver" title="Setting a trigger in Quicksilver"></p>
</li>
<li>
<p>Select a file, press your new keyboard shortcut, and voila—the file is instantly copied to Dropbox and you have a URL ready to paste somewhere. Pure magic :)</p>
</li>
</ol>
<p>One of the only differences between this and CloudApp is that there&rsquo;s no response after you use the service. There&rsquo;s nothing to let you know that it actually happened. However, you can easily add a sound or Growl notification to the Automator service if you want some sort of response.</p>
<p>So there it is. Magic CloudApp functionality using Dropbox and Quicksilver!</p>
%!s(MISSING)]]></content>
        <category term="dropbox" />
        <category term="quicksilver" />
        <category term="cloudapp" />
        <category term="automator" />
    </entry>
    <entry>
        <title type="html"><![CDATA[In Tahrir Square]]></title>
        <link href="https://www.shagunjhaver.com/blog/2011/02/03/in-tahrir-square/" rel="alternate" />
        <published>2011-02-03T00:00:00+00:00</published>
        <updated>2011-02-03T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2011/02/03/in-tahrir-square/</id>
        <summary type="html"><![CDATA[A poem in honor of the #Jan25 Tahrir protestors]]></summary>
        <content type="html"><![CDATA[<p>My awesome wife <a href="http://www.heissatopia.com/2011/02/in-tahrir-square.html">just wrote up a fantastic poem</a> dedicated to the #Jan25 Tahrir protestors. This past week has been riveting and emotional for us, even though we live far from Egypt now. Cairo was our home for two years—we drank from the Nile <span class="rtl">(شربنا من النيل)</span> and feel part of it. This horrific carnage is absolutely sickening.</p>
<p>Ta7ya Masr!</p>
<hr>
<h3 id="in-tahrir-square">In Tahrir Square</h3>
<p>In Tahrir Square the people fight<br>
For freedom, truth, and human rights<br>
We all should have; While here I sit<br>
And watch the robins peck and flit<br>
Not knowing what went on last night.</p>
<p>How many dead? We&rsquo;ll never know.<br>
The guns, the knives, the bombs aglow<br>
Seek and will seek to thwart hearts knit<br>
In Tahrir square.</p>
<p>Take up their quarrel with the foe:<br>
To you from failing hands they fling<br>
The torch; be yours to hold it high.<br>
If ye break faith with those who die<br>
They shall not sleep, when silence rings<br>
In Tahrir Square.</p>
<p>Nancy Heiss<br>
February 3, 2011</p>
<p><em>(With thanks to <a href="http://en.wikipedia.org/wiki/In_Flanders_Fields">John McCrae</a>)</em></p>
%!s(MISSING)]]></content>
        <category term="jan25" />
        <category term="egypt" />
        <category term="nancy" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Mona Prince on #jan25 Egyptian Protests ]]></title>
        <link href="https://www.shagunjhaver.com/blog/2011/01/27/mona-prince-on-egyptian-revolution/" rel="alternate" />
        <published>2011-01-27T00:00:00+00:00</published>
        <updated>2011-01-27T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2011/01/27/mona-prince-on-egyptian-revolution/</id>
        <summary type="html"><![CDATA[Mona Prince's personal account of the #jan25 Egyptian protests]]></summary>
        <content type="html"><![CDATA[<p>Egyptian novelist and professor Mona Prince just sent me this personal report on her experience with the <a href="http://en.wikipedia.org/wiki/2011_Egyptian_protests">#jan25 protests</a>. I&rsquo;m reposting it here in its entirety.</p>
<hr>
<p><strong>a personal testimony on police brutality during protests: jan 26 2011 down town cairo&mdash;mona prince</strong><br>
round 6.30 pm down town cairo, i joined the demonstration on qasr el nil street along with some friends and other people whom i don&rsquo;t know. the protesters were marching  peacefully and politely and decently from one street to another evading the security forces who were some how at a loss at how to stop us, especially when we took to shawarbi street, we were at the back, and the police officers behind and front talking in their walki talki, we could hear them saying they don&rsquo;t know how to besiege us. we kept on moving and more people were joining us from the streets and shops, young men and women. we were chanting the requests of egyptian people &quot; leave &quot; and &quot; egyptian people want the regime out &ldquo;. we didn&rsquo;t attack any body, or destroy any shops or cars&hellip; we were moving in the middle of streets without blocking the traffic, just slowing it down until we reached sherif street and we were heading towards 26 july street, then the security forces appeared from behind and front. we started running, and  security police in civilian clothes started grabbing randomly many young men and women. i saw them grab and beat a young innocent man, pushed him to the ground and kept kicking. i protested against the beating up, and kept screaming at them to stop acting like animals, 4 or 5 huge giant men grabbed me from my hair and said &quot; well join him you bitch &quot; and slapped me on the face , beat me up, kicked me, and cornered me next to the young man and kept hitting me on my head, arm, shoulder, back , stepping on my head with their shoes until i bled from my mouth and could not speak any more on the ground. they kept their shoes on my head, kicked me every few seconds,calling me the dirtiest names ever the they dragged me all along the street to 26 july and threw me in one of those microbuses without number plates. they have also dragged the other young man who completely fainted and others too and threw us all in the microbus. and while pushing me inside they were trying to pull off my clothes and sexually harassed me,one grabbed my breasts , another held me my waste, and another grabbed my bottom. i tried to call friends discreetly, but they saw me, so they pull me out of the car and said &quot; get off &quot; but 3 of them were blocking the door, and they grabbed the mobile from me, then threw me to the asphalt road.
despite the pain, i will go on protesting
mona prince
egyptian writer and university professor
cairo january 27 2011</p>
<div class="rtl">
**شهادة عن وحشية بلطجية الامن في المظاهرات- وسط القاهرة ٢٦ يناير ٢٠١١ مني برنس
**
في حوالي السادسة و نصف مساء يوم الاربعاء ٢٦ يناير ٢٠١١، انضممت انا و أصدقاء و آخرين لا اعرفهم الى مسيرة سلمية احتجاجية في منطقة وسط المدينة، في شارع قصر النيل. و كان المتظاهرون يسيرون بكل ادب من شارع الي اخر في محاولة للهرب و تجنب قوات الامن المركزي الذين بدوا في حيرة و ارتباك حول كيفية محاصرتنا و تفريقنا، خاصة بعدما توجهنا الى شارع الشواربي. كنت انا و المجموعة التي معي في الخلف، و من امامنا و خلفنا ضباط الامن يتكلمون في اجهزتهم اللاسلكية و سمعناهم يقولون ما مفاده انهم لا يعرفون كيف يحاصروننا. استمررنا في السير بشجاعة و دون خوف، و اضم الينا الكثير من الشباب و البنات من الشوارع الجانبية و المحلات، و كنا نردد " ارحل " و " الشعب يريد اسقاط النظام " لم نعتدي على منشآت او سيارات و لم نهاجم احدا. كنا نسير و سط الشوارع دون أن نمنع مرور السيارات و ان كنا أبطأنا سيرها باتجاه شارع ٢٦ يوليو. ثم ظهرت قوات الامن المركزي من الامام و الخلف ر بدأت تجري نحونا بقوة، فجرينا متفرقين محاولين الاحتماء بالمحلات. و فجأة بدأ بلطجية الامن و وزارة الداخلية الذين يرتدون ملابس مدنية في القبض العشوائي علي الشباب و البنات و ضربهم بقوة. رأيتهم يقبضون على شاب كان يسير أمامي و لم يفعل اي شيء سوى الهتاف مثلنا، دفعوه بزخذيتهم و القوا به الي الأرض و انهالوا عليه ضربا و ركلا و لكما حتى اغمي عليه. اعترضت على ما يفعلون و صرخت فيهم الا يتصرفوا مثل الحيوانات و انهم ليسوا رجال و ليسوا بني آدمين، فاندفع نحوي ٤ او ٥ رجال ضخام الحجم و جروني من شعري، ضربوني علي و جهي، أخذوا يضربونني بعنف و يركلونني ثم القوا بي الى الآرض بجانب الشاب الذي فقد وعيه و هم يقولون " طب يللا حصليه يا بنت القحبة ".  فرد اخر " مرة قحبة " و استمروا في ضربي و ركلي بضعة دقائق و يدوسون علي رأسي و جسدي بأحذيتهم حتى سال الدم من فمي و هم يسبونني بأقذر السباب و الصفات، الى ان سكت و لم استطع الكلام. ثم جرجروني و هم ما يزالرن يركلونني و يسبونني الى شارع ٢٦ يوليو ثم القوا في واحد من تلك الميكروباصات التي لا تحمل لوحة ارقام. و فعلوا نفس الشيء مع شباب اخرين و القوا بهم الى داخل نفس السيارة، من بينهم الشاب الذي كنت ادافع عنه و فقد وعيه. و في اثناء محاولتهم حشري داخل السيارة، كانوا يتحرشون بي جنسيا، و يحاولون تعريتي واحد مسكني من صدري، و الحر من وسطي و شخص اخر مسكني من اسفل ظهري ثم دفعوني الى الداخل.  كان هناك نحو ٥ او ٦ و ربما اكثر شباب داخل السيارة. حاولت الاتصال بأصدقاء بشكل هامس و بعيد عن اعين الامن لكنهم رأوومي. سحبوني من داخل الميكروباص و امروني بالنزول و هم يسبونني و في نفس الوقت يسدون باب السيارة  " بتكلمي مين يا بنت ...." و خطفوا مني التلفون المحمول بالقوة ثم شدوني خارج السيارة و القوا بي الي الاسفلت.
<p>رغم الألم سوف استمر في الاحتجاج
منى برنس
كاتبة مصرية و استاذة بالجامعة
القاهرة ٢٧ يناير ٢٠١١</p>
</div>
%!s(MISSING)]]></content>
        <category term="jan25" />
        <category term="egypt" />
    </entry>
    <entry>
        <title type="html"><![CDATA[iOS 4, Multitasking, and Battery Life]]></title>
        <link href="https://www.shagunjhaver.com/blog/2010/09/24/ios4-multitasking-battery-life/" rel="alternate" />
        <published>2010-09-24T00:00:00+00:00</published>
        <updated>2010-09-24T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2010/09/24/ios4-multitasking-battery-life/</id>
        <summary type="html"><![CDATA[The multitasking capabilities of iOS 4 seem to be draining my battery. Help me figure out how to stop it!]]></summary>
        <content type="html"><![CDATA[<p>I recently got a brand new 4G iPod Touch for my initial foray into the amazing world of iOS. I&rsquo;ve been sitting on the sidelines far too long and I&rsquo;m <a href="http://twitter.com/#!/andrewheiss/status/25170167865">so excited</a> to finally have an almost-iPhone.</p>
<p>However, I ran into my first hitch this morning and my Google skills have proven useless to solve it. I&rsquo;ve been using the iPod as an alarm clock for the past few days since its UI is superior to the ancient digital clock in our bedroom :). When I went to bed last night the battery was probably at 80% capacity. <a href="http://www.apple.com/ipodtouch/specs.html">Apple touts</a> that the new iPod has 40 hours of battery life when playing music—quite impressive. I had put the iPod in airplane mode, turning off the WiFi so that I wouldn&rsquo;t get any mail or Facebook notifications. With no internet, no music, and no apps (supposedly) running, the iPod&rsquo;s battery theoretically should have lasted for months—or even years :)</p>
<p>However, I didn&rsquo;t wake up to the iPod&rsquo;s alarm this morning. I woke up to Rachel pulling on my arm and saying &ldquo;Wake up, Dad! I want cereal!&rdquo; 1.5 hours later than when I was planning to wake up.</p>
<p>The iPod&rsquo;s battery had died in less than 7 hours.</p>
<p>I&rsquo;m assuming this is linked to the new multitasking system in iOS 4, where apps that aren&rsquo;t running are put into memory so you can open them where you left off. Sure enough, I had like 25 apps in the multitasking tray, which I quickly cleared out after plugging in the depleted iPod.</p>
<p>So, iOS users out there: what experience have you had with multitasking and battery life? Is there an easy way to &ldquo;officially&rdquo; quit an application rather than send it to the tray? What should I do avoid something like this again?</p>
%!s(MISSING)]]></content>
        <category term="ipod" />
        <category term="ios" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Queen Rania at AUC]]></title>
        <link href="https://www.shagunjhaver.com/blog/2010/02/28/queen-rania-at-auc/" rel="alternate" />
        <published>2010-02-28T00:00:00+00:00</published>
        <updated>2010-02-28T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2010/02/28/queen-rania-at-auc/</id>
        <summary type="html"><![CDATA[On February 28, 2010 at the American University in Cairo, Jordan's Queen Rania gave a speech on the importance of civic engagement in the Arab world. While her idea that regular citizens need to be more involved in government, the hardhanded policies of Arab governments make it almost impossible for that to happen.]]></summary>
        <content type="html"><![CDATA[<p>This morning AUC&rsquo;s <a href="https://business.aucegypt.edu/research/centers/gerhart" title="Gerhart Center">John D. Gerhart Center for Civic Engagement</a> hosted a lecture by <a href="http://www.queenrania.jo/">Queen Rania al-Abdullah</a> of Jordan. Queen Rania is famous for being intensely involved in the public sphere and, according to the venerable <a href="http://en.wikipedia.org/wiki/Queen_Rania_of_Jordan">Wikipedia</a>, is considered one of the <a href="http://www.forbes.com/lists/2009/11/power-women-09_Queen-Rania_VZPS.html">world&rsquo;s most powerful women</a>. She&rsquo;s involved with a ton of foundations and NGOs that cover a wide range of goals, from advocating for improvement in girls' education and employment, promoting dialogue between the US and the Arab world, and calling for what became the buzzword of today&rsquo;s lecture: civic engagement. She uses technology to promote her agenda of social improvement and is active on <a href="http://www.youtube.com/user/QueenRania">YouTube</a>, <a href="http://twitter.com/QueenRania">Twitter</a>, and <a href="http://www.facebook.com/QueenRania">Facebook</a>. Basically a beautiful, famous, powerful world leader.</p>
<p>Queen Rania focused primarily on the need for native grassroots movements in the Arab world, stating that civic engagement is an essential element of societal reform—changes so desperately needed in this region, where poverty and corruption are rampant. She stated that it is the responsibility of all citizens to take an interest in developing and improving their own country. Calling on Arabs to &ldquo;look up&rdquo; and think of others, she cited the example of one of AUC&rsquo;s homegrown NGOs, <a href="http://www.ayb-sd.org/#history">Alashanek Ya Balady</a>, which is heavily involved in promoting sustainable development in Egypt&rsquo;s poorest neighborhoods. The efforts of AYB and dozens of other organizations constitute a laudable homegrown effort to reform Egyptian society, and they have had lots of success so far.</p>
<p>The queen then went on to decry the current state of civic laziness in the Arab world, saying that many Arabs confuse the responsibilities of &ldquo;citizenship&rdquo; with &ldquo;sitizenship,&rdquo; opting to sit still, sit back, and complain rather than take their own initiative to change society. This is not because Arabs are disconnected, emotionless people—far from it. &ldquo;We&rsquo;re all passionate about food, family, football, and <a href="http://en.wikipedia.org/wiki/Palestinian_territories">Filistin</a>,&rdquo; she said, but those passions need to be refocused on bringing about change instead of complacently complaining about the backwardness of Arab governments and societies.</p>
<p>She developed this theme by responding to a series of preselected questions that followed her main motivational speech, declaring that universities and academia are responsible for remaining engaged with society and not remain isolated in academia. Too often the educated class remains cynically aloof from the rest of the world and fails to contribute real change or instill the culture of civic engagement in their pupils. She also noted the role of Islam in developing this culture of engagement, saying that Islam inherently advocates civic reform and grassroots movements. She called on the audience to &ldquo;recapture those compassionate values of Islam&rdquo; that have been hijacked by Western media and use the power of faith to help improve society.</p>
<p>Essentially, she concluded, if we want to see any reform and improvement in the region, the onus is on citizens. Change in the Middle East cannot come from governments, since they are inherently inefficient. Real change can only come about with a change in attitude and an increase in engagement. Regular citizens are the driving factor for this change.</p>
<p>In the end it was a pretty motivating and inspiring speech, and I agree with most of what she said. Real, lasting change in the Middle East will need to come from some type of bottom-up popular movement, especially when the reforms so desperately needed reduce the power of the ruling class. However, repressive governments throughout the Arab world (including Rania’s Jordan) severely limit what progressive movements can do, and Middle Eastern dictatorships last for decades.</p>
<p>For example, Egypt’s current president, <a href="http://en.wikipedia.org/wiki/Hosni_Mubarak">Hosni Mubarak</a>, has been in power for almost 30 years. He ran the country uncontestedly until 2005, when, after pressure from George W. Bush, Mubarak amended the constitution to allow candidates from parties other than the ruling National Democratic Party (NDP) to run in presidential elections. The first “free and fair” elections were held that year. Despite a somewhat large grassroots political opposition movement, <a href="http://news.bbc.co.uk/2/hi/middle_east/4709011.stm">Kifaya</a>, Mubarak won handily and his opponent, <a href="http://en.wikipedia.org/wiki/Ayman_Nour">Ayman Nour</a>, was arrested and sentenced to prison for five years. Today Kifaya, a native grassroots movement, is detoothed and powerless. Good thing civic engagement worked…</p>
<p>The next Egyptian presidential elections are slated for 2011, but since Mubarak is getting on in years (he’s 81!), he’s probably not going to run. Instead, it seems that his son, Gamal Mubarak, will inherit his father’s place. Sure, he’ll go through the farce of the election process, but the NDP politicos and thugs will pretty much guarantee his victory.</p>
<p>Understandably, there is a growing anti-Gamal movement in Egypt, and it’s even homegrown and grassrooty. It got a huge boost last week when <a href="http://en.wikipedia.org/wiki/Mohamed_ElBaradei">Mohamed ElBaradei</a>, former head of the IAEA and winner of a Nobel Prize, returned to Cairo after a decades-long pseudo-exile. He has announced that he would consider running for president in 2011 if circumstances allowed for it. He already has a large base of support and even an official-ish <a href="http://www.elbaradei2011.com/">campaign website</a>. <a href="http://www.npr.org/templates/story/story.php?storyId=124087093&amp;ft=1&amp;f=1009">American media</a> is picking up on him, too. He has a lot of international clout and could present a real threat to the Mubarak dynasty. He might have the potential of becoming the Egyptian Obama—“Yes we can!”</p>
<p>But (and this is a pretty big but…), he can’t even legally run—he’s not constitutionally permitted to run for president. For him to become president, Mubarak would first have to amend the constitution to open the field for more opposition parities. Then ElBaradei would actually have to win in elections run by the NDP. Yeah. Good luck there.</p>
<p>While the possibility of an ElBaradei run <a href="http://baheyya.blogspot.com/2010/02/wildcard_25.html">has Mubarak somewhat scared</a>, the cards are really stacked against him. This growing popular movement faces the impossible task of forcing a constitutional amendment. It’s a native movement, just like Queen Rania wants, but it is severely limited. Egyptians remain <a href="http://egyptianchronicles.blogspot.com/2010/02/elbaradei-let-keep-him-hope.html">hopeful</a>, but sadly, Gamal will most likely take over in 2011.</p>
<p>While Jordan, as a monarchy, doesn’t face these issues of presidential elections, it has its own slew of problems with citizenship. Although Rania herself is a Palestinian, the Jordanian government <a href="http://www.hrw.org/en/news/2010/02/01/jordan-stop-withdrawing-nationality-palestinian-origin-citizens">regularly withdraws Jordanian nationality and rights from Palestinian refugees</a>. How can native, grassroots Jordanian organizations reform when the government makes them stateless?</p>
<p>In her speech Rania exhorted AUCians: “Don’t wait for governments to change and reform. <em>You</em> must be the change you want to see.” Um. She’s <em>in</em> the Jordanian government. She’s the queen! She surely has some influence on the Jordanian political scene. Can’t she help the <em>government</em> change so that these popular groups can actually do something? Arab governments tolerate, even embrace, NGOs like AYB or the queen’s water projects in Jordan—they love this type of civic engagement. But heaven forbid these civically engaged movements threaten their despotic power, though.</p>
<p>Can real governmental and societal change happen in the Middle East solely through “civic engagement.” No way. Arab governments must make changes if any popular movements want to make substantial change.</p>
<p>So, while Queen Rania’s speech <em>was</em> inspiring and motivational on the surface, it was full of <em>kalaam fadi</em>—empty words.</p>
%!s(MISSING)]]></content>
        <category term="egypt" />
        <category term="jordan" />
        <category term="politics" />
        <category term="civic engagement" />
        <category term="queen rania" />
    </entry>
    <entry>
        <title type="html"><![CDATA[flashbakectl released]]></title>
        <link href="https://www.shagunjhaver.com/blog/2009/09/23/flashbakectl-released/" rel="alternate" />
        <published>2009-09-23T00:00:00+00:00</published>
        <updated>2009-09-23T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2009/09/23/flashbakectl-released/</id>
        <summary type="html"><![CDATA[flashbakectl is a handy little script that starts and stops Flashbake by loading and unloading plist files.]]></summary>
        <content type="html"><![CDATA[<p>Adding to my apparent <a href="http://www.andrewheiss.com/blog/2009/08/18/itunes-plugin-for-flashbake/" title="iTunes plugin for Flashbake  –   AndrewHeiss.com">series of Flashbake addons</a>, I&rsquo;ve just released <a href="http://github.com/andrewheiss/flashbakectl" title="andrewheiss's flashbakectl at master - GitHub"><code>flashbakectl</code></a>.</p>
<p>Normally to run <a href="https://github.com/cmdln/flashbake" title="Home - flashbake - GitHub">Flashbake</a> consistently you need to set up a cron job. While OS X is built on Unix and has cron, Apple recommends using <code>launchd</code> and property list (plist) files to run system agents and daemons. <code>flashbakectl</code> is a handy little script that loads and unloads a plist for you.</p>
<p>Before working on your project, run <code>flashbakectl -l</code> to load the plist and start the daemon, which will commit your unsaved changes every 15 minutes (or whatever you set it to). When you&rsquo;re done for the day, run <code>flashbakectl -u</code> to stop the daemon, saving your computer from unnecessarily running Flashbake <em>ad infinitum</em>.</p>
<p><code>flashbakectl</code> only works on Mac OS X. <a href="http://github.com/andrewheiss/flashbakectl" title="andrewheiss's flashbakectl at master - GitHub">You can get it at GitHub</a>. Enjoy!</p>
%!s(MISSING)]]></content>
        <category term="flashbake" />
        <category term="git" />
        <category term="writing" />
    </entry>
    <entry>
        <title type="html"><![CDATA[iTunes plugin for Flashbake]]></title>
        <link href="https://www.shagunjhaver.com/blog/2009/08/18/itunes-plugin-for-flashbake/" rel="alternate" />
        <published>2009-08-18T00:00:00+00:00</published>
        <updated>2009-08-18T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2009/08/18/itunes-plugin-for-flashbake/</id>
        <summary type="html"><![CDATA[Flashbake-iTunes is a plugin for Flashbake that allows you to include information for the current track in the periodic git commit message.]]></summary>
        <content type="html"><![CDATA[<p><a href="https://github.com/cmdln/flashbake" title="Home - flashbake - GitHub">Flashbake</a> is a fantastic script <a href="http://lifehacker.com/5232049/flashbake-automates-version-control-for-nerdy-writers" title="Flashbake Automates Version Control for (Nerdy) Writers - Downloads - Lifehacker">for nerdy writers</a> (like me) that periodically commits changes to a Git repository and can optionally append various metadata to the commit message, allowing you to <a href="http://www.boingboing.net/2009/02/13/flashbake-free-versi.html" title="Flashbake: Free version-control for writers using git - Boing Boing">annotate the entire creative process</a>.</p>
<p>Flashbake includes several plugins for adding recent tweets, weather, the current time zone, and other random information. There&rsquo;s even a plugin for the Banshee music player for Linux. There&rsquo;s nothing for iTunes, however, which is unfortunate since I&rsquo;m always listening to something when I write or code.</p>
<p>So I hacked together a little plugin for Flashbake that uses AppleScript to get the current track information from iTunes and add it to the commit message. It&rsquo;s admittedly a &ldquo;frankenscript&rdquo; and only works on Mac OS X (since it relies on AppleScript), but it works great.</p>
<p><a href="http://github.com/andrewheiss/Flashbake-iTunes/" title="andrewheiss's Flashbake-iTunes at master - GitHub">You can get it at GitHub</a>. Enjoy!</p>
%!s(MISSING)]]></content>
        <category term="flashbake" />
        <category term="git" />
        <category term="writing" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Using Google Voice and Gizmo Project Together]]></title>
        <link href="https://www.shagunjhaver.com/blog/2009/08/01/using-google-voice-and-gizmo-project-together-internationally/" rel="alternate" />
        <published>2009-08-01T00:00:00+00:00</published>
        <updated>2009-08-01T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2009/08/01/using-google-voice-and-gizmo-project-together-internationally/</id>
        <summary type="html"><![CDATA[Description of how to make Google Voice and the Gizmo Project work together with an ATA so that you get a free phone number and almost free phone calls.]]></summary>
        <content type="html"><![CDATA[<div class="alert alert-info">See update below <a href="#update">(skip to update)</a></div>
<p><a href="http://www.google.com/voice" title="Google Voice">Google Voice</a>, the Google-ized incarnation of GrandCentral, is a fantastic service that aims to become your virtual phone switchboard. It gives you a free phone number that can receive regular phone calls and route them to any other actual phones you have connected to your account. Powerful stuff.</p>
<p>Unfortunately, though, its forwarding abilities are limited to US phones. Using some VoIP magic, though, you can create a semblance of international forwarding and get free (or nearly free) phone calls to the US while abroad. If you&rsquo;re not in a foreign country, you can harness the same VoIP magic to get a nearly free phone service.</p>
<h3 id="the-gizmo-project---background">The Gizmo Project&mdash;background</h3>
<p>Gizmo (formerly <a href="http://gizmo5.com/pc/">http://gizmo5.com/pc/</a>) is normally a <a href="http://en.wikipedia.org/wiki/Voip" title="Voice over Internet Protocol - Wikipedia, the free encyclopedia">VoIP</a> provider that lets you make free (or super cheap&mdash;something like $0.019 a minute) phone calls. When you sign up for an account you get a special phone number in the 747 area code as your VoIP/Gizmo username. While any phone on the Gizmo network can call your 747 number for free, regular phones can&rsquo;t connect to it.</p>
<p>Gizmo offers a Call In service that lets you buy a phone number in most US area codes (or one of dozens of countries), which then lets you receive phone calls from standard phones. Call In numbers start at $35 a year (or $12 a year for three months), but prices can be higher depending on demand.</p>
<p>Gizmo touts itself primarily as software&mdash;it provides a &ldquo;soft phone&rdquo; program that you run on your computer. As long as the program is open you can make and receive phone calls (much like an IM program or Skype) using a microphone and your computer&rsquo;s speakers or headphones.</p>
<h3 id="gizmo-without-a-computer">Gizmo without a computer</h3>
<p>It&rsquo;s impractical to keep your computer on all the time and it can be awkward to use your computer as a phone. You can get around this limitation by buying an <a href="http://en.wikipedia.org/wiki/Analog_telephony_adapter" title="Analog telephony adapter - Wikipedia, the free encyclopedia">ATA adapter</a>&mdash;a little box that plugs into your network with the sole purpose of running phone services. It&rsquo;s essentially a hardware version of the Gizmo soft phone.</p>
<p>Fancy corporate VoIP phones (<a href="http://en.wikipedia.org/wiki/File:Cisco_7960_IP_Phone.JPG" title="File:Cisco 7960 IP Phone.JPG - Wikipedia, the free encyclopedia">like the ubiquitous Cisco ones</a>) have ATAs built in (kind of. The real ATA is somewhere on the network letting these computer-phones connect to it). You don&rsquo;t need a fancy VoIP phone, though. Standard consumer ATAs let you plug regular phones directly into the adapter.</p>
<p>After configuring the ATA with your Gizmo information you can make and receive calls using your Call In number. Rather than pay $40+ a month for regular phone service, you can have a fully featured phone that only costs $35 a year plus &lt;$0.02 a minute.</p>
<h3 id="before-google-voice">Before Google Voice</h3>
<p>For the past three years we&rsquo;ve been using Gizmo as our full-time phone. We bought a <a href="https://www.voipsupply.com/linksys-pap2t-na">Linksys/Sipura ATA</a> (our model, the SPA1000 is no longer manufactured), got a $10 phone from Target, and bought a Utah county 801 Call In number. The phone worked perfectly. I could plug the ATA in to any internet connection and get cheap/free phone service.</p>
<p>Our system even works (mostly) in Egypt. I have two phones on my desk: the $10 Target phone plugged into the ATA (which is plugged into the router) and a 20 EGP neon pink phone (plugged into our Egyptian phone line). Family, friends, and unsuspecting telemarketers can reach us at our Utah number and pay only what it costs them to call an 801 number.</p>
<p><img src="current_phone_set_up.jpg" alt="Current phone set up"><br>
<em>Our current phone set up</em></p>
<p>The only problem with the system our system in Egypt is a bizarre limitation with Egyptian (or at least Link.net&rsquo;s) internet infrastructure. We don&rsquo;t have any bandwidth issues when someone calls us, but when we call out, the connection drops within the first ten seconds of the call 90% of the time. To get around this, we used some SkypeOut credits&mdash;we&rsquo;d call someone in the States with Skype (using my computer), tell them to call us on our Utah number, hang up, and wait for their call.</p>
<p>This worked when we called actual people, but doesn&rsquo;t work when calling banks, insurance companies, airline companies, or anything else with a phone tree&mdash;phone trees can&rsquo;t call you back. SkypeOut works for those, but it&rsquo;s more expensive than Gizmo.</p>
<p>Google Voice changes all this.</p>
<h3 id="enter-gizmo-voice">Enter Gizmo Voice</h3>
<p>Google and Gizmo have joined up to let you hook Google Voice directly into your Gizmo account. Rather than buy a Gizmo Call In number, I can use my free Google Voice number with my Gizmo Account. After following Gizmo&rsquo;s instructions on connecting the two accounts, now when people call my Google Voice number, the call is routed to the normally inaccessible 747 Gizmo number, which is already associated with my ATA box.</p>
<p>This means I can stop paying $35 a year for my Call In number. The only thing I pay for is the phone use itself. Gizmo just changed their phone rates for users using Google Voice&mdash;apparently all calls under three minutes are free, while longer phone calls follow their normal low rates.</p>
<p>Additionally, now that I can have my Gizmo phone connected to my Google Voice account, my bizarre issue with calling out on Egyptian internet can be solved. In order to call people and have your Google Voice phone number appear on their caller IDs, you need to use Google Voice as an intermediary. You type in the number you want to call on their website and they&rsquo;ll call one of your linked phones. When you pick up, your phone will start dialing the outbound number. Since Google calls my Gizmo phone now to make outbound calls, Link.net considers it an inbound call and it doesn&rsquo;t get cut off.</p>
<p>So now, Gizmo combined with Google Voice gives me free short calls and cheap long calls to the US and a free US number that can replace my Gizmo Call In number. Everything works both in the States and internationally. It&rsquo;s a nearly perfect system.</p>
<h3 id="del-datetime2009-08-03t1854390000still-untesteddel-now-tested"><del datetime="2009-08-03T18:54:39+00:00">Still untested</del> Now tested&hellip;</h3>
<p>In theory, since I have my Gizmo and GV accounts linked, my Google Voice number should show up on the recipient&rsquo;s caller ID when I call out with my US phone, circumventing the need to use the Google Voice web site as the middleman. <del datetime="2009-08-03T18:47:13+00:00">I can&rsquo;t test it, though, since my internet connection won&rsquo;t let me make any outbound calls with my ATA. I&rsquo;ll keep trying over the next week, since I can make like 10–15 second calls 10% of the time.</del></p>
<p>It works! My Google Voice number shows up, just like it should&hellip;</p>
<h4 id="update">Update</h4>
<p><a href="http://lifehacker.com/5400534/google-acquires-gizmo5-voip-service-voip-coming-to-google-voice">Google has acquired Gizmo5</a>, which hopefully means that the link between Gizmo and GV will be more permanent and more official. Awesome.</p>%!s(MISSING)]]></content>
        <category term="ata" />
        <category term="gizmo" />
        <category term="google voice" />
        <category term="phone" />
        <category term="voip" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Alexandria Train Crash]]></title>
        <link href="https://www.shagunjhaver.com/blog/2009/07/30/alexandria-train-crash/" rel="alternate" />
        <published>2009-07-30T00:00:00+00:00</published>
        <updated>2009-07-30T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2009/07/30/alexandria-train-crash/</id>
        <summary type="html"><![CDATA[Pictures and details of a minor train wreck in Alexandria, Egypt on July 30, 2009.]]></summary>
        <content type="html"><![CDATA[<div class="alert alert-info">See update below <a href="#update">(skip to update)</a></div>
<p>After almost a year of being in Egypt, we finally decided to go up to Alexandria today. We took the 9:00 AM train from Cairo and the ride went smooth until we were just outside the final Mahatat Misr station, where we were delayed for over an hour until pulling up to a platform.</p>
<p>Immediately after we got off the train we saw the reason for the delay. A train had rammed into the station, apparently at full speed, derailing the first three cars—the engine, the generator, and the first actual cabin. Part of the station itself was damaged, as was, ironically enough, a parked fire truck.</p>
<p><a href="general_train_wreck_chaos.jpg"><img src="general_train_wreck_chaos.jpg" alt="General train wreck chaos" width="600px" /></a><br>
<em>Click to enlarge</em></p>
<p>The train crashed at around 8 AM and was empty. By 12:30 (when we got there), Egyptian Railway repair crews were lifting the damaged cabin off the tracks.</p>
<p><a href="detail_of_fire_truck_train_station_damage.jpg"><img src="detail_of_fire_truck_train_station_damage.jpg" alt="Detail of fire truck/train station damage" width="600px" /></a></p>
<p><a href="silhouette_of_repairs.jpg"><img src="silhouette_of_repairs.jpg" alt="Silhouette of repairs" width="600px" /></a></p>
<p>By 6:00 PM, when we arrived back at the station to return to Cairo, the repairmen were working on lifting the engine and had apparently already extricated the generator car.</p>
<p><a href="detail_of_damaged_engine.jpg"><img src="detail_of_damaged_engine.jpg" alt="Detail of damaged engine" width="600px" /></a></p>
<p>Since two platforms were out of commission, trains were shuffled around all day, causing major delays. Our train ride back to Cairo took over four hours instead of the usual two.</p>
<p>As far as I know, nobody was killed as the train was empty. I don&rsquo;t know about injuries, since I arrived on the scene several hours after the actual accident.</p>
<p>Needless to say, it was exciting—in a macabre sort of way. I&rsquo;ve read so much about Egyptian train crashes—I got to see the aftermath of one. :)</p>
<p><del datetime="2009-08-01T06:21:25+00:00">I'll post the full set of pictures tomorrow on Flickr.</del></p>
<h4 id="update">Update</h4>
<p>I posted our photos of the accident at <a href="http://www.flickr.com/photos/andrewheiss/sets/72157621785548829/">Flickr</a>. They are licensed under a <a href="http://creativecommons.org/licenses/by/3.0/">Creative Commons Attribution license</a>, so you can use them however you want.</p>
<p>Nancy has also blogged about the accident at our <a href="http://www.heissatopia.com/2009/07/alexandria-train-wreck-30-july-2009.html">family blog</a>.</p>
<p>Additionally, the online Egyptian news site Youm7 has <a href="http://www.youm7.com/News.asp?NewsID=123211">posted an update</a> (in Arabic). According to their report, the accident was caused by a brake failure as the train travelled from the nearby Sidi Gaber train station. It was indeed empty, fortunately, and there were no fatalities. Two of the crew members were injured in addition to a vendor—since there are snack booths at the end of each platform, he must have gotten smashed. There are conflicting statements as to the cause of the accident. Some claim neglect and disrepair; others sabotage. I&rsquo;m leaning towards neglect—those trains are ancient.</p>
%!s(MISSING)]]></content>
        <category term="alexandria" />
        <category term="egypt" />
        <category term="train wreck" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Installing pdftk-php]]></title>
        <link href="https://www.shagunjhaver.com/blog/2009/07/29/installing-pdftk-php/" rel="alternate" />
        <published>2009-07-29T00:00:00+00:00</published>
        <updated>2009-07-29T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2009/07/29/installing-pdftk-php/</id>
        <summary type="html"><![CDATA[A detailed, updated tutorial on how to install, use, and customize pdftk-php.php, which combines the power of pdftk and PHP, allowing you to serve dynamic PDF forms from the web.]]></summary>
        <content type="html"><![CDATA[<p>Upon popular request, I&rsquo;ve decided to update the original tutorial for populating a LiveCycle PDF with PHP to apply to the new release of pdftk-php. The installation instructions should be mostly clear in the readme and in the inline comments in the example included with the script; this post is merely supplemental.</p>
<h2 id="basic-usage">Basic usage</h2>
<h3 id="initial-set-up">Initial set up</h3>
<p><a href="http://github.com/andrewheiss/pdftk-php/tree/master" title="andrewheiss's pdftk-php at master - GitHub">Download the most recent version of pdftk-php from GitHub</a> and <a href="http://www.accesspdf.com/pdftk/" title="pdftk - the pdf toolkit">download and install pdftk</a> on your server.</p>
<p>Unzip the download from GitHub and place the folder on your server. I&rsquo;ve placed mine in a folder called <code>pdftk-php</code>.</p>
<p>Create a MySQL user and database and run the SQL found in <code>/example/database.sql</code> in a MySQL client (like phpMyAdmin) to create the sample database.</p>
<p><img src="example_query_in_phpmyadmin.png" alt="Example Query in phpMyAdmin" title="Example query in phpMyAdmin"></p>
<p>Modify the information in <code>example/_dbConfig.php</code> so that the application can connect to your database.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">$host <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;localhost&#34;</span>;
$username <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;pdftk-user&#34;</span>;
$password <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;supersecure&#34;</span>;
$db_name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;pdftk-php&#34;</span>;
</code></pre></div><p>Browse to the example site (in my case, http://localhost/pdftk-php/example/index.php) and add some entries to populate the database a little.</p>
<h3 id="set-up-the-script">Set up the script</h3>
<p>Open <code>pdftk-php.php</code> and insert the full path to your working pdftk installation at the beginning part of the <code>passthru()</code> command near line 71. Here are some examples for different scenarios on server platforms:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#75715e">// On a typical Unix-based installation
</span><span style="color:#75715e"></span><span style="color:#a6e22e">passthru</span>(<span style="color:#e6db74">&#34;/usr/local/bin/pdftk ...&#34;</span>);

<span style="color:#75715e">// On Windows, with an absolute path
</span><span style="color:#75715e"></span><span style="color:#a6e22e">passthru</span>(<span style="color:#e6db74">&#34;c:\pdftk\pdftk.exe ...&#34;</span>);

<span style="color:#75715e">// On Windows, with a relative path (useful if you place pdftk.exe in the server folder structure)
</span><span style="color:#75715e"></span><span style="color:#a6e22e">passthru</span>(<span style="color:#e6db74">&#34;../pdftk.exe ...&#34;</span>);
</code></pre></div><p>If you&rsquo;re on a Unix-based server and don&rsquo;t know where pdftk is, type one of the following commands, which should result in the absolute path to the program:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">which pdftk
<span style="color:#75715e"># or</span>
whereis pdftk
</code></pre></div><p>In <code>example/download.php</code> verify that the path to the required <code>pdftk-php.php</code> is correct, near line 18. In the example, <code>pdftk-php.php</code> is located a directory below the example directory. If you like to store your included files elsewhere, make sure that you modify the <code>require()</code> path here.</p>
<p><code>pdftk-php.php</code> needs to be able to write to a temporary directory on your server in order to create a temporary FDF file. This directory is specified near line 58, with the <code>tempnam()</code> function.</p>
<p>If you are on a Windows server you should already be able to write to pretty much any directory (I think… I&rsquo;ve never worked with IIS permissions), so you should be good to go. If you are on a Unix-based server you&rsquo;ll need to be more explicit with directory permissions. To make things easier, create a temporary folder on your server and give it write permissions:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">cd pdftk-php
mkdir tmp
chmod <span style="color:#ae81ff">777</span> tmp
</code></pre></div><p>Then set the path in <code>tempnam()</code> to the new temporary folder.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#75715e">// If at the same level as download.php
</span><span style="color:#75715e"></span>$fdf_fn <span style="color:#f92672">=</span> <span style="color:#a6e22e">tempnam</span>(<span style="color:#e6db74">&#34;tmp&#34;</span>, <span style="color:#e6db74">&#34;fdf&#34;</span>);

<span style="color:#75715e">// If one directory behind download.php
</span><span style="color:#75715e"></span>$fdf_fn <span style="color:#f92672">=</span> <span style="color:#a6e22e">tempnam</span>(<span style="color:#e6db74">&#34;../tmp&#34;</span>, <span style="color:#e6db74">&#34;fdf&#34;</span>);

<span style="color:#75715e">// You can also use an absolute path
</span><span style="color:#75715e"></span>$fdf_fn <span style="color:#f92672">=</span> <span style="color:#a6e22e">tempnam</span>(<span style="color:#e6db74">&#34;/Library/WebServer/www/pdftk-php/tmp&#34;</span>, <span style="color:#e6db74">&#34;fdf&#34;</span>);
</code></pre></div><h3 id="set-up-the-pdf">Set up the PDF</h3>
<p>Create a fillable form in either Acrobat Professional or LiveCycle Designer, or use the included example PDF form. Give each field a unique and significant name so that you can work with the form more easily later on. You can modify field attributes by double clicking on the field using the Forms toolbar in Acrobat; in LiveCycle, use the Object panel.</p>
<p><img src="acrobat_form_field_options.png" alt="Acrobat Form Field Options" title="Acrobat Form Field Options"></p>
<p><img src="livecycle_form_field_options.png" alt="LiveCycle Form Field Options" title="LiveCycle Form Field Options"></p>
<p>If you are using LiveCycle, you&rsquo;ll need to save the final PDF as a <strong>static</strong> form compatible with Acrobat 7. pdftk doesn&rsquo;t work with dynamic forms or PDFs from later versions of Acrobat.</p>
<p><img src="livecycle_save_options.png" alt="LiveCycle Save Options" title="LiveCycle Save Options"></p>
<h3 id="connect-pdf-to-script">Connect PDF to script</h3>
<p><code>example/download.php</code> connects to your database, retrieves a row based on a passed GET variable, saves the data from the fetched row into variables, finally calling <code>pdftk-php.php</code>, which does the heavy lifting of creating an FDF file and injecting it into the PDF.</p>
<p>Starting at around line 30 the script assigns the fetched values to variables. Each of those retrieved variables needs to be paired with a form field in your PDF (near line 39). In a basic Acrobat form this is simple:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">$fdf_data_strings<span style="color:#f92672">=</span> <span style="color:#66d9ef">array</span>(<span style="color:#e6db74">&#39;firstname&#39;</span> <span style="color:#f92672">=&gt;</span> $pdf_firstname,  <span style="color:#e6db74">&#39;lastname&#39;</span> <span style="color:#f92672">=&gt;</span> $pdf_lastname, <span style="color:#e6db74">&#39;email&#39;</span> <span style="color:#f92672">=&gt;</span> $pdf_email);
</code></pre></div><p>LiveCycle tends to complicate the form names slightly. You can use pdftk from the command line to retrieve the official form field names. Run this command from the directory containing your PDF file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">pdftk form.pdf dump_data_fields &gt; form-fields.txt
</code></pre></div><p>When you open the resultant <code>.txt</code> file you should see a report of all the fields</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">...
---
FieldType: Text
FieldName: form1[0].#subform[0].firstname[0]
FieldNameAlt: First name&amp;#9;
FieldFlags: 0
FieldJustification: Left
---
...
</code></pre></div><p>Use those long, hairy <code>FieldName</code>s in the <code>$fdf_data_strings</code> array, like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">$fdf_data_strings<span style="color:#f92672">=</span> <span style="color:#66d9ef">array</span>(<span style="color:#e6db74">&#39;form1[0].#subform[0].#area[0].FirstName[0]&#39;</span> <span style="color:#f92672">=&gt;</span> $pdf_firstname, <span style="color:#e6db74">&#39;form1[0].#subform[0].#area[0].LastName[0]&#39;</span> <span style="color:#f92672">=&gt;</span> $pdf_lastname, <span style="color:#e6db74">&#39;form1[0].#subform[0].#area[0].EMail[0]&#39;</span> <span style="color:#f92672">=&gt;</span> $pdf_email, );
</code></pre></div><p>Finally, check the values of <code>$pdf_filename</code> and <code>$pdf_original</code> near lines 62 and 65.</p>
<p>Go to http://localhost/pdftk-php/example/view.php and click on the download links for one of entries. You should be prompted to download a PDF file, dynamically generated using <code>pdftk-php.php</code>. Success!</p>
<h2 id="advanced-customization">Advanced customization</h2>
<h3 id="using-checkboxes-or-radio-buttons">Using checkboxes or radio buttons</h3>
<p><code>$fdf_data_strings</code> works great for text fields, but can&rsquo;t handle radio buttons or check boxes. For that you&rsquo;ll need to use the <code>$fdf_data_names</code> array near line 49.</p>
<p><em>NB: The logic for manipulating the form data in PHP and MySQL might be a little convoluted and could easily be optimized, but it works for clear demonstration purposes.</em></p>
<p>To demonstrate this how to do this, we&rsquo;ll add a checkbox to our form and extend the database. Run this query in a MySQL client to add a couple columns to our table:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">ALTER</span> <span style="color:#66d9ef">TABLE</span> <span style="color:#f92672">`</span>users<span style="color:#f92672">`</span> <span style="color:#66d9ef">ADD</span> <span style="color:#f92672">`</span>option1<span style="color:#f92672">`</span> TINYINT( <span style="color:#ae81ff">1</span> ) <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span>, <span style="color:#66d9ef">ADD</span> <span style="color:#f92672">`</span>option2<span style="color:#f92672">`</span> TINYINT( <span style="color:#ae81ff">1</span> ) <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span> ;
</code></pre></div><p>Open <code>/example/example.pdf</code> in Acrobat Professional and add two checkbox fields named <code>option1</code> and <code>option2</code>.</p>
<p><img src="ridiculously_huge_checkboxes_better.png" alt="Huge Checkboxes" title="Ridiculously huge checkboxes"></p>
<p>We need to modify our web form and the table that displays the data, just to make sure everything is getting saved to the database correctly.</p>
<p>First, make a couple changes to <code>example/index.php</code> After the section near lines 104–107, add</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">p</span>&gt;
    &lt;<span style="color:#f92672">label</span> <span style="color:#a6e22e">for</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;option1&#34;</span>&gt;Option 1&lt;/<span style="color:#f92672">label</span>&gt;
    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;checkbox&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;option1&#34;</span> <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;1&#34;</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;option1&#34;</span> /&gt;
&lt;/<span style="color:#f92672">p</span>&gt;
&lt;<span style="color:#f92672">p</span>&gt;
    &lt;<span style="color:#f92672">label</span> <span style="color:#a6e22e">for</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;option2&#34;</span>&gt;Option 2&lt;/<span style="color:#f92672">label</span>&gt;
    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;checkbox&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;option2&#34;</span> <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;1&#34;</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;option2&#34;</span> /&gt;
&lt;/<span style="color:#f92672">p</span>&gt;
</code></pre></div><p>Then, up near the top of <code>example/index.php</code> after line 34, add this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#66d9ef">if</span> ($_POST[<span style="color:#e6db74">&#39;option1&#39;</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>) {
    $option1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
} <span style="color:#66d9ef">else</span> {
    $option1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
}

<span style="color:#66d9ef">if</span> ($_POST[<span style="color:#e6db74">&#39;option2&#39;</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>) {
    $option2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
} <span style="color:#66d9ef">else</span> {
    $option2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>This checks the value of the submitted checkboxes and sets the <code>$optionx</code> variables to either 1 or 0, which fit into the <code>TINYINT</code> columns in our table. You could use actual text as well and set the columns to <code>VARCHAR</code>.</p>
<p>Change the SQL query from</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">$sql <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;INSERT INTO users (firstname, lastname, email) VALUES (&#39;</span><span style="color:#e6db74">$firstname</span><span style="color:#e6db74">&#39;, &#39;</span><span style="color:#e6db74">$lastname</span><span style="color:#e6db74">&#39;, &#39;</span><span style="color:#e6db74">$email</span><span style="color:#e6db74">&#39;)&#34;</span>;
</code></pre></div><p>to</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">$sql <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;INSERT INTO users (firstname, lastname, email, option1, option2) VALUES (&#39;</span><span style="color:#e6db74">$firstname</span><span style="color:#e6db74">&#39;, &#39;</span><span style="color:#e6db74">$lastname</span><span style="color:#e6db74">&#39;, &#39;</span><span style="color:#e6db74">$email</span><span style="color:#e6db74">&#39;, &#39;</span><span style="color:#e6db74">$option1</span><span style="color:#e6db74">&#39;, &#39;</span><span style="color:#e6db74">$option2</span><span style="color:#e6db74">&#39;)&#34;</span>;
</code></pre></div><p>Go ahead and insert some dummy submissions with boxes checked and unchecked to make sure everything is working.</p>
<p>Optionally we need to modify <code>example/view.php</code> to show the stored values. Add the following table header cells after line 29:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#75715e">&lt;!-- Already here --&gt;</span>&lt;<span style="color:#f92672">th</span>&gt;E-mail Address&lt;/<span style="color:#f92672">th</span>&gt;
   &lt;<span style="color:#f92672">th</span>&gt;Option 1&lt;/<span style="color:#f92672">th</span>&gt;
   &lt;<span style="color:#f92672">th</span>&gt;Option 2&lt;/<span style="color:#f92672">th</span>&gt;
<span style="color:#75715e">&lt;!-- Already here --&gt;</span>&lt;<span style="color:#f92672">th</span>&gt;Download PDF&lt;/<span style="color:#f92672">th</span>&gt;
</code></pre></div><p>In the <code>while</code> loop a few lines later, add this code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#75715e">&lt;!-- Already here --&gt;</span>&lt;<span style="color:#f92672">td</span>&gt;<span style="color:#75715e">&lt;?php echo $user[&#34;lastname&#34;]; ?&gt;</span>&lt;/<span style="color:#f92672">td</span>&gt;
&lt;<span style="color:#f92672">td</span>&gt;<span style="color:#75715e">&lt;?php echo ($user[&#39;option1&#39;] == 1) ? &#34;Yes&#34; : &#34;No&#34;; ?&gt;</span>&lt;/<span style="color:#f92672">td</span>&gt;
&lt;<span style="color:#f92672">td</span>&gt;<span style="color:#75715e">&lt;?php echo ($user[&#39;option2&#39;] == 1) ? &#34;Yes&#34; : &#34;No&#34;; ?&gt;</span>&lt;/<span style="color:#f92672">td</span>&gt;
<span style="color:#75715e">&lt;!-- Already here --&gt;</span>&lt;<span style="color:#f92672">td</span>&gt;<span style="color:#75715e">&lt;?php echo $user[&#34;email&#34;]; ?&gt;</span>&lt;/<span style="color:#f92672">td</span>&gt;
</code></pre></div><p>This is just PHP ternary notation, which essentially says that if the value of <code>optionx</code> is equal to one, echo &ldquo;Yes,&rdquo; otherwise, echo &ldquo;No&rdquo;.</p>
<p>Finally we need to modify <code>example/download.php</code> to handle our checkboxes. Like I said above, the <code>$fdf_data_names</code> variable handles checkbox and radio button data. In PDF forms, the two allowed values for checkboxes are &ldquo;Yes&rdquo; and &ldquo;Off&rdquo; (not really opposites, but oh well), so you&rsquo;ll need to set variables accordingly. Replace <code>$fdf_data_names = array();</code> near line 49, with this, which checks the values of <code>optionx</code> and sets <code>$pdf_optionx</code> to either &ldquo;Yes&rdquo; or &ldquo;Off&rdquo; and then defines the <code>$fdf_data_names</code> array appropriately:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#66d9ef">if</span> ($data[<span style="color:#e6db74">&#39;option1&#39;</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>) {
    $pdf_option1 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Yes&#34;</span>;
} <span style="color:#66d9ef">else</span> {
    $pdf_option1 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Off&#34;</span>;
}

<span style="color:#66d9ef">if</span> ($data[<span style="color:#e6db74">&#39;option2&#39;</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>) {
    $pdf_option2 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Yes&#34;</span>;
} <span style="color:#66d9ef">else</span> {
    $pdf_option2 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Off&#34;</span>;
}

$fdf_data_names <span style="color:#f92672">=</span> <span style="color:#66d9ef">array</span>(<span style="color:#e6db74">&#39;option1&#39;</span> <span style="color:#f92672">=&gt;</span> $pdf_option1, <span style="color:#e6db74">&#39;option2&#39;</span> <span style="color:#f92672">=&gt;</span> $pdf_option2);
</code></pre></div><p>And that should do it! Visit http://localhost/pdftk-php/example/view.php and download one of the forms. The checkboxes should populate perfectly.</p>
<h3 id="other-types-of-form-fields">Other types of form fields</h3>
<p>Combo boxes and radio buttons act similarly to checkboxes. If you run the <code>dump_data_fields</code> command with pdftk again on a form with these more advanced options, you&rsquo;ll see a few differences in the results.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">FieldType: Text
FieldName: email
FieldFlags: 0
FieldJustification: Left
---
FieldType: Button
FieldName: option1
FieldFlags: 0
FieldValue: Yes
FieldJustification: Left
FieldStateOption: Off
FieldStateOption: Yes
---
FieldType: Choice
FieldName: favoriteColor
FieldFlags: 131072
FieldValue: blue
FieldValueDefault: red
FieldJustification: Left
</code></pre></div><p>You can see the &ldquo;Yes&rdquo; vs. &ldquo;Off&rdquo; values in our checkbox (called &ldquo;Button&rdquo; in PDF lingo). Drop down lists (&ldquo;Choice&rdquo; in PDF-speak) have multiple values, specified by you when you create the field.</p>
<p><img src="combo_box_properties.png" alt="Combo box properties" title="Sample combo box properties in Acrobat"></p>
<p>Radio buttons are hybrids. They are considered &ldquo;Buttons,&rdquo; like checkboxes, but can have custom values, like drop down lists.</p>
<p>Your final PHP script will need to take these different values into account and assign the correct values in the <code>$fdf_data_names</code> array.</p>
<h2 id="conclusion">Conclusion</h2>
<p>You can do a ton with the <code>pdftk-php.php</code> class once you get it set up initially and get past the slight learning curve. If you have any questions, feel free to ask in the comments. If you find any problems, comment here or <a href="http://github.com/andrewheiss/pdftk-php/issues" title="Issues - andrewheiss/pdftk-php - GitHub">open an issue at the GitHub project page</a>. Additionally, you can <a href="http://github.com/andrewheiss/pdftk-php/tree/master" title="andrewheiss's pdftk-php at master - GitHub">fork the project</a> and contribute.</p>
<p>Good luck!</p>
%!s(MISSING)]]></content>
        <category term="html" />
        <category term="pdftk" />
        <category term="pdftk-php" />
        <category term="php" />
        <category term="sh" />
        <category term="sql" />
        <category term="text" />
    </entry>
    <entry>
        <title type="html"><![CDATA[On narrowing and redefining research]]></title>
        <link href="https://www.shagunjhaver.com/blog/2009/07/28/on-narrowing-and-redefining-research/" rel="alternate" />
        <published>2009-07-28T00:00:00+00:00</published>
        <updated>2009-07-28T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2009/07/28/on-narrowing-and-redefining-research/</id>
        <summary type="html"><![CDATA[After a year of deliberation, I may have finally decided what to write about for my thesis.]]></summary>
        <content type="html"><![CDATA[<p>I&rsquo;ve been in Egypt for almost a year now, studiously working towards my MA in Middle East Studies. The supposed capstone of my time here at AUC—my thesis—now looms ahead somewhat menacingly. I get to spend the next several months researching and writing what will end up being my largest research project to date. It&rsquo;ll also set the foundation for my (hopefully) future PhD plans.</p>
<p>There&rsquo;s only one problem: I don&rsquo;t quite know what I&rsquo;m writing it on.</p>
<p>At BYU I double majored in Middle East Studies/Arabic (MESA) and Italian—an odd mix of modern history, political science, and renaissance poetry. Most of my research focused on finding literary and historic connections between the Middle East and Italy. I looked at the role of Sufism in the birth of Catholic mysticism, especially with Jacopone da Todi and St. Francis of Assisi. I looked at the Young Ottomans and their reliance on Mazzini&rsquo;s <em>Giovine Italia</em> ideology. I even <a href="http://www.heissatopia.com/2007/03/symposium-humanitatum-2007.html" title="Heissatopia: Symposium Humanitatum 2007">presented a paper</a> at a conference about the role of Mohammed in <em>Inferno XXVIII</em> in Dante&rsquo;s <em>Divine Comedy,</em> connecting it to proto-orientalism.</p>
<p>Fun times :)</p>
<p>At the same time, though, there was an inherent conflict in my research interests. I wrote my MESA capstone paper on the media coverage of the 2006 Israel/Lebanon war, where no Italian literature was involved :). I love media—I&rsquo;m obsessed with the news, the internet, blogs, Twitter; anything shiny, new, and exciting.</p>
<p>I started my MA with the assumption that I&rsquo;d have to choose one of these tracks—history or media. I dove headlong into the history track, writing a huge literature review on the history of the Italians in Egypt at the beginning of the 20th century. Large Italian communities in Cairo, Alexandria, and Ismailiyya sprang up after Napoleon&rsquo;s 1798 invasion. Thousands of Italians were born and raised abroad in these cities, and many took part in the Egyptian nationalist movement, considering themselves more Egyptian than Italian, thus earning themselves the nickname <em>mutamasirun</em> (those who try to be Egyptian).</p>
<p>I was excited about this research until a new shiny thing took my attention away—Twitter. I started using Twitter more or less full time in January, which then introduced me to the large Egyptian Twitter community. Many of the Egyptian twitterers are also activist bloggers who have been arrested multiple times. I began to see the power and potential of the internet in political reform and change in the Middle East and switched research gears to focus on the Middle Eastern blogosphere. It was fascinating stuff, but I felt like I had turned my back on history :) Further complicating things, I had an amazing history seminar last semester that resulted in some awesomely fun archival research. I had a blast writing the paper. The primeval dichotomy of history vs. media reared its ugly head again.</p>
<p>Since I&rsquo;m nearing the end of my MA, I&rsquo;m looking at different PhD programs to go to once I&rsquo;m done here. There are lots that look at bloggers and politics—even ones that look at bloggers and politics and the Middle East—but none do it with a historical approach (fancy that&hellip; blogs have been around for something like four years and it&rsquo;s not history yet :) ). I sent out dozens of e-mails to different professors asking about graduate programs and my potential research. Most responses were confused; <code>history != new media</code>.</p>
<p>However, one professor at Cornell responded positively. He studies media in modern Egyptian history, specifically in the time period of my Italian <em>mutamasirun</em>.</p>
<p>I think I may have found a way to bridge the history/media studies gap. Now I just need to figure out exactly how to do it.</p>
<p>Awesome. :)</p>
<p>So, sorry bloggers—I&rsquo;ll keep following you as a tangential fascination, but my heart lies in history.</p>
%!s(MISSING)]]></content>
        <category term="bloggers" />
        <category term="history" />
        <category term="italians" />
        <category term="mutamasirun" />
        <category term="thesis" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Import a Blogger Blog to InDesign with Perl]]></title>
        <link href="https://www.shagunjhaver.com/blog/2009/07/19/converting-a-blogger-blog-to-indesign-tagged-text/" rel="alternate" />
        <published>2009-07-19T00:00:00+00:00</published>
        <updated>2009-07-19T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2009/07/19/converting-a-blogger-blog-to-indesign-tagged-text/</id>
        <summary type="html"><![CDATA[This Perl script lets you take a backed-up Blogger XML file and convert it to an InDesign Tagged Text file for book layout.]]></summary>
        <content type="html"><![CDATA[<p>Our family has a fairly sizable <a href="http://www.heissatopia.com" title="Heissatopia">blog</a> that we (actually, mostly my wife, Nancy) have kept updated for several years. Since it contains so much family history we wanted an easy way to preserve it in print form, just in case Blogger gets the boot from Google some day (not that that will ever really happen…).</p>
<p>Since we&rsquo;re both hobbyist graphic designers—I taught a couple print layout and design classes as an undergrad at BYU and have made several books at <a href="http://www.lulu.com" title="Lulu.com">Lulu.com</a>—we decided to layout and print each year of our blog, to keep for posterity.</p>
<p>A couple years ago Nancy attempted this with our smaller <a href="http://andrewheiss.blogspot.com" title="Adventures in Jordan">Jordan blog</a> for a print publishing class she took at BYU. We spent the bulk of our time manually copying and pasting each post and the subsequent comments into a huge Word document. She then ran a long series of find/replaces to clean up the messy, inconsistent typography, and then finally placed it into Quark (that evil program). Through a series of unfortunate events, Quark crashed repeatedly and corrupted her file multiple times—she was lucky to get her first draft turned in for her final project (she got an A, though. Phew!).</p>
<p>I knew there had to be a faster, more efficient way to wrangle all the blog text, but this was back in 2006, before Blogger had an open API or options to backup a blog. Primitive, dark days indeed :).</p>
<p>However, last year, Blogger introduced a fantastic new option—the ability to backup and export your entire blog, comments and all. Blogger spits out an Atom-formatted XML file that you can use to recreate your blog later on (or possibly import onto other platforms, like WordPress, I think). This was the key to simplifying the daunting task of collecting the text for our blog books. All we needed was a way to mangle the text in the XML file to create an InDesign-ready file.</p>
<p>So, I whipped up a semi-complicated Perl script that can parse an Atom-formatted XML file from Blogger and create a text file using InDesign Tagged Text to preapply paragraph and character styles. It also cleans up the typographic elements of the text, adding em and en dashes, removing empty paragraphs, etc. Additionally, it can add hidden index entries for each tag, essentially creating a barebones index for your book. And it only takes 10ish seconds to run on a large blog. It&rsquo;s not perfect and could stand some good optimization, but it works.</p>
<p>Additionally, since InDesign tagged text works with, well, text, it won&rsquo;t place your images for you. Instead it will insert the location of the image (the <code>src=whatever.jpg</code> of the <code>img</code> tags) in between curly braces <code>{ }</code>. You&rsquo;ll then need to manually place all the images later, deleting the braced text.</p>
<p>In the future, the script could be changed to output XML, which does let you include pictures, but you&rsquo;d have to have all your images on your hard drive already. The script could go and download all the linked images, but it&rsquo;s not really a good idea to place low resolution, web-optimized images in a print document. In our case we have high-res copies of all the pictures on the blog stored on an external hard drive, so we just have to go and find and place the images we want. It takes more time, but it makes better quality documents in the end.</p>
<p>Also, links are preserved as footnotes—all <code>href=&quot;whatever.html&quot;</code>s show up as the footnote text.</p>
<h3 id="how-to-use-the-script">How to use the script</h3>
<p>First, download the script and its supporting files from <a href="http://github.com/andrewheiss/Blogger-XML-to-InDesign/tree/master" title="andrewheiss's Blogger-XML-to-InDesign at master - GitHub">Github</a>. If you&rsquo;re using Mac OS or Linux, make sure the main script file, <code>format_for_id.pl</code> is executable—type <code>chmod +x format_for_id.pl</code> at the terminal.</p>
<p>Next, make sure you have Perl installed on your system. If you are using Linux or Mac OS X, you&rsquo;re good to go. If you&rsquo;re using Windows, download and install <a href="http://strawberryperl.com/" title="Strawberry Perl">Strawberry Perl for Windows</a>. You can also use <a href="http://www.activestate.com/activeperl/" title="ActivePerl">ActivePerl</a>, but installing modules is a little more difficult.</p>
<p>The script uses several additional <a href="http://en.wikipedia.org/wiki/Cpan" title="CPAN - Wikipedia, the free encyclopedia">CPAN modules</a> that you&rsquo;ll need to install. You&rsquo;ll need to use the CPAN shell to do so.</p>
<ul>
<li>On Windows with Strawberry Perl: open the packaged CPAN client in the Start Menu folder</li>
<li>On Windows with ActivePerl: Good luck. There is a large repository of specially compiled CPAN modules for ActiveState, and reportedly there is a kind of CPAN shell, but I haven&rsquo;t gotten either to work too well. Stick with Strawberry Perl. It&rsquo;s better :)</li>
<li>On Mac OS X: type <code>perl -MCPAN -e shell</code> at a terminal window</li>
<li>On Linux: type <code>sudo cpan</code> at a terminal window</li>
</ul>
<p>(If it&rsquo;s your first time running the CPAN shell you&rsquo;ll be asked to configure the installation environment. Choose the option to automatically configure everything.)</p>
<p>Once everything is set up and you see the <code>cpan&gt;</code> shell prompt, type <code>install Package::Name</code> (eg. <code>install Date::Format</code>) for each of the dependent CPAN packages listed at the beginning of <code>format_for_id.pl</code>.</p>
<p>Log in to your <a href="http://www.blogger.com/home" title="Blogger.com">Blogger Dashboard</a> and export your blog as an XML file by going to Settings &gt; Basic &gt; Export blog. Place the XML file in the script folder.</p>
<p>Open <code>config.cfg</code> with a text editor and change the settings as needed. Set the input file to your newly downloaded XML file, choose the year you want to extract, set an output file, and set the file header, either &lt;<code>UNICODE-MAC</code>&gt; or &lt;<code>UNICODE-WIN</code>&gt;, depending on what platform you use InDesign on.</p>
<p>For now, leave all the style tags as they are so you can place the text into the example InDesign file and see how everything works. You can change them later and rerun the script</p>
<p>Finally, using the terminal or command prompt, navigate to the folder with the script and and run it by typing <code>perl format_for_id.pl</code>. If everything goes well you should have an output file at the location you specified, full of InDesign tags.</p>
<p>Open up <code>Example.indd</code> in InDesign CS3 or above and place the generated text file. All the text should come in perfectly with all the needed paragraph and character styles applied. Bravo!</p>
<h3 id="advanced-usage">Advanced usage</h3>
<p>Obviously you&rsquo;ll want to make some changes to the format of the output text. You might not want the post URL right after the tag—you might want it at the end, or not want it at all. With a little knowledge of Perl, you can edit the main script directly, mostly the <code>combineSortClean()</code> sub near the end of the script, to change the order of the output elements.</p>
<p>You can also disable tag indexing and allow the tags to be output with a paragraph style. Just comment and uncomment the appropriate sections in the code. The same goes for the author-specific character styles—comment and uncomment the needed lines in the script.</p>
<p>You can rename the styles and use your own—just make sure the styles exist in your InDesign document before you place the output file. InDesign will throw away any tags that don&rsquo;t already exist in the document.</p>
<p>I made the script for our specific blog, so it doesn&rsquo;t take every possible paragraph or character style into account. If you want additional functionality, you&rsquo;ll have to add it. Feel free to fork the project off of GitHub and add to/improve it. That&rsquo;s why it&rsquo;s open source :)</p>
<p>If you have any questions, ask in the comments. Report any issues at the <a href="http://github.com/andrewheiss/Blogger-XML-to-InDesign/issues" title="Issues - andrewheiss/Blogger-XML-to-InDesign - GitHub">project GitHub page</a>. I&rsquo;ll try to respond quickly—I generally do, as evidenced by my <a href="/blog/2007/10/06/populating-a-livecycle-pdf-with-php-and-mysql/" title="Populating a LiveCycle PDF with PHP and MySQL  –   AndrewHeiss.com">pdftk-php project</a> :)</p>
<p>Good luck!</p>
%!s(MISSING)]]></content>
        <category term="blogger xml" />
        <category term="indesign" />
        <category term="indesign tagged text" />
        <category term="perl" />
    </entry>
    <entry>
        <title type="html"><![CDATA[pdftk-php Officially Released]]></title>
        <link href="https://www.shagunjhaver.com/blog/2009/06/19/pdftk-php-officially-released/" rel="alternate" />
        <published>2009-06-19T00:00:00+00:00</published>
        <updated>2009-06-19T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2009/06/19/pdftk-php-officially-released/</id>
        <summary type="html"><![CDATA[After almost two years, I've officially developed and released pdftk-php--a script that lets you inject form data into a PDF with PHP.]]></summary>
        <content type="html"><![CDATA[<p>Wow. It&rsquo;s been almost two years since I wrote <a href="/blog/2007/10/06/populating-a-livecycle-pdf-with-php-and-mysql/" title="Populating a LiveCycle PDF with PHP and MySQL">a little tutorial</a> on how to use LiveCycle, PHP, and MySQL together to make a web application that served dynamic PDF forms. Since then it has become the number one page on this site. I still get a substantial number of comments a week here on the blog and via e-mail—many of those comments are stuck in my inbox, sent to me before I rebuilt my site on WordPress and enabled commenting.</p>
<p>Unfortunately, though, I wrote that tutorial as my first foray into the world of PHP/MySQL web development and had little idea of what I was really doing. Since then, however, I&rsquo;ve done a fair amount of real-world web design and development, and even implemented this pdftk form system into a live, public-facing <a href="http://mmlab.lib.byu.edu" title="HBLL Multimedia Lab">application</a>.</p>
<p>In the interim, I&rsquo;ve refined my system and released it as an open source PHP class, named <a href="http://github.com/andrewheiss/pdftk-php/" title="pdftk-php on GitHub"><code>pdftk-php</code></a>. The project is hosted at <a href="http://github.com" title="GitHub">GitHub</a>, a brilliant hosting service for collaborative projects, which uses Git, the best version control software I&rsquo;ve ever used. Anyone can check out, or clone, the project, make any edits to the core set of classes, and merge those with the main project branch—it is now a true community project. If you don&rsquo;t want to contribute, you can still <a href="http://github.com/andrewheiss/pdftk-php/downloads" title="Download pdftk-php at GitHub">download it from GitHub</a> as a <code>.zip</code> or <code>.tar</code> file.</p>
<p>Included in the project is a (hopefully) extensively documented example application that you can set up on your own server.</p>
<p>I&rsquo;m working on writing a new step-by-step tutorial on how to set everything up, akin to the old one. In theory, the new <code>pdftk-php</code> should work with PDFs created in any program, not just LiveCycle. In the meantime, download <code>pdftk-php</code>, try it out, and report any bugs here on the blog or <a href="http://github.com/andrewheiss/pdftk-php/issues" title="Report an issue at GitHub">directly at GitHub</a> (where I hope to keep everything related to <code>pdftk-php</code> from now on). Fork the project and contribute if you feel like it, too!</p>
<p>Thanks and good luck!</p>
%!s(MISSING)]]></content>
        <category term="pdf" />
        <category term="pdftk" />
        <category term="pdftk-php" />
        <category term="php" />
        <category term="release" />
    </entry>
    <entry>
        <title type="html"><![CDATA[A Tale of Three Taxis]]></title>
        <link href="https://www.shagunjhaver.com/blog/2009/05/14/a-tale-of-three-taxis/" rel="alternate" />
        <published>2009-05-14T00:00:00+00:00</published>
        <updated>2009-05-14T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2009/05/14/a-tale-of-three-taxis/</id>
        <summary type="html"><![CDATA[Traffic in Cairo is horrible, especially when all the taxi drivers, the ubiquitous life-blood of the Egyptian streets, have a deathwish for you.]]></summary>
        <content type="html"><![CDATA[<p>Traffic in Cairo is horrible, especially when all the taxi drivers, the ubiquitous life-blood of the Egyptian streets, have a deathwish for you.</p>
<p>Read about my recent near misses at my post at our family blog, <a href="http://www.heissatopia.com/2009/05/tale-of-three-taxis.html" title="Heissatopia: A tale of three taxis">Heissatopia</a>.</p>
%!s(MISSING)]]></content>
        <category term="cairo" />
        <category term="chaos" />
        <category term="egypt" />
        <category term="life abroad" />
        <category term="taxis" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Google Profile Business Cards]]></title>
        <link href="https://www.shagunjhaver.com/blog/2009/05/01/google-profile-business-cards/" rel="alternate" />
        <published>2009-05-01T00:00:00+00:00</published>
        <updated>2009-05-01T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2009/05/01/google-profile-business-cards/</id>
        <summary type="html"><![CDATA[I got 25 Google Profile business cards for free. Woot!]]></summary>
        <content type="html"><![CDATA[<p>Look what I just ordered, for free:</p>
<p><img src="google-profile-business-card.png" alt="Google Profile Business Card"></p>
<p>Awesome :)</p>
<p>Google is giving packs of 25 of these away for free to promote their new <a href="http://www.google.com/profiles/andrewheiss" title="Andrew Heiss - Google Profile">Google Profiles</a> service. I think the profile idea is great—it makes finding people online so much easier and <a href="http://lifehacker.com/5221323/google-profiles-give-you-control-over-what-google-says-about-you" title="Lifehacker - Google Profiles Give You Control Over What Google Says About You - Google Profiles">gives you more control over what Google says about you.</a></p>
<p>Too bad I won&rsquo;t get these until August when my mother-in-law comes to visit.</p>
%!s(MISSING)]]></content>
        <category term="cool" />
        <category term="ego-googling" />
        <category term="ego-surfing" />
        <category term="online identity" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Typing transliterated Arabic quickly]]></title>
        <link href="https://www.shagunjhaver.com/blog/2009/04/26/typing-transliterated-arabic-quickly/" rel="alternate" />
        <published>2009-04-26T00:00:00+00:00</published>
        <updated>2009-04-26T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2009/04/26/typing-transliterated-arabic-quickly/</id>
        <summary type="html"><![CDATA[Use text-replacement software to automate Arabic transliteration.]]></summary>
        <content type="html"><![CDATA[<p>Since Arabic doesn&rsquo;t use the Latin alphabet, and lots of the letters don&rsquo;t have Latin equivalents (خ, ع, ق, ط, for example), transliteration is necessary to show Arabic words and sounds in English writing. There is an easy way to type transliterated Arabic quickly, though, using macros to locate hidden Unicode characters used by many of the standard transliteration systems.</p>
<p>Unfortunately, there is no universally standard system for transliteration, and most systems use letters that aren&rsquo;t found on normal keyboards. One of the rising systems in the Middle East, nicknamed <a href="http://en.wikipedia.org/wiki/Arabic_Chat_Alphabet">Franco Arab</a> in Egypt, is my least favorite. It only uses standard English letters, meaning it&rsquo;s useful for texting, e-mailing, and other things where it&rsquo;s difficult to write in real Arabic script. Biggest problem: it&rsquo;s ugly and hard to read.</p>
<p>For example, the name Great Britain (بريطانيا العظمى) uses several non-Latin letters. Written in Franco it looks like this: <em>bri6ania al3o'6ma</em>. For readers unfamiliar with Arabic (or even those who are, like me), it&rsquo;s always hard to remember what the random uppercase letters and numbers mean.</p>
<p>Fortunately, there are better systems. Here&rsquo;s Great Britain written using the <a href="https://www.cambridge.org/core/journals/international-journal-of-middle-east-studies/information/author-resources/ijmes-translation-and-transliteration-guide">IJMES</a> (International Journal of Middle East Studies) <a href="https://www.cambridge.org/core/services/aop-file-manager/file/57d83390f6ea5a022234b400/TransChart.pdf">system</a>, also used in the Encyclopedia of Islam: <em>Brīṭānīyā al-ʿuẓmá</em>. Much easier to read.</p>
<p>Since the nonstandard Latin letters use Unicode glyphs, you need to use a font that has a full set of Unicode glyphs, like Times, Arial, Helvetica, and other standard fonts. You also have to hunt down all the special characters either in Word&rsquo;s Insert Special Character dialog or in the Glyphs panel in InDesign.</p>
<p>You can speed up the process of hunting for and inserting special characters by using a text substitution app like <a href="http://lifehacker.com/software/texter/lifehacker-code-texter-windows-238306.php">Texter</a> for Windows (free, <a href="http://github.com/adampash/texter/tree/master">open source</a>) or <a href="http://www.ergonis.com/products/typinator/">Typinator</a> for Mac (not free). These programs can replace abbreviations that you type with preset phrases. For example, if you wanted to quickly type today&rsquo;s date you could set up a shortcut that would replace %date with the full date.</p>
<p>I set up a list of text replacements in my copy of Typinator that automatically change certain combinations of characters into IJMES standard transliterated rules. Here&rsquo;s my list of text transformation rules (all with the prefix -ij, short for IJMES):</p>
<ul>
<li><code>-ij'</code> = ʿ</li>
<li><code>-ij`</code> = ʾ</li>
<li><code>-ija</code> = ā</li>
<li><code>-ijd</code> = ḍ</li>
<li><code>-ijh</code> = ḥ</li>
<li><code>-iji</code> = ī</li>
<li><code>-ijs</code> = ṣ</li>
<li><code>-ijt</code> = ṭ</li>
<li><code>-iju</code> = ū</li>
<li><code>-ijz</code> = ẓ</li>
</ul>
<p>Here&rsquo;s a (very) quick example of this in action:</p>
<div class="video-responsive">
<iframe class="videoplayer" src="https://player.vimeo.com/video/4337233" frameborder="0" allow="autoplay; fullscreen" allowfullscreen></iframe>
</div>
<p>You could set up similar rules for transliteration with different systems (even Franco), or even different languages. Typing IJMES transliterated words for academic papers just got infinitely easier.</p>
<div class="alert alert-warning">
You will probably only want to use IJMES transliteration in print because of font encoding issues on different platforms and browsers. For online text you'll have to stick with Franco or something like it.
</div>
%!s(MISSING)]]></content>
        <category term="arabic" />
        <category term="automation" />
        <category term="ijmes" />
        <category term="texter" />
        <category term="transliteration" />
        <category term="typinator" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Libya, obsolete paradigms, and Rip Van Winkle]]></title>
        <link href="https://www.shagunjhaver.com/blog/2009/03/18/libya-obsolete-paradigms-and-rip-van-winkle/" rel="alternate" />
        <published>2009-03-18T00:00:00+00:00</published>
        <updated>2009-03-18T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2009/03/18/libya-obsolete-paradigms-and-rip-van-winkle/</id>
        <summary type="html"><![CDATA[Lisa Anderson's research of political systems in Libya reveals that standard Middle East Studies paradigms don't fully apply.]]></summary>
        <content type="html"><![CDATA[<p>I’m still experimenting with what I’m going to blog about here. I’m thinking of sticking with an odd mixture of technology and academia, which might work out well since I’m considering doing my upcoming thesis on technology in the Middle East, specifically blogging. So, here’s a purely academic post to start things off.</p>
<p>On Tuesday Dr. Lisa Anderson, AUC’s Provost and former professor at Columbia University, came to speak at a faculty seminar at the Middle East Studies Center. She’s a political scientist by training and started her academic career by studying Libya. Her talk focused on the role of traditional social studies disciplines in the study of the Middle East.</p>
<p>General social studies separated into more specialized disciplines in the early 1900s as progressive governments in the US and Europe became increasingly interested in understanding the dynamics of the social “here and now.” New disciplines of social studies emerged with the explicit purpose of improving governance, public administration, and economy. Economists researched and theorized how to stabilize and grow a capitalist economy; political scientists looked at the processes that created a stable democracy; sociologists tackled the dynamics of the changing progressive societies. Social scientists not explicitly concerned with the issues of “here and now” also emerged; those not interested in “here” entered anthropology while those not interested in “now” created the discipline of history.</p>
<p>Over the past century, scholarship in these disciplines has been rather entrenched along this foundational paradigm: research to improve capitalism and democracy. Because of this disciplinary emphasis and paradigm of US/Western-style economics and political systems, any research on other systems of government or economies are always done in terms of the “Western” social science paradigm.</p>
<p>For example, every class I’ve taken on Middle East politics always focuses on the processes of democratization and the persistence of authoritarianism. Elections (fair or not), development of civil society, the emergence of political parties—these are signs of “political development” for a political scientist. Economists look at how liberalized a state’s economy is—how open for investment and primed for capitalism it is. In a way, strict disciplinary social studies of societies outside the US and Europe seem to place other countries on a linear progressive timeline; studies of Egyptian politics reveal how democratized Egypt is or isn’t.</p>
<p>Not all countries—not even Egypt—fit into this standard disciplinary framework. Did Nasser really care if his Arab Socialist revolution fit into a future program of democratization? No way. He didn’t even think of it. Arab political scientists don’t generally look at it that way.</p>
<p>This theme of trying to fit the Middle Eastern peg in the academic square is well pronounced in Libya, which, because international sanctions for the past few decades, has been pretty isolated. According to Dr. Anderson, the case of Libya shows the limits of traditional Western social sciences.</p>
<p><a href="http://en.wikipedia.org/wiki/Muammar_al-Qaddafi">Muammar Qaddafi</a>, the crazy Libyan dictator surrounded by <a href="http://lallalydia.blogspot.com/2007/12/modern-day-amazons-colonel-qaddafis.html">female bodyguards</a> and who <a href="http://en.wikipedia.org/wiki/Jamahiriya">made up his country’s name</a>, has ruled Libya for 40 years. He’s been operating with a unique paradigm of political and economic theory that doesn’t jive with the standard Western view. He published a three volume exposition of his political and social views in 1975 called <a href="http://en.wikipedia.org/wiki/The_Green_Book"><em>The Green Book</em></a>. Qaddafi’s view of Libya’s political paradigm is completely different from Western disciplinary political science. For Qaddafi, the ideal political system is more of a radical, romantic, Rousseauian world where each individual represents themselves and has an innate skepticism of the state. His theory of the Libyan economy makes no mention of the market, the main protagonist of “standard” economics. Sociologically, the individual in Qaddafi’s Libya is not the fundamental unit of analysis—the family or tribe is. In practice there are no political parties or parliaments in Libya; each community runs itself with town hall-esque meetings. His social theory seems to be working for the most part.</p>
<p>In the 80s, because of different international incidents involving Libya, including <a href="http://en.wikipedia.org/wiki/Pan_Am_flight_103">the bombing of Pan Am Flight 103 over Lockerbie</a>, America and most of the international community imposed strict sanctions on Libya, aimed at isolating and punishing them. All relations between America and Libya were effectively destroyed and Libya entered what she called a <a href="http://en.wikipedia.org/wiki/Rip_Van_Winkle">“Rip Van Winkle”</a> era; life continued in total isolation in Libya under Qaddafi’s political and social theory.</p>
<p>In 2004 (about 20 years later…just like Rip Van Winkle, oddly enough) the sanctions eased and American and the rest of the world began diplomatic and academic contacts again. Because of the sanctions, Libya had missed out on the techno-political revolution of the internet. There were no banks; nobody knew what a credit card was. Dr. Anderson visited several universities in 2004 after this long isolation and found a globe in the center of the reference area of the library—North Asia was still labeled as the USSR.</p>
<p>Don’t go under international sanctions on the eve of a technological revolution. It’s not a good idea. At all.</p>
<p>As the conflict and tension between Libya and the rest of the world began to thaw, American social scientists got excited. They could finally observe Libya’s progress in democratization and economic liberalization; Libya was on <em>the</em> path. Once the sanctions ended, Libya started assimilating into the new world order. It officially apologized for its limited involvement in the Lockerbie crash. It disbanded all attempts at a nuclear weapons program. It was given a rotating seat on the UN security council. Condoleezza Rice even visited and on the eve of George Bush’s presidency, in January 2009, the US and Libya exchanged ambassadors.</p>
<p>However, despite all this apparent liberalization and openness in Libyan politics and the subsequent disciplinary excitement in political science, Libyan experts like Lisa Anderson see a different reality. Qaddafi is following his own trajectory, totally outside the traditional paradigm. He’s not progressing towards democracy—he’s already got a pseduodemocratic Era of the Masses political and economic system and is happy with it. He’s realized that in order to continue with his social revolution, he has to be somewhat involved with the world, and so he presents a facade of integration.</p>
<p>For example, when the Libyans ended their WMD program in 2006 and turned over all their nuclear material, all the machinery was still boxed up in crates. American politicians and political scientists applauded the IAEA for catching and stopping Libya before they could unpack anything. A widespread rumor/theory in both Libya and in academic and political circles, though, claims that Libya never had a program for WMD development. Their infrastructure and level of development couldn’t have handled such a large project. According to this theory, Libya bought the materials from North Korea so they could have something to turn over to the UN and the USA. So, they announced their weapons program, were condemned by the international community, bought some nuclear machinery from Korea, turned themselves in, reduced international sanctions, and improved their reputation in the world.</p>
<p>The same theory applies to the Lockerbie apology. Two Libyans were partially responsible for the bombing, so the majority of the blame was placed on Libya, despite several other claims of responsibility from other international non-state actors. Most Libyans today fully believe that Libya had no real connection to the bombing, yet Libya settled on a large payout with the families of the victims and offered a full apology. Following the apology sanctions were further lightened.</p>
<p>Libya was merely paying cynical lip service to the absurd US-led world order. As Dr. Anderson stated:</p>
<blockquote>
<p>If you’re playing the game that cynically, are you really playing the game? Libya is just playing the game; they think it’s just nonsense.</p>
</blockquote>
<p>If you’re studying a country that considers the “standard” world political, economic, and social system as an absurd game, can you really fully understand it if you study it using disciplines created by that system for the explicit purpose of improving the system? Standard Western political science is still stuck looking at the “here and now” of the early 1900s. Libya doesn’t fit the social science mold at all—traditional social sciences therefore fall flat on their faces.</p>
<p>I’ve found that the same principle can be applied to other countries in the Middle East. When Egypt held elections in 2005, President Mubarak allowed a second candidate to run for the first time ever. Disciplinary political scientists praised his move as an important step towards liberal democratization. Mubarak won by a landslide through rigged elections and imprisoned his opposing candidate, Ayman Nour.</p>
<p>Great big step towards democracy, or false expectations rooted in a skewed and incorrect social science paradigm?</p>
%!s(MISSING)]]></content>
        <category term="auc" />
        <category term="faculty seminar" />
        <category term="libya" />
        <category term="middle east studies" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Do not succumb to economic stupidity]]></title>
        <link href="https://www.shagunjhaver.com/blog/2009/03/15/do-not-succumb-to-economic-stupidity/" rel="alternate" />
        <published>2009-03-15T00:00:00+00:00</published>
        <updated>2009-03-15T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2009/03/15/do-not-succumb-to-economic-stupidity/</id>
        <summary type="html"><![CDATA[Listening to NPR's Planet Money economics podcast really does help to understand the current economic crisis.]]></summary>
        <content type="html"><![CDATA[<p>Yikes. It’s been a week since I launched my new site and blog and I haven’t posted yet. I think this is partially because I don’t know what I’m going to be focusing on with this blog. Middle East Studies? Technology? Hmmm…</p>
<p>I’ve had this blog post on my mind for a while, though, so I’d better post it. The best part is that it has nothing to do with MES or tech topics.</p>
<p>I’ve felt somewhat immune and aloof from all the American economic troubles. We moved to Egypt in August, a few months after the Bear Stern collapse, but before the September Lehman Bros./Commercial Paper collapse and subsequent bailouts.</p>
<p>Despite the rigors of grad school, I’ve had plenty of time to study up on the causes of this crisis. Having a bus daily 45 minute–1 hour bus commute has given me plenty of time to follow some awesome podcasts. I’ll post about my podcast routine later, but suffice it to say, I feel way more informed about this crisis because of the time I’ve spent listening and studying.</p>
<p>That doesn’t mean I know everything—or anything—about this crisis. I don’t fully comprehend all the crazy financial machinations that got us here. I can follow the news a bit better, though.</p>
<p>Here are some of the best resources I’ve found so far:</p>
<p><strong>NPR’s Planet Money</strong>: Amazing <a href="http://www.npr.org/rss/podcast/podcast_detail.php?siteId=94411890">podcast</a> that comes out 3–4 times a week. Excellent reporting. Easy to understand. Awesome. <a href="http://www.npr.org/money">Their blog rocks, too</a>.</p>
<p><strong>This American Life</strong>: Normally their hour long radio shows highlight a variety of interesting stories on random topics and have little to do with news, but they cosponsor Planet Money and have dedicated two entire shows to the economic crisis, <a href="http://www.thisamericanlife.org/Radio_Episode.aspx?sched=1242">The Giant Pool of Money</a> and <a href="http://www.thisamericanlife.org/Radio_Episode.aspx?sched=1285">Bad Bank</a>. US Treasury Secretary Tim Geithner and Senator Max Baucus even <a href="http://www.npr.org/blogs/money/2009/03/some_doll_house_or_other.html">praised Bad Bank in front of a joint session of Congress</a>. It was that good.</p>
<p><strong>The Crisis of Credit</strong>: <a href="http://vimeo.com/3261363">Brilliant 10 minute animation</a> inspired by Planet Money.</p>
<p><strong>Inside the Meltdown</strong>: PBS did a <a href="http://www.pbs.org/wgbh/pages/frontline/meltdown/">great hour long documentary</a> on the crisis. Really good, as well.</p>
<p>So check out those links and get informed. Found any other useful resources out there? Let us know in the comments…</p>
%!s(MISSING)]]></content>
        <category term="economic crisis" />
        <category term="links" />
        <category term="npr" />
        <category term="podcasts" />
    </entry>
    <entry>
        <title type="html"><![CDATA[New site launched]]></title>
        <link href="https://www.shagunjhaver.com/blog/2009/03/08/new-site-launched/" rel="alternate" />
        <published>2009-03-08T00:00:00+00:00</published>
        <updated>2009-03-08T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2009/03/08/new-site-launched/</id>
        <summary type="html"><![CDATA[I finally converted my ancient, inefficient PHP-ish website to a mean, lean, WordPresss running CMS.]]></summary>
        <content type="html"><![CDATA[<p>Two years ago I decided that it would be a good idea to start a personal website. I was always disappointed in <a href="http://www.google.com/search?q=Andrew+Heiss">the Google results for my name</a>, so I figured having my own web space and domain would help boost my ratings. Yes. I initially started this site for the sole purpose of <a href="http://en.wikipedia.org/wiki/Egosurfing">egogoogling</a>. So much has changed since then…</p>
<p>My first website was ugly. I had just started my foray into web design and barely knew anything—my CSS was rudimentary at best and I used scattered PHP includes to make a pseudo dynamic site. It was a mess.</p>
<p><img src="screenshot-of-old-site.png" alt="Screenshot of old site"></p>
<p>Ugh. It was pretty embarrassing. I should have just killed it, but I couldn&rsquo;t because of <a href="http://www.andrewheiss.com/blog/2007/10/06/populating-a-livecycle-pdf-with-php-and-mysql/">one tutorial</a> I posted. That one post drives more than 80% of the traffic to this site, and I get almost daily e-mails with questions about it. My old site couldn&rsquo;t handle the community that built up around it.</p>
<p>Now that I know a thing or two more about design, I&rsquo;m finally revealing the newest incarnation of <a href="http://www.andrewheiss.com/">AndrewHeiss.com</a>—a fully fledged, Wordpress-based site, with a blog, portfolio, and my general online identity hub.</p>
<p>The design isn&rsquo;t finished yet; there are a few last tweaks that need to get done. Let me know about any issues, problems, or suggestions in the comments.</p>
<p>Oh, I&rsquo;m still the top result for Andrew Heiss. Not that it&rsquo;s hard&hellip;</p>
%!s(MISSING)]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Populating a LiveCycle PDF with PHP and MySQL]]></title>
        <link href="https://www.shagunjhaver.com/blog/2007/10/06/populating-a-livecycle-pdf-with-php-and-mysql/" rel="alternate" />
        <published>2007-10-06T00:00:00+00:00</published>
        <updated>2007-10-06T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2007/10/06/populating-a-livecycle-pdf-with-php-and-mysql/</id>
        <summary type="html"><![CDATA[Tutorial explaining how to populate a LiveCycle PDF form using PHP and MySQL.]]></summary>
        <content type="html"><![CDATA[<div class="alert alert-warning">This tutorial is officially defunct. It is only here for archival purposes. The main script has been consolidated into one PHP class—<a href="http://www.andrewheiss.com/blog/2009/06/19/pdftk-php-officially-released/">pdftk-php</a>. Please see <a href="http://www.andrewheiss.com/blog/2009/07/29/installing-pdftk-php/">the updated tutorial</a>.</div>
<p>I work in the Harold B. Lee Library Multimedia Lab where we check out digital video and still cameras, tripods, external hard drives, digital voice recorders, and let people use $8,000 Quad Core Intel Macs. Expensive stuff…</p>
<p>To insure a “you break it, you pay for it” system, we require all patrons to fill out a loan agreement that we then keep on file. We&rsquo;ve been using this system for several years and now have more than a thousand forms—all completely unorganized and out of date. We have no way of knowing if a patron has graduated. We have no way of seeing if a patron has filled out a form previously.</p>
<p>So, I volunteered to fix the problem and move the entire loan agreement system to an online database. I had dabbled in LiveCycle and PHP but had never touched MySQL. So I decided to figure it all out.</p>
<p>I&rsquo;m assuming you already have a server set up with PHP and  MySQL. If not, you can download <a href="http://www.wampserver.com/en/">WAMP</a> or <a href="http://www.mamp.info/en/mamp.html">MAMP</a> and set up a local server on your computer for testing.</p>
<p>I&rsquo;m also assuming you have some knowledge of HTML and PHP. If not, search for some PHP tutorials on Google and get a foundation there.</p>
<h4 id="adobe-livecycle">Adobe LiveCycle</h4>
<p>Adobe&rsquo;s LiveCycle PDF Form software works great creating fillable PDF forms and then gathering the form data electronically. Collecting the data is relatively easy since LiveCycle uses semi-open file formats for data storage. For example, if you have an e-mail submit button in your LiveCycle form, a specially formatted XML file will be e-mailed to whatever address you set in the button properties. LiveCycle can then input that XML and repopulate an empty form.</p>
<p>Adobe even sells the LiveCycle Enterprise Suite, which is basically a specialized server made for generating and repopulating PDFs from submitted data. The Enterprise Suite is extremely expensive though</p>
<h4 id="create-form-in-livecycle">Create form in LiveCycle</h4>
<p>Unfortunately LiveCycle Designer does not work like the rest of the Adobe CS3 products. I spend most of my time in InDesign, and from a typographic point of view, Designer is pathetic and a little difficult to work with.</p>
<p>Creating the form is relatively straightforward, regardless of the limitations. Drag text boxes and image boxes from the Library panel to add static text and images. Drag text input boxes from the Library to make fillable fields. Actually laying out and designing the form is not the scope of this tutorial, so I won&rsquo;t go any further with that.</p>
<h4 id="data-bindings">Data Bindings</h4>
<p>What concerns us most is data submission and population with form fields, so we need to set up our fields to work. If you click on a text field, you should have three tabs in the Object panel (if you don&rsquo;t have an Object panel, go to Window &gt; Object).</p>
<p>The Field tab lets you set some basic properties for the field, like whether or not the field can have multiple lines, the line length, the display pattern for phone numbers or other number patterns, the caption, and a plethora of other things. The Value tab allows you to do some scripting for validation of your fields. I tried getting this to work, but since I&rsquo;m not a programmer at all and don&rsquo;t really know Javascript, I gave up.</p>
<p>The Binding tab is the most important for our purposes. By default your field will have a basic name like <code>TextField1</code>. You should change the names of all your fields to a more canonical naming system, like FirstName, LastName, EMail, etc. You can also change the data patterns and formats for text, XHTML, or dates.</p>
<h4 id="submit-through-http">Submit Through HTTP</h4>
<p>For my purposes, I wanted patrons to be able to fill out this PDF from anywhere and then submit it online, regardless of e-mail accounts. To best do this, drag an HTTP Submit Button from the Standard section of your Library. For this button to do anything, you need to set a URL that will receive the data in the form of HTTP POST.</p>
<h4 id="begin-setting-up-your-web-application">Begin Setting Up Your Web Application</h4>
<p>I made several different PHP files in the process of getting this all to work. First I wanted to verify what the HTTP POST values were before I started trying to process them. I adapted this code from <a href="http://blogs.adobe.com/stevex/2006/06/submit_to_php.html">Steve Tibbett</a>, an actual Adobe guy.</p>
<p><a href="dump.php.txt">Download text for dump.php</a></p>
<p>Create a file called dump.php and paste this code into it (or remove the .txt extension). Set your HTTP Submit Button URL to dump.php (in my case it was http://localhost/PDFStuff/dump.php) and preview your PDF in Designer. Submit your data and you&rsquo;ll see all the variables and the raw post data. <em>This step is  only to verify that the HTTP POST variables actually match up with your Designer field names.</em></p>
<p>Now that we know that the HTTP POST variables are actually working, we need to save them to a database. You&rsquo;ll need to first set up a MySQL table or database. Since I had never done this, I followed <a href="http://www.phpeasystep.com/index.php">some tutorials here</a>, which were extremely helpful in understanding how to actually use MySQL.</p>
<p>Use PHPmyadmin and create a new PDFStuff database with a username and password and then create a table in it with the following command (or use the GUI form in PHPmyadmin to create the table—either way works):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> <span style="color:#f92672">`</span>PDF_Loans<span style="color:#f92672">`</span> (
<span style="color:#f92672">`</span>id<span style="color:#f92672">`</span> int(<span style="color:#ae81ff">4</span>) <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span> auto_increment <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span>,
<span style="color:#f92672">`</span>FirstName<span style="color:#f92672">`</span> varchar(<span style="color:#ae81ff">65</span>) <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span> <span style="color:#66d9ef">default</span> <span style="color:#e6db74">&#39;&#39;</span>,
<span style="color:#f92672">`</span>LastName<span style="color:#f92672">`</span> varchar(<span style="color:#ae81ff">65</span>) <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span> <span style="color:#66d9ef">default</span> <span style="color:#e6db74">&#39;&#39;</span>,
<span style="color:#f92672">`</span>EMail<span style="color:#f92672">`</span> varchar(<span style="color:#ae81ff">65</span>) <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span> <span style="color:#66d9ef">default</span> <span style="color:#e6db74">&#39;&#39;</span>,
) <span style="color:#66d9ef">TYPE</span><span style="color:#f92672">=</span>MyISAM AUTO_INCREMENT<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span> ;
</code></pre></div><p>You now have a table in your database where we can store our PDF form variables. Paste this code into a file called insert.php and change the PHP variables as necessary, both for your MySQL connection information and your HTTP POST variables (here I just use FirstName, LastName, and Email).</p>
<p><a href="insert.php.txt">Download text for insert.php</a></p>
<p>Change the URL of the HTTP POST button to insert.php (again, in my case it&rsquo;s http://localhost/PDFStuff/insert.php) and try submitting some data with your PDF form. It should work.</p>
<h4 id="viewing-data-in-the-database">Viewing Data in the Database</h4>
<p>To actually see your submitted data, create a new php file  called view.php and paste this code in, changing it as necessary.</p>
<p><a href="view.php.txt">Download text for view.php</a></p>
<p>This page will take all the data from your database and display it in a table. You should see one record—the one you just added. There is also a column for a link to view the PDF, although the link is blank for now. Add several more through LiveCycle to make sure it&rsquo;s working.</p>
<h4 id="pdf-madness">PDF Madness</h4>
<p>If you&rsquo;ve already had PHP/MySQL experience, all of that was easy. Now comes the tricky part—repopulating the PDF form from the MySQL.</p>
<p>To get this to work, we need to convert the MySQL data into an FDF file, or the Adobe file format for storing form data. We then need to infuse the FDF file into our empty PDF form and allow the user to download it.</p>
<p>Fortunately, someone else figured out the bulk of this, at <a href="http://www.pdfhacks.com/">www.pdfhacks.com</a>. Download <a href="http://www.accesspdf.com/pdftk/">pdftk</a> and <a href="http://www.pdfhacks.com/forge_fdf/">forge_fdf.php</a> place them in your main site directory. Forge_fdf.php will take your data and transform it into an FDF file while fdftk will insert that FDF into your PDF. All you need to do is add some variables.</p>
<p>Before creating your variables, you need to discover the real names for all of your fields. If you made your PDF in Acrobat, the field names <em>should</em> be identical, but if you used Designer, the official code-based names will be much longer. fdftk can discover those names for you and dump them in a text file.</p>
<p>Place your empty PDF form in your main site folder. Open up a command prompt or terminal and run this command in the site folder, changing file names as necessary:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">$ pdftk form.pdf dump_data_fields &gt; form.pdf.fields
</code></pre></div><p>Open up the newly created form.pdf.fields file in Notepad and you&rsquo;ll see the automatic fdftk output, which will look something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">FieldType: Text
FieldName: form1[0].#subform[0].#area[0].FirstName[0]
FieldNameAlt: First Name:
FieldFlags: 2
FieldJustification: Left
</code></pre></div><p>The FieldName in this case is long and hairy, but we&rsquo;ll need that full name for the data insertion to work.</p>
<h4 id="dynamic-data-insertion">Dynamic Data Insertion</h4>
<p>Now we&rsquo;re ready to put all the pieces together. Make a file called viewpdf.php and paste this code in, changing as necessary:</p>
<p><a href="viewpdf.php.txt">Download text for viewpdf.php</a></p>
<p>If you don&rsquo;t want the form flattened (i.e. you want to  maintain the form fields), take out the <code> – flatten</code> command.</p>
<p>Notice how the long names had to go in to the <code>$fdf_data_strings</code> array.</p>
<p>To populate the PDF from your view.php table, you need to pass those long field names into viewpdf.php. Technically you would need to change the links in view.php to include the row id number for each row, so the PDF is generated using only the information from that row. Fortunately, we can have PHP and MySQL write all those links dynamically.</p>
<p>We originally set up the database so that every time you insert a record, an auto-id number would be assigned. We can reference that id number to view the PDF for that specific row entry.</p>
<p>You pass the id variable into the viewpdf.php file by adding <code>?id=1</code> onto the URL (for example, viewing the PDF for record number three would be <code>viewpdf.php?id=3</code>).</p>
<p>PHP and MySQL can automatically generate that messy link for every record in the table. Just replace <code>&lt;a href=&quot;#&quot;&gt;View PDF&lt;/a&gt;</code> in view.php with <code>&lt;a href=&quot;viewpdf.php?id=&lt;?php echo $rows['id']; ?&gt;&quot;&gt;View PDF&lt;/a&gt;</code></p>
<p>Open up view.php and see your dynamically generated table. You should have dynamic links that point to <code>viewpdf.php?id=whatever</code>. If you click on one of the links, the code in viewpdf.php will be processed for that row and a PDF will be generated and flattened and downloaded.</p>
<p>Voila!</p>
<p>I was only able to get this to work with text fields, although it is possible to do this with check boxes and other form elements. You&rsquo;ll have to consult the fdftk documentation to see what variables need to be set for other form elements.</p>
<p>This is a bare bones implementation of PDF population. In real life this is implemented a lot better—i.e. I have my view.php file accessible only after logging in and all the pages are styled with CSS to look nicer.</p>
<p>Hopefully this all made sense. If you want to view the original tutorials I used for this, visit:</p>
<ul>
<li><a href="http://www.mactech.com/articles/mactech/Vol.20/20.11/FillOnlinePDFFormsUsingHTML/index.html">MacTech Tutorial</a>—Explains how to do this using an HTML submission form rather than a PDF form. This was the basis for my tutorial.</li>
<li><a href="http://accesspdf.com/html_pdf_form/">MacTech Example</a>—Working example of a PDF being populated by HTML.</li>
<li><a href="http://www.phpeasystep.com/index.php">PHPeasy</a>—Basic PHP/MySQL tutorials.</li>
</ul>
%!s(MISSING)]]></content>
        <category term="mysql" />
        <category term="pdftk" />
        <category term="php" />
        <category term="sh" />
        <category term="sql" />
        <category term="text" />
    </entry>
    <entry>
        <title type="html"><![CDATA[Using Arabic in InDesign without InDesign ME]]></title>
        <link href="https://www.shagunjhaver.com/blog/2007/09/17/using-arabic-in-indesign-without-indesign-me/" rel="alternate" />
        <published>2007-09-17T00:00:00+00:00</published>
        <updated>2007-09-17T00:00:00+00:00</updated>
        <author>
            <name>Shagun Jhaver</name>
        </author>
        <id>https://www.shagunjhaver.com/blog/2007/09/17/using-arabic-in-indesign-without-indesign-me/</id>
        <summary type="html"><![CDATA[How to use the Glyphs panel in InDesign CS3 to insert Arabic text, despite the lack of support for Arabic.]]></summary>
        <content type="html"><![CDATA[<p>About a year ago I discovered to my dismay that using Arabic in InDesign was entirely impossible.</p>
<p>I wanted to make a type of dictionary for my Arabic 101 students, using an Excel spreadsheet full of Arabic words. When I placed any Arabic text, though, this happened:</p>
<p><img src="messed-up-text.png" alt="Messed up Arabic text"></p>
<p>While Microsoft and Apple have great right-to-left (RTL) language support built in, Adobe doesn&rsquo;t. InDesign and Illustrator <em>cannot</em> handle RTL text. Adobe has, however, outsourced their code to <a href="http://www.winsoft.eu/">WinSoft</a>, who develops the Creative Suite ME (Middle Eastern edition), which <em>does</em> have excellent RTL support, especially through the use of their <a href="https://en.wikipedia.org/wiki/Tasmeem">Tasmeem</a> typesetting framework, recently highlighted in <a href="http://www.saudiaramcoworld.com/issue/200704/keyboard.calligraphy.htm">Saudi Aramco Magazine</a>. However, I don&rsquo;t want to buy the ME version for minimal Arabic use.</p>
<h4 id="typing-backwards">Typing backwards</h4>
<p>The only way around this is to type the text in backwards: if you want the word alkitaab, you would have to type baatikla and InDesign <em>should</em> show it correctly.</p>
<p>There&rsquo;s one big caveat though—Arabic letters have different forms depending on where they show up in the word (initial, medial, final, or isolated).</p>
<p>This typing-backwards, faux-RTL works great for Hebrew since almost every letter has the same shape no matter where they are in the word. In fact, <a href="http://indesignsecrets.com/free-script-for-hebrew-or-arabic-text-in-regular-version-of-indesign.php">InDesignSecrets.com mentioned a script</a> that will take pasted Hebrew characters and reverse them automatically.</p>
<p>Unfortunately, Arabic is more complex. There is a clunky solution—hunt and peck with the glyphs panel. This workaround is <em>not</em> useful for large amounts of Arabic text. If you want to design something with a substantial amount of Arabic, buy InDesign ME. (if you&rsquo;re desperate, I guess you <em>could</em> do an entire book like this. It would just take several months to get the text done :) ).</p>
<h4 id="typing-with-the-glyphs-panel">Typing with the glyphs panel</h4>
<p>The glyphs panel is a great and often underused panel in InDesign. It&rsquo;s generally used for finding and inserting dingbat characters or other non-standard glyphs in a font. You can even save your most commonly used glyphs for easy access:</p>
<p><img src="custom-glyphs.png" alt="Custom glyphs"></p>
<p>You can even type with the glyphs panel, which is how we get Arabic working in InDesign. This method also works for Illustrator and any other Adobe program with a glyphs panel.</p>
<p>To activate the panel, go to Window &gt; Type &amp; Tables &gt; Glyphs. Choose an Arabic font from the list in the bottom left corner of the panel to load that font into the panel. I like working with the <a href="https://docs.microsoft.com/en-us/typography/font-list/arabic-typesetting">Arabic Typesetting</a> font that comes with Office 2007 because of the dozens of alternate glyphs and ligatures that are available. Microsoft has an excellent collection of Arabic fonts as well.</p>
<p>You should see normal Roman characters in the panel. Scroll down until you get the Arabic glyphs. Double click on a letter to insert it at your cursor.</p>
<p><img src="arabic-glyphs.png" alt="Arabic glyph panel"></p>
<p>Here&rsquo;s where the magic starts. Many of the glyphs will have a black triangle in the bottom right corner of the grid box. This means that there are alternate glyphs for that character—in this case, different positions for the letter. Click and hold one of the boxes with alternate glyphs and you&rsquo;ll see all the different possibilities for that letter.</p>
<p><img src="all-positions.png" alt="All glyph positions"></p>
<p>To type a full Arabic word, insert the appropriately positioned letters in backwards order using the glyphs panel. Here&rsquo;s a live example of this in action (sorry for the horrible quality):</p>
<div class="video-responsive">
<iframe class="videoplayer" src="https://player.vimeo.com/video/3760188" frameborder="0" allow="autoplay; fullscreen" allowfullscreen></iframe>
</div>
<p>You can insert alternate glyphs and ligatures too:</p>
<p><img src="more-alternate-glyphs.png" alt="Alternate glyphs and ligatures"></p>
<p>If you use a decorative Arabic font, like Microsoft&rsquo;s Diwani family (found in the <a href="http://www.tucows.com/preview/872760/Arabic-Font-Pack">arafonts.exe</a> font package), you can use the decorative swashes as well. You can even change the font after inserting the letters to another Arabic font and maintain the letters.</p>
<p>In the end, you&rsquo;ll have real Arabic text that can be manipulated just like normal InDesign text. It&rsquo;s a clunky method, but it works, as seen <a href="/other-projects/arabian-nights/">here</a>.</p>
<p>This could all probably be automated with a script of sorts, but I&rsquo;m no programmer.</p>
<p>If anyone has comments or suggestions (or knows how to make a script for this), leave a comment below…</p>%!s(MISSING)]]></content>
        <category term="arabic" />
        <category term="graphic design" />
    </entry>
</feed>
